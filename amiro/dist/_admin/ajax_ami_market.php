<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       7611 xkqwsrliprgkyyygklgwytyqggysqsnszlyrxwmstlxmrgmnrtztmzqzlmkmzrxyrirspnir
 */ ?><?php foreach(array(20097=>'uDQr',20098=>'',20099=>'Qnv~tQIGJZtQ',20100=>'zim|zjjhc|jhwzj|ihsUjqd',20101=>'|JHWZJ~IHSuJQD~WHSQ',20102=>'|JHWZJ~IHSuJQD~WHSQ~',20103=>'|JHWZJ~IHSuJQD~SQWJZrZtMHn~',20104=>'|JHWZJ~IHSuJQD~SMDtrMY~',20105=>'|GZtO|',20106=>'WOunKD',20107=>'DuWWQDD',20108=>'DQDD|MS',20109=>'fMJQ',20110=>'CrHnP|rQEuQDt',20111=>'?',20112=>'rQDGHnDQ') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} define('AMI_60', true); $l1IIllI =!empty($GLOBALS['sys']['disable_user_scripts']); foreach(array( $HOST_PATH .'_shared/code/const/_local/local_start.php' => false, )as $_path => $l1IIlll){ if($l1IIlll && $l1IIllI){ continue; }if(file_exists($_path)){ require_once $_path; }}unset($_path, $l1IIlll, $l1IIllI); AMI::addResourceMapping(require($CLASSES_PATH .'60/resourceMapping.php')); AMI::getSingleton('db', array('ami_db' => new DB_si())); AMI_Service::hideDebug(); $oSess =admSession(); $userId =intval($oSess->Data[I20097]['id']); if(!$userId){ TlITlTT('Forbidden'); }$oRequest =AMI::getSingleton('env/request'); $action =$oRequest->get('action', I20098); $pkgId =$oRequest->get('pkg_id', I20098); $l1IIl1L =$oRequest->get('lang', 'auto'); $l1IIl11 =$oRequest->get('hash', I20098); $oTpl =AMI::getResource(I20099); $aLang =$oTpl->parseLocale('skins/vanilla/' .AMI_iTemplate::LNG_PATH .'/ami_market_ajax.lng', $l1IIl1L); TlITlTl('ACTION: ' .$action); if(!$pkgId){ TlITlTT('Package id is not set'); }if( empty($sys['disable_user_scripts']) || defined(I20100) ){AMI_Service::addAutoloadPath($ROOT_PATH .I20101); }switch($action){ case 'info': $aInfo =array(); $tmpName =uniqid() .rand(0, 100) .'.tmp'; $aPath =array( $HOST_PATH .'_admin/_logs/', $HOST_PATH .I20102, $HOST_PATH .I20103, $HOST_PATH .I20104, );$ll11lIl =FALSE; foreach($aPath as $path){ $ll11lIl =(FALSE === file_put_contents($path .$tmpName, '{check}')); if(!$ll11lIl){ @unlink($path .$tmpName); }if($ll11lIl){ $msg =str_replace(I20105, $path, $aLang['directory_not_writable']); TlITlTT($msg, $aInfo); }}case 'download': $oPackageManager =AMI_PackageManager::getInstance(); $aInfo =$oPackageManager->getRemoteFileInfo($pkgId, $l1IIl11); if($aInfo['error']){ $msg =str_replace('_pkgId_', $pkgId, $aLang['package_unavailable']); TlITlTT($msg, $aInfo); }if($action == 'info'){ TlITlTI($aInfo); }$l1IILII =$oRequest->get('sess_id', $aInfo['sessionId']); $chunk =$oRequest->get('chunk', 0); $l1IILIl =$oPackageManager->downloadChunk($pkgId, $l1IILII, $chunk, $aInfo[I20106], $aInfo['fileSize'], $l1IIl11); TlITlTI($l1IILIl); break; case 'unpack': $oPackageManager =AMI_PackageManager::getInstance(); $l1IILII =$oRequest->get('sess_id', false); $path =$oPackageManager->getTemporaryFileName($pkgId, $l1IILII); $l1IILIL =array('path' => $path); if(file_exists($path)){ if($oPackageManager->unpack($path, TRUE)){ TlITlTI(array(I20107 => TRUE)); }else{ $l1IILIL['error'] =error_get_last(); TlITlTT($aLang['cannot_unpack'], $l1IILIL); }}else{ TlITlTT($aLang['file_not_found'], $l1IILIL); }break; case 'check_design': $oPackageManager =AMI_PackageManager::getInstance(); $l1IILII =$oRequest->get(I20108, false); $path =$oPackageManager->getTemporaryFileName($pkgId, $l1IILII); $l1IILIL =array('path' => $path); if(file_exists($path)){ $file =$pkgId .'.tar.gz'; if(rename($path, AMI_Registry::get('path/root') .'_mod_files/_upload/' .$file)){ TlITlTI(array(I20107 => TRUE, I20109 => $file)); }else{ $l1IILIL['error'] =error_get_last(); TlITlTT($aLang['cannot_unpack'], $l1IILIL); }}else{ TlITlTT($aLang['file_not_found'], $l1IILIL); }break; case 'correct_manifest': $oPkgManager =AMI_PackageManager::getInstance(true); $oPkgManager->correctManifest($pkgId, FALSE, TRUE); TlITlTI(array(I20107 => TRUE)); break; default: TlITlTT($aLang[I20110]); }function TlITlTT($msg, $aData =null){ TlITlTl('ERROR: ' .$msg); if(!is_null($aData)){ AMI_Registry::push('disable_error_mail', TRUE); TlITlTl('DATA: ' .var_export($aData, TRUE)); trigger_error('Market AJAX Error: ' .$msg .I20111 .var_export($aData, TRUE), E_USER_WARNING); AMI_Registry::pop('disable_error_mail'); }TlITlTI( array( I20107 => FALSE, 'errorCode' => 1, 'errorMessage' => $msg ));}function TlITlTI($aData){ TlITlTl('Response: ' .var_export($aData, TRUE)); $oResponse =AMI::getSingleton(I20112) ->setBenchType('ADMIN-ENV-FAST') ->setType('JSON') ->start() ->write($aData) ->send(); }function TlITlTl($str){ AMI_Service::log($str, AMI_Registry::get('path/root') .'_admin/_logs/_market_ajax.log'); }