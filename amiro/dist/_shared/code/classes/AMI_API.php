<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    core 
 * @version    $Id$ 
 * @size       11419 xkqwuupkpmqqgqtympqxsuktprlulqllipwklkrriyrzkgnlsqnpzmrmuywyugxqrumwpnir
 */ ?><?php foreach(array(310=>'RhhT|gzTo',311=>'DQWrQt',312=>'.MS.?=?',313=>".IHSuJQ|nZIQ.?=?'",314=>'*',315=>'&?') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class AMI_API{ const ERR_INVALID_PLUGIN_ID =0x0101; const WARN_EXEC_TIME_EXCEEDS_MAX =0x0102; const MAX_ERR_LOG_SIZE =2000000; const ERR_LOG_BACKUP =true; private static $instance; private $IIIllLL =false; private $rootPath =''; private $logPath =''; private $IIIllL1 =array(); private $cms; private function __construct(){ $this->rootPath =$GLOBALS[I310]; $this->logPath =$this->rootPath .'_admin/_logs/err.log'; global $cms; if(isset($cms) && is_object($cms) && is_subclass_of($cms, 'CMS_Base')){ $this->cms =&$cms; }}private function __clone(){ }public static function getInstance(){ if(is_null(self::$instance)){ self::$instance =new self; }return self::$instance; }public function setLogging($IIIll1I){ $this->IIIllLL =(bool)$IIIll1I; }public function getPluginPath($pluginId){ $path =false; if(preg_match('/^[a-z][a-z\d_]*$/', $pluginId)){ $path =$this->rootPath .'_local/plugins_distr/' .$pluginId; if(!is_dir($path)){ $path =false; }}if(!$path){ $this->error(self::ERR_INVALID_PLUGIN_ID, "Invalid plugin id '" .$pluginId ."'"); }return $path .'/'; }public function getPluginOption($pluginId, $secret, $name){ $res =null; if(!empty($this->cms)){ for($i =1; $i <= $GLOBALS['PLUGINS_COUNT']; $i++){ $moduleName =CMS_InstallablePlugin::GetPluginName($i); if( $this->cms->Core->IsInstalled($moduleName) && $this->cms->Core->GetModOption($moduleName, 'plugin_id') == $pluginId && $this->cms->Core->issetModOption($moduleName, I311) && $this->cms->Core->issetModOption($moduleName, $name) && $this->cms->Core->GetModOption($moduleName, I311) == $secret ){$res =$this->cms->Core->GetModOption($moduleName, $name); break; }}}return $res; }public function TTTTT1l($module, $pageId =0){ $oDB =AMI::getSingleton('db'); $sql ="SELECT `script_link` " ."FROM `cms_pages` " ."WHERE " .($pageId ?I312 .(int)$pageId .' AND ' :'') .I313 .$db->quote($module) ."' AND `public` = 1"; if(!$pageId){ $sql .= ' ORDER BY `id` ASC LIMIT 1'; }return $db->fetchValue($sql); }public function TTTTT11($IIIll1l, $maxExecutionTime){ $executionsTime =microtime(true) -$IIIll1l; if($executionsTime >$maxExecutionTime){ $this->setLogging(true); $this->log( I314 .self::WARN_EXEC_TIME_EXCEEDS_MAX .'] Execution time exceeds maximum (' .$executionsTime .', ' .$maxExecutionTime .'): ' .$_SERVER['REQUEST_URI'] );}}public function error($code, $message){ $e =new Exception(); $this->log(I314 .$code .I315 .$message); $error ='Error code: ' .$code; die($e->getTraceAsString() .$code); }public function log($message){ if($this->IIIllLL && !empty($message)){ $message =I314 .date('Y-m-d H:i:s') .I315 .$message ."\n"; clearstatcache(); if(@file_exists($this->logPath)){ $fsize =@filesize($this->logPath); if(self::ERR_LOG_BACKUP && self::MAX_ERR_LOG_SIZE >0 && $fsize >= self::MAX_ERR_LOG_SIZE){ $backup =$this->logPath .'.bak'; @unlink($backup); @rename($this->logPath, $backup); }}@file_put_contents($this->logPath, $message, FILE_APPEND); @chmod($this->logPath, 0666); }}public function TTTTITT($source, $event, $handler){ $res =is_string($handler) || (is_object($handler) && in_array('AMI_EvtHandler_Interface', class_implements($handler))); if($res){ if(empty($this->IIIllL1[$source])){ $this->IIIllL1[$source] =array(); }if(empty($this->IIIllL1[$source][$event])){ $this->IIIllL1[$source][$event] =array(); }$this->IIIllL1[$source][$event][] =$handler; }return $res; }public function TTTTITI($source){ return isset($this->IIIllL1[$source]) ?$this->IIIllL1[$source] :array(); }public function TTTTITl($source, $event, &$data){ $res =isset($this->IIIllL1[$source]) && isset($this->IIIllL1[$source][$event]); if($res){ foreach(array_keys($this->IIIllL1[$source][$event]) as $index){ if(is_string($this->IIIllL1[$source][$event][$index])){ $class =$this->IIIllL1[$source][$event][$index]; if(class_exists($class, true)){ if(!in_array('AMI_EvtHandler_Interface', class_implements($class))){ trigger_error('Handler must implement AMI_EvtHandler_Interface', E_USER_ERROR); }$this->IIIllL1[$source][$event][$index] =new $class; }}$data['source'] =$source; $data['event'] =$event; $this->IIIllL1[$source][$event][$index]->TTTIITT($data); }}return $res; }}