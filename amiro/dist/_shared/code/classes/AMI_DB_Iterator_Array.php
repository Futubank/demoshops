<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    db 
 * @version    $Id$ 
 * @size       9322 xkqwurtnkyymytrmmzgktillinkmxyxqnygrykgznwigtwsrnmzwsxtnxxtsgxlqxzqupnir
 */ ?><?php  if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class AMI_DB_Iterator_Array extends AMI_DB_Abstract{ public $IIIll1L =true; public $IIIll11 =null; private $aRecords =array(); public function __construct(){ }public static function getInstance($init =null){ return clone self::$this; }public function setArray($aRecords){ $this->aRecords =$aRecords; }public function TTTTIT1(){ return $this->aRecords; }public function query($query, $flags =0, $IIIlLII =false){ $this->rs =new AMI_DB_Recordset_Iterator_Array($this, $query, $IIIlLII); }function select($query, $fetchType =MYSQL_ASSOC, $flags =0){ $this->query($query, $flags); return $this->rs; }public function TTTTIIT($query, $flags =0){ $this->query($query, $flags, true); return $this->rs; }public function getRecord($query, $fetchType =MYSQL_ASSOC, $flags =0){ $res =$this->select($query, $fetchType, $flags); return $res ?$res->current() :false; }public function getValue($query, $flags =0){ $rs =$this->select($query, MYSQL_ASSOC, $flags); if($rs){ $res =$rs->current(); $res =$res[0]; }else{ $res =false; }return $res; }}class AMI_DB_Recordset_Iterator_Array implements DB_Recordset_Interface{ protected $position; protected $record; private $IIIlLIl; private $IIIlLIL =false; private $numRows =0; private $IIIlLII; private $aRecords =array(); public function __construct(AMI_DB_Iterator_Array $IIIlLIl, $query, $IIIlLII){ $this->IIIlLIl =$IIIlLIl; $this->IIIlLII =(bool)$IIIlLII; $aRecords =$IIIlLIl->TTTTIT1(); if(preg_match('/select *count\( *\* *\) *as *(\w+) */si', $query, $matches)){ $this->numRows++; $this->aRecords[] =array($matches[1] => sizeof($aRecords)); }elseif(preg_match('/select *found_rows\\(\\) *(as)? *([^ ]+)/si', $query, $matches)) {$this->IIIlLIL =array($matches[2] => empty($IIIlLIl->IIIll11) ?sizeof($aRecords) :$IIIlLIl->IIIll11); }else {$this->aRecords =array(); $this->record =array(); $this->numRows =0; $this->position =0; $IIIlLI1 =0; $IIIlLlI =1000; if($IIIlLIl->IIIll1L && preg_match('/^.*limit *(\d+) *,? *(\d+)?.*?$/i', $query, $matches)){ if(!isset($matches[2]) || !(int)$matches[2]) $IIIlLlI =(int)$matches[1]; else{ $IIIlLI1 =(int)$matches[1]; $IIIlLlI =(int)$matches[2]; }}for($i =$IIIlLI1; $i <min($IIIlLlI +$IIIlLI1, sizeof($aRecords)); $i++){ $this->numRows++; $this->aRecords[] =array_merge($aRecords[$i], array('row_index' => $this->numRows-1)); }}$this->rewind(); }public function __toString(){ return implode(',', iterator_to_array($this)); }public function key(){ return $this->position; }public function valid(){ return (bool)$this->record; }public function current(){ if($this->IIIlLII && is_array($this->record)){ static $IIIlLll; if(is_null($IIIlLll)){ reset($this->record); list($IIIlLll,) =each($this->record); }if($IIIlLll !== false){ $res =$this->record[$IIIlLll]; }else{ $res =null; }}else{ $res =$this->record; }return $res; }public function rewind(){ $this->position =-1; $this->TTTTIII(); }public function next(){ $this->TTTTIII(); }public function count(){ return $this->numRows; }public function seek($position){ $this->position =(int)$position -(empty($this->IIIlLIL) ?1 :0); $this->TTTTIII(); return $this->valid(); }private function TTTTIII(){ if(!empty($this->IIIlLIL)){ $this->record =$this->IIIlLIL; $this->IIIlLIL =null; }elseif(($this->position +1) <$this->numRows){ $this->record =$this->aRecords[++$this->position]; }else{ $this->record =false; }}}