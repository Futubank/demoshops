<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       29866 xkqwusxmtmmtxkrzikipylmkzikutyuqsiqyprlrzlmqtrmywklikxxzymnpiwspgkilpnir
 */ ?><?php foreach(array(554=>'wjzddqd|gzTo',555=>'sHCnJHZSQr`GOG',556=>'vZr~uGSZtQD~',557=>'DtZtuD',558=>'OHDt',559=>'JMWQnDQ',560=>"dqjqwT?.JMWQnWQ.?FRhi?WID|OHDt|uDQrD?coqRq?.DBD|uDQr.=1",561=>'JMW|GZDDCHrS',562=>'uGSZtQ|rQEuQDt',563=>'uGSDQrv|urJ|YZWKuG',564=>'fMJQ',565=>'SJHZS|PQt',566=>'Ugs|q|sjhzsqR',567=>'KQB',568=>"'",569=>'JMnK',570=>'MnDt|DtZtuD',571=>'RhhT|gzTo|ccc',572=>'nZIQ',573=>'SQDWrMGtMHn',574=>'nHnQ',575=>'uGSZtQ|SZtZ',576=>'GZtO',577=>'Hut|JMnQ|nuI',578=>'SHnQ',579=>'',580=>"?nHt?fHunS",581=>'fMJQ|DtZtuD',582=>'WID|uGSZtQD',583=>'`',584=>'GOG',585=>'+',586=>"wZnnHt?MnDtZJJ?uGSZtQD?Mn?DOZrQS?IHSQ",587=>"NHt?QnHuPO?fMJQDBDtQI?GQrIMDDMHnD?tH?MnDtZJJ?uGSZtQ",588=>'fMJQnZIQ',589=>'HG|DBD|QrrHr',590=>'WrQZtQ',591=>'frHnt|uGSZtQ',592=>'ZSIMn',593=>'unZGWK|uGSZtQ|fMJQ',594=>'vZr~tIG~',595=>'DMtQZrWO|rQDtHrQ',596=>'rY|Qrr',597=>'Qrr|unMnDtZJJ|uGSZtQ',598=>"UgszTq?WID|uGSZtQD?dqT?MnDt|DtZtuD='Qrr'!MnDtZJJ|SZtQ='0000+00+00?00%00%00'!MS|YZWKuG=0?",599=>'Qrr|MnDtZJJ|uGSZtQ',600=>"UgszTq?WID|uGSZtQD?dqT?MnDt|DtZtuD='HK'!MnDtZJJ|SZtQ=Nhc}{?coqRq?MS=",601=>'frHnt',602=>'MnDtZJJMnP|uGSZtQ',603=>"`?wZnnHt?unMnDtZJJ",604=>'wHrQ',605=>"wZnnHt?uMnDtZJJ?uGSZtQD?Mn?DOZrQS?IHSQ",606=>"NHt?QnHuPO?fMJQDBDtQI?GQrIMDDMHnD?tH?unMnDtZJJ?uGSZtQ",607=>"coqRq?MS=") as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .'BaseObject.php'; require_once $GLOBALS[I554] .'ProgressDisplay.php'; require_once $GLOBALS[I554] .'SiteArchive.php'; require_once $GLOBALS[I554] .'CMSBackup.php'; require_once $GLOBALS[I554] .'SocketConnection.php'; require_once $GLOBALS[I554] .I555; define('UPD_NEED_RUN', 0x1); define('UPDATES_LIST_FILE','updates.dat'); class CMSUpdateSet extends BaseObject {public $IIlIl1l; public $IIlIl1L; public $IIlIl11; public $db; public $IIlILII =0; function CMSUpdateSet(&$db,$dir=false) {$this->BaseObject(); $this->db =&$db; if($dir===false) $this->IIlIl1l =$GLOBALS['IIlIlIL'].I556; else $this->IIlIl1l =$dir; $this->IIlIl1L =$this->IIlIl1l.UPDATES_LIST_FILE; $this->IIlILII =0; $this->IIlIl11 =false; }function TTTIlll() {return $this->IIlILII; }function TTTIll1() {return is_array($this->IIlIl11) ?sizeof($this->IIlIl11['updates']) :false; }function TTTIl1T($str) {$str =trim($str); $pos =mb_strrpos($str,"\n"); if($pos===false) return $this->TTTITTI("Invalid update list file or server response",'UPD_E_LIST'); $IIlILIl =mb_substr($str,$pos+1); $data =trim(mb_substr($str,0,$pos)); if(empty($IIlILIl) || empty($data)) return $this->TTTITTI("Invalid update list file or server response",'UPD_E_LIST'); if(md5(sha1($data).'etMnshrQmnrtW'.md5($data))!=$IIlILIl) return $this->TTTITTI("Update list checksum error",'UPD_E_LIST'); $this->IIlIl11 =unserialize($data); return $this->info(I557)==0; }function TTTIl1I() {if(!($str=@file_get_contents($this->IIlIl1L))) return $this->TTTITTI("Cannot read update list file",'UPD_E_LIST'); return $this->TTTIl1T($str); }function info($k) {return is_array($this->IIlIl11) ?$this->IIlIl11[$k] :false; }function TTTIl1l($IIlILIL=false) {$req =array(); $IIlILI1 =parse_url($GLOBALS['ROOT_PATH_WWW']); $req['domain'] =$IIlILI1[I558]; $req[I559] =$this->db->getValue(I560); $req['ip'] =$_SERVER['SERVER_ADDR']; $req['versions'] =$GLOBALS['Core']->getVersion(); $req[I561] =$GLOBALS['IIlILlI']; $req['lang'] =$GLOBALS['lang']; if($IIlILIL) {$req['fullup'] =1; }return array(I562=>base64_encode(gzcompress(serialize($req)))); }function TTTIl11($opt,&$pi,$words=false) {$IIlILll =Downloader::TTTI1II(); $this->IIlILII =0; do {if(!file_exists($this->IIlIl1L) || $opt['force_dl_list']) {if(!$IIlILll) return $this->TTTITTI("Downloader is not available",'UPD_E_DLOADER'); $IIlILlL =new Downloader(); if(is_object($pi)) {$IIlILl1 =new DownloadDisplay($pi,$words); $IIlILlL->TTTIT11('dload_get',$IIlILl1); $pi->setHeader($words['getting_update_list']); }$IIlILlL->set('method','POST'); $IIlILlL->TT1llTl($this->TTTIl1l($opt['fullup'])); $url =$opt['updserv_url']; if(!$IIlILlL->run($url) and !$IIlILlL->run($opt[I563])) {$this->TTTITll($IIlILlL); break; }$resp =$IIlILlL->TT1llTI(); if(!$this->TTTIl1T($resp)) break; if(!($fd=@fopen($this->IIlIl1L,'w'))) {$this->TTTITTI("Cannot open $this->IIlIl1L for writing",'UPD_E_LIST'); break; }@fwrite($fd,$resp); @fclose($fd); }else $this->TTTIl1I(); }while(false); if($this->TTTITT1()) {trigger_error("Error while getting update set from $url :".$this->errorsAsString(),E_USER_WARNING); return false; }if($this->info(I557)) return false; if(!sizeof($this->IIlIl11['updates'])) {@unlink($this->IIlIl1L); return 0; }foreach($this->IIlIl11['updates'] as $IIlILLI=>$data) {$fname =$this->IIlIl1l.$data[I564]; if(!file_exists($fname) || md5_file($fname)!=="$data[cksum]" || $opt['force_dl_files']) {if(!$IIlILll) return $this->TTTITTI("Downloader is not available",'UPD_E_DLOADER'); @unlink($fname); $IIlILlL =new Downloader(); if(is_object($pi)) {$pi->setHeader($words['downloading_update']); $IIlILl1 =new DownloadDisplay($pi,$words); $IIlILlL->TTTIT11(I565,$IIlILl1); }$IIlILlL->set('method','GET'); if(!$IIlILlL->run($data['url'],$fname)) {$this->TTTITll($IIlILlL); @unlink($fname); continue; }$this->TTTI1Tl($IIlILLI,$data,true); }else {$this->TTTI1Tl($IIlILLI,$data,false); }}return $this->TTTIlll(); }function TTTI1TT($opt) {$IIlILll =Downloader::TTTI1II(); $this->IIlILII =0; do {if(!$IIlILll) return $this->TTTITTI("Downloader is not available",I566); $IIlILlL =new Downloader(); $IIlILlL->set('method','POST'); $IIlILLl =$this->TTTIl1l(); $IIlILLl['valid_request'] =$IIlILLl[I562]; unset ($IIlILLl[I562]); $IIlILlL->TT1llTl($IIlILLl); $url =$opt['updserv_url']; if(!$IIlILlL->run($url) and !$IIlILlL->run($opt[I563])) {$this->TTTITll($IIlILlL); break; }$resp =$IIlILlL->TT1llTI(); if(!$this->TTTIl1T($resp)) break; }while(false); if($this->TTTITT1()) {trigger_error("Error while getting update set from $url :".$this->errorsAsString(),E_USER_WARNING); return false; }if($this->info(I557)) return false; $sql ="DELETE FROM cms_updates WHERE inst_status = 'none' AND file_status = 'none'"; $this->db->execute($sql); foreach($this->IIlIl11['updates'] as $IIlILLI=>$data) {$this->TTTI1T1($IIlILLI,$data); }return $this->IIlIl11['valid_till']; }function TTTI1TI($msg) {trigger_error("$msg\n  ReqID=".$this->info('reqId')."\n  Key=".$this->info(I567),E_USER_WARNING); }function TTTI1Tl($name,$data,$checkSum) {if($this->db->getValue("SELECT `name` FROM cms_updates WHERE `name`='".addslashes($name)."' ". " AND inst_status IN ('ok','un_err','rb_err')")) {return false; }$sql ="DELETE FROM cms_updates WHERE `name`='".addslashes($name).I568; $this->db->execute($sql); $IIlILLL =$this->db->affectedRows()==0; $fname =$data[I564]; if($checkSum && md5_file($this->IIlIl1l.$fname)!=="$data[cksum]") {$this->TTTI1TI("Update import: invalid checksum: $fname"); return false; }if(($udata =$this->TTTI1IT($this->IIlIl1l.$fname))===false) {$this->TTTI1TI("Update import: file in not a valid update: $fname"); return false; }list(,$update) =each($udata); $update['filename'] =$fname; $update['full_description'] =$data['full_description']; $update['link'] =$data[I569]; $asql =array ('name' => $name, 'update_data' => serialize($update), 'release_date' => $update['release_date'], I570 => 'none', 'file_status' => 'ok', 'checksum' => md5($name.$GLOBALS[I571].serialize($update)) );$this->db->insert('cms_updates',$asql); if($IIlILLL) $this->IIlILII++; }function TTTI1T1($name,$data) {if($this->db->getValue("SELECT `name` FROM cms_updates WHERE `name`='".addslashes($name)."' ". " AND (inst_status IN ('ok','un_err','rb_err') OR file_status='ok')")) {return false; }$asql =array (I572 => $name, 'update_data' => serialize(array( 'filename' => 'dummy', 'description' => $data[I573], 'full_description' => $data['full_description'], I569 => $data[I569], )),'release_date' => $data['release_date'], I570 => I574, 'file_status' => I574 );$this->db->insert('cms_updates',$asql); }function TTTI1IT($fname) {$IIlILL1 =new PHPTar($fname,true); $meta =$IIlILL1->meta(); if($meta===false) {return false; }$meta =unserialize($meta); if(!is_array($meta)) {return false; }if(!isset($meta['arch_type']) || $meta['arch_type']!=ARCH_TYPE_UPDATE) return false; if(!is_array($meta[I575])) return false; return $meta[I575]; }}class UpdateUnpacker extends SiteArchive {function UpdateUnpacker($fname) {$this->SiteArchive($db=null); $this->archive =$fname; }}class UpdateRunner extends BaseObject {public $IIlIL1I; function UpdateRunner() {$this->BaseObject(); $this->TTTIT1I('update_run'); $this->IIlIL1I =''; }public static function TTTI1II() {return SocketConnection::TTTI1II(); }function run($name,$timeout,$key='') {$this->TTTIT1l('update_run'); $p =parse_url($GLOBALS[I571]); $host =$p[I558]; $path =$p[I576]; $port =intval($p['port']); if(!$port) $port =80; $req ="GET {$path}pages.php?__update={$name}&update_key={$key} HTTP/1.1\r\n"; $req .= "Host: $host\r\n"; $req .= "Connection: Close\r\n\r\n"; $conn =new SocketConnection("inet:$host:$port",$timeout); $d =array(); $this->TTTIITI('update_run','http_request',$d); if(!$conn->send($req)) return $this->TTTITll($conn); $this->III1Ill =true; $count =0; @set_time_limit(25); while($line=$conn->TI1IIIl()) {$this->IIlIL1I .= $line; $d =array(I577=>++$count); $this->TTTIITI('update_run','tick',$d); if(preg_match('/200\s+OK\s+update\s+done/i',$line)) {$d =array(); $this->TTTIITI('update_run',I578,$d); $conn->disconnect(); return true; }@set_time_limit(25); }$this->TTTITll($conn,false); return $this->TTTITTI("Update failed (no success string found in output)",'E_RUN_ERR'); }function TTTI1Il() {return $this->IIlIL1I; }}class CMSUpdate extends BaseObject {public $name; public $udata; public $IIlIL1l; public $IIlIL1L; public $IIlIL11; public $db; public $IIlIl1l; public $IIlIL1I; public $IIlIlIl; function CMSUpdate(&$db,$id=0,$dir=false) {$this->BaseObject(); $this->db =&$db; $this->_id =intval($id); $this->IIlIL11 =false; if($dir===false) $this->IIlIl1l =$GLOBALS['IIlIlIL'].I556; else $this->IIlIl1l =$dir; $this->name =''; $this->IIlIL1I =I579; $this->IIlIlIl =false; }public static function TTTI1II() {return UpdateRunner::TTTI1II(); }function TTTI1I1() {return $this->IIlIl1l.$this->udata['filename']; }function TTTIlII() {if($this->IIlIL11) return true; $rec =$this->db->getRecord("SELECT name,update_data,inst_status,id_backup ". "FROM cms_updates WHERE id=".$this->id()); if(!$rec) return $this->TTTITTI("Update id=".$this->id().I580); $this->udata =unserialize($rec[I575]); $this->IIlIL1l =$rec[I570]; $this->name =$rec[I572]; $this->IIlIL1L =intval($rec['id_backup']); $this->IIlIL11 =true; return true; }function purge() {if(!$this->TTTIlII()) return false; if($this->IIlIL1L) {$IIlIlLL =new CMSBackup($this->db,$this->IIlIL1L); if(!$IIlIlLL->delete()) {return $this->TTTITll($IIlIlLL); }}@unlink($this->TTTI1I1()); if($this->IIlIL1l!='ok') {$this->db->query('DELETE FROM cms_updates WHERE id='.$this->id()); }else {$this->db->query($this->db->GenUpdateSQL('cms_updates', array(I581=>I574),"WHERE id='".$this->id().I568)); }return true; }function delete() {if(!$this->purge()) return false; if($this->IIlIL1l=='ok') {$this->db->query('DELETE FROM cms_updates WHERE id='.$this->id()); }}function &TTTI1lT(&$db,$id) {$up =new CMSUpdate($db,$id); $null =null; return $up->TTTIlII() ?$up :$null; }function &TTTI1lI(&$db,$name) {$null =null; $db->query("SELECT id FROM cms_updates WHERE name='$name'"); if(!$db->next_record()) return $null; return CMSUpdate::TTTI1lT($db,$db->Record['id']); }function deleteByName(&$db,$name) {$up =&CMSUpdate::TTTI1lI($db,$name); if($up==null) return false; $up->delete(); return true; }function TTTI1ll(&$db,$name,$status) {$db->query($db->GenUpdateSQL(I582,array(I570=>$status),"WHERE name='$name'")); }function fileSize($IIlIl1l,$fname) {clearstatcache(); $size =@filesize($IIlIl1l.$fname); return intval($size); }function TTTI1l1($prod,$type,$IIlI1II,&$db) {if(!isset($IIlI1II[$prod])) return true; $IIlI1Il =$IIlI1II[$prod]['from'][$type]; if($type=='db') $type ='act_db'; if($type=='mysql') {$tmp =$db->TT1lITI(); $curVer =mb_substr($tmp,0,1).I583.intval(mb_substr($tmp,1,2)).I583.intval(mb_substr($tmp,3,2)).'.0'; $IIlI1Il =$IIlI1Il.'.0'; if($IIlI1Il!='-' && $GLOBALS['Core']->compareVersions($curVer,$IIlI1Il) <0) return false; }elseif($type==I584) {$curVer =phpversion(); $curVer =preg_replace ('/^(\d+\.)(\d+\.)(\d+)(.*)/','$1$2$3',$curVer); $curVer =$curVer.'.0'; $IIlI1Il =$IIlI1Il.'.0'; if($IIlI1Il!=I585 && $GLOBALS['Core']->compareVersions($curVer,$IIlI1Il) <0) return false; }else {$curVer =$GLOBALS['Core']->getVersion($prod,$type); if($IIlI1Il!=I585 && $GLOBALS['Core']->compareVersions($curVer,$IIlI1Il)!=0) return false; }return true; }function TTTI11T() {if($GLOBALS['Core']->HostMode() &HOSTMODE_SHARED) return $this->TTTITTI(I586); if(!TI1lIII()) return $this->TTTITTI(I587); $fname =$this->TTTI1I1(); if(!CMSUpdate::fileSize($this->IIlIl1l,$this->udata[I588])) return $this->TTTITTI("File '$fname' does not exist or is empty"); $IIlI1IL =&$this->udata['products']; foreach($IIlI1IL as $IIlI1I1=>$vers) {if(!CMSUpdate::TTTI1l1($IIlI1I1,'code',$IIlI1IL, $this->db) || !CMSUpdate::TTTI1l1($IIlI1I1,'db',$IIlI1IL, $this->db) || !CMSUpdate::TTTI1l1($IIlI1I1,I584,$IIlI1IL, $this->db) || !CMSUpdate::TTTI1l1($IIlI1I1,'mysql',$IIlI1IL, $this->db)) return $this->TTTITTI("CMS code/DB version mismatch"); }return true; }function install(&$gui,&$pi,&$words,$IIlI1lI=false) {require_once($GLOBALS["FUNC_INCLUDES_PATH"]."func_file_system.php"); ignore_user_abort(true); $this->IIlIL1l =I574; if($pi!=null) {$IIlILl1 =new SiteArchDisplay($pi,$words); $IIlILl1->setHeader($words['verifying_update']); }else $IIlILl1 =null; $us =new CMSUpdateSet($this->db); if(!$us->TTTIl1I()) {if($IIlILl1!=null) $IIlILl1->TI1TIl1($words['updates_list_corrupt'],false); $this->TTTITll($us); return false; }if(!$this->TTTIlII() || !$this->TTTI11T()) {if($IIlILl1!=null) $IIlILl1->TI1TIl1($words[I589],false); return false; }$IIlI1ll =$us->info('updates'); $fileInfo =$IIlI1ll[$this->name]; if("$fileInfo[cksum]"!==md5_file($this->TTTI1I1())) {if($IIlILl1!=null) $IIlILl1->TI1TIl1($words['update_file_corrupt'],false); return $this->TTTITTI("Update file is corrupt: ".$this->TTTI1I1()); }if($IIlILl1!=null) {$IIlILl1 =new SiteArchDisplay($pi,$words); if (!$IIlI1lI) {$IIlILl1->setHeader($words['backup_before_update']); $IIlILl1->init(I590); }}CMSBackup::TTTIllI($this->db,$this->IIlIL1L); if (!$IIlI1lI) {$meta =array( 'sys_type' => ARCH_SYSTYPE_SYS, 'contents' => $this->udata['backup'], I573 => "Made by update $this->name", );$IIlIlLL =new CMSBackup($this->db); if(!$IIlIlLL->prepare($meta)) {if($IIlILl1!=null) $IIlILl1->TI1TIll($IIlIlLL->errorsAsString()); return $this->TTTITll($IIlIlLL,false); }}$lock =new SiteLock($gui); $IIlI1lL =$lock->put('front',I591); $IIlI1l1 =$lock->put('admin','admin_update'); if (!$IIlI1lI) {if($IIlILl1!=null) $IIlIlLL->TTTIT11('sitearch_create',$IIlILl1); if(!$IIlIlLL->create()) {$lock->remove('front'); $lock->remove(I592); if($IIlILl1!=null) $IIlILl1->TI1TIll($IIlIlLL->errorsAsString()); return $this->TTTITll($IIlIlLL,false); }$this->IIlIL1L =$IIlIlLL->id(); $this->db->execute($this->db->genUpdateSQL(I582,array('id_backup'=>$this->IIlIL1L),"WHERE id=".$this->id())); }else {$this->db->execute($this->db->genUpdateSQL(I582,array('id_backup'=>0),"WHERE id=".$this->id())); }$IIlI1LI =new UpdateUnpacker($this->TTTI1I1()); if($IIlILl1!=null) {$IIlILl1->setHeader($words[I593]); $IIlILl1->init('restore'); $IIlI1LI->TTTIT11('sitearch_restore',$IIlILl1); }$this->III1Ill =false; $this->IIlIL1I =I579; if(!$IIlI1LI->restore()) {$this->TTTITll($IIlI1LI,true); }else {$this->III1Ill =true; if($this->udata['flags'] &UPD_NEED_RUN) $this->TTTI11l($pi,$words,$us->info(I567)); }TT1lIll($GLOBALS['IIlIlIL'].I594); $this->db->execute($this->db->GenUpdateSQL(I582, array('upd_log'=>addslashes($this->IIlIL1I)),"WHERE id=".$this->id())); if(sizeof($this->errors())) {if($this->III1Ill) {if(!$IIlI1lI and $IIlILl1!=null) {$IIlILl1->setHeader($words['rolling_back_update']); $IIlILl1->init('restore'); $IIlIlLL->TTTIT11(I595,$IIlILl1); }if(!$IIlI1lI and !$IIlIlLL->restore()) {$this->TTTITll($IIlIlLL,false); $lock->put(I592,'rb_err',array('op_info'=>$this->errorsAsString("\n"))); $this->db->query("UPDATE cms_updates SET inst_status='rb_err' WHERE id=".$this->id()); $this->IIlIL1l =I596; if($IIlILl1!=null) {$IIlILl1->TI1TIl1($words[I597],false); }return false; }else {$this->IIlIL1l ='err'; if (!$IIlI1lI) $IIlIlLL->delete(); $this->db->execute(I598. "WHERE id=".$this->id()); $lock->remove('front'); $lock->remove(I592); if($IIlILl1!=null) {$IIlILl1->TI1TI1T(I579); $IIlILl1->setHeader($words[I599]); $IIlILl1->TI1TI1I(); }return false; }}else {$lock->remove('front'); $lock->remove(I592); return false; }}else {$this->db->execute(I600.$this->id()); $lock->remove(I601); $lock->remove(I592); $this->TTTlTTT(); if($IIlILl1!=null) {$IIlILl1->TI1TI1T($words['update_success']); $IIlILl1->TI1TI1I(); }return true; }}function TTTI11I() {return $this->IIlIL1l; }function TTTI11l(&$pi,&$words,$key=I579) {$IIlI1Ll =new UpdateRunner(); if($pi!=null) {$IIlILl1 =new UpdateDisplay($pi,$words); $IIlILl1->setHeader($words[I602]); $IIlILl1->init(); $IIlI1Ll->TTTIT11('update_run',$IIlILl1); }$res =$IIlI1Ll->run($this->name,10800,$key); $this->IIlIL1I =$IIlI1Ll->TTTI1Il(); return $res ?true :$this->TTTITll($IIlI1Ll); }function TTTI111() {return $this->IIlIL1I; }function uninstall(&$gui,&$pi,&$words) {ignore_user_abort(true); if($pi!=null) {$IIlILl1 =new SiteArchDisplay($pi,$words); $IIlILl1->setHeader($words['rollback_update']); $IIlILl1->init('restore'); }else $IIlILl1 =null; if($this->TTTIlII()) {if(!$this->IIlIL1L) $this->TTTITTI("No backup for update '$this->name', id=".$this->id().I603); if($GLOBALS[I604]->HostMode() &HOSTMODE_SHARED) $this->TTTITTI(I605); if(!TI1lIII()) $this->TTTITTI(I606); }if(sizeof($this->errors())) {if($IIlILl1!=null) $IIlILl1->TI1TIl1($words[I589],false); return false; }$IIlIlLL =new CMSBackup($this->db,$this->IIlIL1L); $lock =new SiteLock($gui); $IIlI1lL =$lock->put(I601,'front_restore'); $IIlI1l1 =$lock->put(I592,'admin_restore'); $IIlIlLL->TTTIT11(I595,$IIlILl1); $res =$IIlIlLL->restore(); if($res || !$IIlIlLL->TTTITl1()) {$lock->remove(I601); $lock->remove(I592); }if($res) {$this->TTTlTTT(); $this->db->execute($this->db->GenUpdateSQL(I582, array(I570=>I574),"WHERE id=".$this->id())); if($IIlILl1!=null) {$IIlILl1->TI1TI1T($words['rollback_update_success']); $IIlILl1->TI1TI1I(); }return true; }$this->TTTITll($IIlIlLL); if($IIlIlLL->TTTITl1()) {$this->db->execute($this->db->GenUpdateSQL(I582, array(I570=>I596),I607.$this->id())); $lock->put(I592,'status_err',array('op_info'=>$IIlIlLL->errorsAsString("\n"))); }return false; }function TTTlTTT() {$this->db->query("DELETE FROM cms_sessions"); }}