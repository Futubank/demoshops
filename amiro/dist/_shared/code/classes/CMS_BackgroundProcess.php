<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    core 
 * @version    $Id$ 
 * @size       10656 xkqwsiuzqnpmikgnrylsxiqiimttswgyqiisnqxpnxpzzxgurgzyxyxrmtzguwtztssnpnir
 */ ?><?php foreach(array(1044=>'yqNwo|jhp|Fmjq',1045=>'MIGHrt|tZDK|MS',1046=>'IHSuJQ',1047=>'jhwzj|Fmjqd|gzTo',1048=>'IHSuJQD~SQWJZrZtMHn~SQWJZrQD`GOG',1049=>'SY',1050=>'&?*',1051=>'`GOG',1052=>'zim|zjjhc|jhwzj|ihsUjqd',1053=>'IHSuJQD~WHSQ~',1054=>"HwZWOQ",1055=>'WID|GrHWQDDQD',1056=>'YZWKPrHunS|GrHWQDD',1057=>'b+I+S?o%M%D',1058=>'&?',1059=>'&') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class CMS_BackgroundProcess{ public $db; public $IILI1Ll; public $IILI1LL; private $IIll1Il =array(); private $IILI1L1 =''; private $IILI11I =array(); private $_id; function CMS_BackgroundProcess(){ $this->db =&$GLOBALS["oCache"]->db; $this->IILI1L1 =empty($GLOBALS[I1044]) || empty($GLOBALS['BACKGROUND_BENCH_LOG_FILE_SIZE']) ?'' :dirname($GLOBALS[I1044]) .'/bench.background.log'; $this->_id =time(); $this->TTITT1T('started'); $this->TTITTll('CMS_BackgroundProcess'); $this->IILI1Ll =$GLOBALS["oCache"]->IssetOption('background_process') && $GLOBALS["oCache"]->GetOption('background_process') >0; $this->IILI1LL =false; $this->IIll1Il =array(); $sql ="SELECT * FROM `cms_processes`"; $this->db->query($sql); while($record =$this->db->nextRecord()){ if((isset($record['type']) && $record['type'] == 1) && (isset($record['is_sheduled']) && $record['is_sheduled'] == 1) ){$this->TTITTlT($record[I1045]); $this->IIll1Il['task_' .$record[I1045]] =$record[I1046]; }else{ $this->IIll1Il[$record['handler']] =$record[I1046]; }}}private function TTITTlT($taskId){ if(AMI_Registry::get('side') != 'adm'){ global $oDeclarator, $Core; $IILI11l =@ignore_user_abort(true); $oDeclarator =AMI_ModDeclarator::getInstance(); $path =$GLOBALS[I1047] .I1048; if(file_exists($path)){ require_once $path; }if($oDeclarator->isRegistered('data_import')){ if(!is_object($Core)){ AMI::addResourceMapping( require($GLOBALS['CLASSES_PATH'] .'/60/resourceMapping.php') );$GLOBALS['db'] =new CMS_simpleDb; if(!$GLOBALS[I1049]->connect(DB_Host, DB_User, DB_Password, DB_Database)){ $GLOBALS['sys']['err']['store'] =TRUE; trigger_error('[' .mysql_errno() .I1050 .mysql_error() .'] ', E_USER_ERROR); }AMI::getSingleton(I1049, array('ami_db' => $GLOBALS[I1049])); }$this->TTITTll('data_import / task Id ' .$taskId); $IILI11L =AMI::getResource('data_import/service'); $IILI11L->dispatchAction($taskId); $this->TTITTl1('data_import / task Id ' .$taskId); }}}function process($IILI111 =FALSE, $IILlIII =FALSE){ $IILI11l =@ignore_user_abort(true); foreach ($this->IIll1Il as $handler => $moduleName){ if($moduleName == 'data_import'){ continue; }if($IILI111 !== FALSE){ if($IILlIII !== FALSE){ if($IILlIII != $moduleName){ continue; }}if($IILI111 != $handler){ continue; }}$this->TTITTll($handler); if($moduleName == ''){ list ($className, $methodName) =explode('::', $handler); if(file_exists($GLOBALS['CLASSES_PATH'] .$className .I1051)){ require_once $GLOBALS['CLASSES_PATH'] .$className .I1051; if($moduleName == ''){ $class =new $className; }else{ $_null =null; $class =new $className($_null, $this->db, $module, true); }$class->$methodName($this); }elseif(class_exists($className, FALSE)){ $class =new $className; $class->$methodName(); }elseif( (empty($GLOBALS['sys']['disable_user_scripts']) || defined(I1052) )&& file_exists($GLOBALS[I1047] .I1053 .$className .I1051) ){AMI_Service::addAutoloadPath($GLOBALS[I1047] .I1053); $class =new $className; $class->$methodName($this); }else{ $this->unregisterHandler($handler); }}else{ $this->unregisterHandler($handler); }$this->TTITTl1($handler); }if(sizeof($this->IIll1Il) <1 && $this->IILI1Ll){ if(method_exists($GLOBALS[I1054], 'SetOption')){ $GLOBALS[I1054]->SetOption('background_process', false); }$this->IILI1LL =true; }if($this->IILI1LL){ if(method_exists($GLOBALS[I1054], 'saveOptions')){ $GLOBALS[I1054]->saveOptions(); }}@ignore_user_abort($IILI11l); $this->TTITTl1('CMS_BackgroundProcess'); $this->TTITT1I(); }function registerHandler($handler, $moduleName){ if(!isset($this->IIll1Il[$handler])){ $this->IIll1Il[$handler] =$moduleName; $sql =$this->db->genInsertSQL(I1055, array ('handler' => $handler, I1046 => $moduleName)); $this->db->execute($sql, DBC_NO_HALT); $GLOBALS[I1054]->SetOption('background_process', true); $this->IILI1LL |= !$this->IILI1Ll; $this->TTITTlI(); }}function unregisterHandler($handler){ if(isset($this->IIll1Il[$handler])){ unset($this->IIll1Il[$handler]); $sql ="DELETE FROM `cms_processes` WHERE `handler` = '" .addslashes($handler) ."'"; $this->db->query($sql); if(!sizeof($this->IIll1Il)){ $GLOBALS[I1054]->SetOption(I1056, false); $this->IILI1LL |= $this->IILI1Ll; }}}private function TTITTlI(){ if($this->IILI1LL){ $GLOBALS[I1054]->saveOptions(); }}public function TTITTll($marker){ $this->IILI11I[$marker] =microtime(true); }public function TTITTl1($marker){ if(isset($this->IILI11I[$marker])){ $this->IILI11I[$marker] =number_format(microtime(true) -$this->IILI11I[$marker], 5); }}private function TTITT1T($string){ if($this->IILI1L1){ if( file_exists($this->IILI1L1) && isset($GLOBALS['BACKGROUND_BENCH_LOG_FILE_SIZE']) && ($maxSize =(int)$GLOBALS['BACKGROUND_BENCH_LOG_FILE_SIZE']) >0 ){clearstatcache(); if(@filesize($IILlIIl) >= $maxSize){ $IILlIIL =$this->IILI1L1 .'.bak'; @unlink($IILlIIL); @rename($this->IILI1L1, $IILlIIL); }}file_put_contents($this->IILI1L1, '[' .date(I1057) .I1050 .$GLOBALS['ROOT_PATH_WWW'] .'] [cache=' .$GLOBALS['AMI_REGISTRY']['cacheMode'] .I1050 .$this->_id .I1058 .$string ."\n", FILE_APPEND); @chmod($this->IILI1L1, 0666); }}private function TTITT1I(){ if($this->IILI1L1){ $IILlII1 =''; foreach($this->IILI11I as $marker => $time){ $IILlII1 .= '[' .$marker .' => ' .$time .I1059; }$this->TTITT1T($IILlII1); }}}