<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       16782 xkqwisptwtkmtwwkinkzrkpisprrpwprskiygnunqpsiinrussrtpkkyggkrpmzixlynpnir
 */ ?><?php foreach(array(1433=>'wozNpq|mF|qXmdT',1434=>'SZB',1435=>'WHIIHn|DQttMnPD',1436=>"UnSQfMnQS?tBGQ?Hf?ruJQ```iHSuJQ?*",1437=>"&```iHSuJQ?*",1438=>'WHrQ|IHSuJQ',1439=>'',1440=>'iHSuJQ?nHt?fHunS?*',1441=>'&```',1442=>"iHSuJQ?nHt?fHunS?*",1443=>"vZJuQ",1444=>"ZJJ",1445=>"HGtMHn",1446=>'mm1mmmm',1447=>'MnOQrMtZnWQ',1448=>'IQtOHS',1449=>'|vZJuQ') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class CMS_CoreRules extends CMS_ModuleRules{ const RLR_ANY =0x01; const RLR_USER =0x02; const RLR_MANAGER =0x04; const RLR_ROOT =0xFF; const OPT_CMD_ADD ='ADD'; const OPT_CMD_CHANGE ='CHANGE'; const OPT_CMD_CHANGE_IF_EXIST =I1433; const OPT_CMD_DEL ='DEL'; const VIEW_MODE_ALL =0; const VIEW_MODE_NOVICE =100; const VIEW_MODE_DEFAULT =self::VIEW_MODE_NOVICE; public $IIL1LlL; public $IIL1Ll1; public $cms; public $Core; public $IIL1LLI; public $IIL1LLl; public $IIL1LLL; public $CMDOptions; public $IIL1LL1; private $IIL1L1I; private $IIL1L1l; public $IIL1L1L; function __construct(&$cms){ parent::__construct($cms); $this->IIL1LlL =array(); $this->IIL1Ll1 =0; $this->cms =&$cms; $this->Core =&$cms->Core; $this->coreRules =&$this; $this->IIL1LLI =array(); $this->IIL1LLl =array(); $this->Illl1II= false; $this->IIL1LL1 =array(); $this->CMDOptions =array(); $this->IIL1L1l =false; $this->IIL1L1I =array( RLT_BOOL => -1, RLT_UINT => 10, RLT_SINT => 10, RLT_CHAR => 40, RLT_FLOAT => 10, RLT_TEXT => 40, RLT_EMAIL => 40, RLT_ENUM => -1, RLT_ENUM_MULTI_ARRAY => 3, RLT_ENUM_MULTI_STRING => 3, RLT_SYS_DTIME => 16, RLT_DTIME => 16, RLT_DATE => 10, RLT_TIME => 10, RLT_DATE_PERIOD => -1, RLT_DATE_PERIOD_POSITIVE => -1, RLT_DATE_PERIOD_NEGATIVE => -1, RLT_ITEM_WITH_ENUM => -1, RLT_ENUM_WITH_UINT => 10, RLT_ENUM_WITH_SINT => 10, RLT_ENUM_WITH_FLOAT => 10, RLT_ENUM_WITH_CHAR => 40, RLT_ENUM_WITH_EMAIL => 40, RLT_ENUM_WITH_DATE_PERIOD_POSITIVE => -1, RLT_ENUM_WITH_DATE_PERIOD_NEGATIVE => -1, RLT_LABEL => -1, RLT_SYS_INSTALLED => -1, RLT_ARRAY_OF => -1, RLT_SPLITTER => -1 );$this->_DTimePeriods= array('second', 'minute', 'hour', I1434, 'week', 'month', 'year'); $this->IIL1L1L =array(); $this->TTIIITl('post', I1435, $this, 'systemConfigCB'); }function setCoreObject(&$Core){ $this->Core =&$Core; }function setCurrentOwner($IIL1L11){ $this->Illl1II =$IIL1L11; }function TTIITII(){ return $this->IIL1L1l; }function TTIITIl($cType){ if(!is_int($cType)){ trigger_error(I1436.$this->Name."]..." ,E_USER_WARNING); }if(!is_int($this->IIL1L1I[$cType])){ trigger_error("Undefined control length for ruletype [".$cType.I1437.$this->Name."]..." ,E_USER_WARNING); }return $this->IIL1L1I[$cType]; }function TTIITI1(){ return $this->_DTimePeriods; }function &addModule($IIILLII){ if(!array_key_exists($IIILLII, $this->IIL1LlL)){ $this->IIL1Ll1++; }else{ trigger_error("Rule Module with this name already exists [$IIILLII]...", E_USER_WARNING); }$this->IIL1LlL[$IIILLII] =new CMS_ModuleRules($this->Core->getModule($IIILLII)); $this->IIL1LlL[$IIILLII]->Name =$IIILLII != I1438 ?$IIILLII :I1439; $this->IIL1LlL[$IIILLII]->coreRules =&$this; $this->IIL1LlL[$IIILLII]->cms =&$this->cms; $this->IIL1LlL[$IIILLII]->Rules =$this->Rules; $this->IIL1LlL[$IIILLII]->Illl1Il =$this->Illl1Il; $this->IIL1LlL[$IIILLII]->Illl1I1 =array ();foreach ($this->IIL1LlL[$IIILLII]->Rules as $IIL11II => $IIL11Il) {if (($index =array_search('spec_small', $IIL11Il['groups'])) !== false) {$this->IIL1LlL[$IIILLII]->Illl1I1[] =$IIL11II; }}$this->IIL1LlL[$IIILLII]->Illl1II =$this->Illl1II; $this->IIL1LlL[$IIILLII]->IlllL1I =$this->IlllL1I; if($this->Illl1II!==false){ $this->IIL1LL1[$this->Illl1II][$IIILLII] =&$this->IIL1LlL[$IIILLII]; }return $this->IIL1LlL[$IIILLII]; }function &issetModule($IIILLII){ $res =false; if(array_key_exists($IIILLII, $this->IIL1LlL)){ $res =true; }return $res; }function &getModule($IIILLII){ $res =false; if(array_key_exists($IIILLII, $this->IIL1LlL)){ $vMod =&$this->IIL1LlL[$IIILLII]; if(is_object($vMod)){ $res =&$vMod; }}return $res; }function addRule($IIL11IL, $IIL11I1, $cName, $cType, $aOptions=false, $cDefaultValue=false, $IIL11lI =false, $aGroups =array(), $callback =I1439, $cbAllowedValues =null){ return parent::addRule($IIL11IL, $IIL11I1, $cName, $cType, $aOptions, $cDefaultValue, true, $aGroups); }function TTIITlT($cName, $aValue){ $this->IIL1LLI[$cName] =$aValue; $this->IIL1LLl =array_keys($this->IIL1LLI); return true; }function TTIITlI($cName){ return in_array($cName, $this->IIL1LLl); }function TTIITll($cName){ if(!in_array($cName, $this->IIL1LLl)){ trigger_error("Rules commoon set is not found [".$cName.I1437.$this->Name."]..." ,E_USER_WARNING); }return $this->IIL1LLI[$cName]; }function TTIITl1($IIILLII, $warn =true){ if(!array_key_exists($IIILLII, $this->IIL1LlL)){ if($warn){ trigger_error(I1440 .$IIILLII .I1441, E_USER_WARNING); }return NULL; }return $this->IIL1LlL[$IIILLII]->Rules; }function &getModulesList(){ $res =&$this->IIL1LlL; return $res; }function &TTIIT1T($IIL11ll){ $res =&$this->IIL1LL1[$IIL11ll]; return $res; }function getOwnersList(){ return array_keys($this->IIL1LL1); }function TTIIT1I($IIILLII){ if(!array_key_exists($IIILLII, $this->IIL1LlL)){ trigger_error(I1442.$IIILLII."]...", E_USER_WARNING); }else{ unset($this->IIL1LlL[$IIILLII]); }return true; }function TTIIT1l(){ $this->IIL1LlL =array(); return true; }function AddModOptionCMD($IIILLII, $IIL11lL, $cName, $cValue="", $flags =0){ $this->CMDOptions[$IIILLII][] =array("CMD"=>$IIL11lL, "option"=>$cName, I1443=>$cValue, $flags); return true; }function ApplyModOptionCMD($IIL11l1 =false){ $res =true; if(count($this->CMDOptions)>0){ $IILllLl =array_keys($this->CMDOptions); $IIL11LI =&$this->Core->GetAllModules(); foreach($this->CMDOptions as $vModName=>$IIL11Ll){ $IIL11LL =($vModName == "core"); if($IIL11LL) {$IIL11L1 =Array(); $this->Core->ReadCoreOptions($IIL11L1, "front", "all"); $IIII11I =Array(); $this->Core->ReadCoreOptions($IIII11I, "all", I1444); }else {$this->Core->TTllT1l(Array($vModName)); }if($IIL11LL || array_key_exists($vModName, $IIL11LI)){ $this->TTIIITI('pred', $vModName, $IIL11LI, $IIL11Ll); $IIL111I =false; foreach($IIL11Ll as $vData){ $IIL111I |= (!$IIL11l1 && $this->TTIIITT($vModName, $IIL11LL, $vData)); switch($vData["CMD"]){ case self::OPT_CMD_ADD: if($IIL11LL) {$this->Core->Options->TTlTI1T($this->Core->Name, $vData["option"], $vData[I1443]); }else {$IIL11LI[$vModName]->Options->TTlTI1T($vModName, $vData["option"], $vData[I1443]); }break; case self::OPT_CMD_CHANGE: if($IIL11LL) {$this->Core->Options->TTlTI1T($this->Core->Name, $vData[I1445], $vData[I1443]); }else {$IIL11LI[$vModName]->Options->TTlTI1T($vModName, $vData[I1445], $vData[I1443]); }break; case self::OPT_CMD_CHANGE_IF_EXIST: if($IIL11LL) {if($this->Core->issetOption($vData[I1445])) {$this->Core->Options->TTlTI1T($this->Core->Name, $vData[I1445], $vData[I1443]); }}else {if($IIL11LI[$vModName]->issetOption($vData[I1445])) {$IIL11LI[$vModName]->Options->TTlTI1T($vModName, $vData[I1445], $vData[I1443]); }}break; case self::OPT_CMD_DEL: if($IIL11LL) {$this->Core->Options->TTlTI1T($this->Core->Name, $vData[I1445]); }else {$IIL11LI[$vModName]->Options->TTlTI1T($vModName, $vData[I1445]); }break; }}if ($IIL111I) {$this->Core->SaveOptions('srv_options'); }$this->TTIIITI('post', $vModName, $IIL11LI, $IIL11Ll); if(!$IIL11l1) {$this->Core->TTlI11T(); }if($IIL11LL) {$IIL111l =Array(); $res =$this->Core->SaveCoreOptions("front", false, $IIL111l, $IIL11L1); unset($IIL111l); $IIL111L =Array(); if(!empty($GLOBALS['IIL1111'])){ $GLOBALS[I1446] =TRUE; }$res =$this->Core->SaveCoreOptions(I1444, false, $IIL111L, $IIII11I); unset( $IIL111L, $GLOBALS['IIL1111'], $GLOBALS[I1446] );}else {$res =$this->Core->SaveOptions($vModName); }}}}return $res; }function TTIIT11($II1IIIl){ }function TTIIITT($vModName, $IIL11LL, $vData){ if(!RUN_UPDATE){ return false; }$moduleName =$IIL11LL ?I1438 :$vModName; $res =false; if(isset($this->Core->IlLIIlL[$moduleName][$vData['option']])){ unset($this->Core->IlLIIlL[$moduleName][$vData['option']]); $this->Core->SetModOption('srv_options', I1447, $this->Core->IlLIIlL); $res =true; }return $res; }function TTIIITI($II1IIIL, $vModName, &$IIL11LI, &$IIL11Ll){ if(!isset($this->IIL1L1L[$II1IIIL][$vModName])){ return; }foreach($this->IIL1L1L[$II1IIIL][$vModName] as $aCallback){ if(is_object($aCallback['object'])){ if(method_exists($aCallback['object'], $aCallback['method'])){ $aCallback['object']->$aCallback[I1448]($IIL11LI, $IIL11Ll); }else{ trigger_error( 'Undefined method ' .get_class($aCallback['object']) .'::' .$aCallback[I1448] .' is used as ApplyModOptionCMD callback', E_USER_WARNING );}}else{ if(function_exists($aCallback[I1448])){ $aCallback[I1448]($IIL11LI, $IIL11Ll); }else{ trigger_error('Undefined function ' .$aCallback[I1448] .' is used as ApplyModOptionCMD callback', E_USER_WARNING); }}}}function TTIIITl($II1IIIL, $II1III1, &$object, $II1IIlI){ $this->IIL1L1L[$II1IIIL][$II1III1][] =array('object' => $object, I1448 => $II1IIlI); }public function systemConfigCB(&$IIL11LI, &$IIL11Ll){ $II1IIll =array ();for($i =1 ;$i <= 5 ;$i++){ $ip =$IIL11LI[I1435]->GetOption('debug_ip' .$i); $value =$IIL11LI[I1435]->GetOption('debug_ip' .$i .I1449); if(!empty($ip) && !empty($value)){ $II1IIll[$ip] =implode(',', $value); }}$IIL11LI[I1435]->SetOption('debug_ips', $II1IIll); }}