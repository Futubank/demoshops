<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       16314 xkqwtknwgsmmmxnrxuirssgwlupunkzsrwpkgtqikqspmywguzimkxxsylnylykyxsmwpnir
 */ ?><?php foreach(array(1450=>"Ryw|YZDQ|WurrQnWB",1451=>":wurrQnWBsZB",1452=>"",1453=>"GQrQHS|tMIQDtZIG",1454=>'tMIQDtZIG',1455=>"1",1456=>"WurrQnWB",1457=>"WurrQnWB|GQrWQnt",1458=>"nQxt|nQC|ZttQIGt",1459=>'fZuJt|ZttQIGtD',1460=>"WHSQ",1461=>"QrrHr|WHSQ",1462=>'WHSQ',1463=>'ZIHunt',1464=>"MS",1465=>"QxWOZnPQ",1466=>"DuWWQDD") as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} include 'CMS_Socket.php'; class CMS_CurrencyImport_RBC {public $module; public $baseCurrency; function CMS_CurrencyImport_RBC($cModule) {$this->module =$cModule; }function Init($aCurrencies) {$driverUrl =$this->module->GetProperty("RBC_currency_driver"); $this->baseCurrency =$this->module->GetProperty(I1450); $aUrls =Array(); foreach ($aCurrencies as $key => $value) {$II1IIlL =$value['code_digit']; $aSearch =Array("%CurrencyCode", "%CurrencyYear", "%CurrencyMonth", I1451); $aReplace =Array($II1IIlL, date("Y"), date("m"), date("d")); $aUrls[] =str_replace($aSearch, $aReplace, $driverUrl); }return $aUrls; }function Parse($data) {$data =str_replace("\n", I1452, $data); list($tmp, $value) =explode("\t", $data); return $value; }}class CMS_CurrencyImport {public $cms; public $db; public $module; public $oEshop; public $II1IIl1; public $II1IILI; public $data; public $II1IILl; public $aUrls; public $aData; public $driver; public $driverName; public $aCurrencies; public $force; public $II1IILL; public $II1IIL1; public $II1II1I; public $aDrivers; public $II1II1l; public $II1II1L; function CMS_CurrencyImport(&$cms, &$oEshop) {$this->cms =$cms; $this->db =new DB_si; $this->module =&$oEshop->ILlLLL1; $this->oEshop =&$oEshop; $this->II1IILl =$this->module->GetTableName(); $this->II1II1I =20; $this->II1II1I =$this->module->GetProperty("currency_socket_timeout"); $this->II1II1l =0; $this->II1II1L =new CMS_Socket(); }function Init(&$aCurrencies, $force) {$this->aCurrencies =$aCurrencies; $this->force =$force; $aData =Array(); $II1II11 =array("success" => I1452, "timestamp" => 0, I1453 => 0, "faults" => 0, "type" => I1452); if($this->module->IssetOption("_currency_last_get_timestamp")){ $II1IlII =$this->module->GetOption("_currency_last_get_timestamp"); if(isset($II1IlII[$this->cms->lang])){ $II1II11 =$II1IlII[$this->cms->lang]; }}$timestamp =$II1II11[I1454]; $II1IlIl =strtotime($this->module->GetOption("currency_update_period")) -time(); if (($II1IlIl) >0) {$II1IlIL =true; }else {$II1IlIL =false; }$faults =0; $II1IlI1 =$this->module->GetOption("currency_update_max_attempts"); $source =$this->module->GetOption("currency_driver"); if ($this->force === 0) {foreach ($this->aCurrencies as $currency => $data) {if ($II1IlIL == true) {if ($data['is_base'] == I1455) {$this->II1IILL =$data['exchange']; $this->II1IIL1 =$data['id']; }if (($data['fault_attempts'] <$II1IlI1) && ($data['fault_attempts'] >0)) {$aData[$source][$currency] =array_merge($data, Array(I1456 => $currency)); }}else {if ($data['fault_attempts'] <$II1IlI1) {$aData[$source][$currency] =array_merge($data, Array(I1456 => $currency)); }}}}else {foreach ($this->aCurrencies as $currency => $data) {if (($data['fault_attempts'] <$II1IlI1)) {$aData[$source][$currency] =array_merge($data, Array(I1456 => $currency)); if ($data['is_base'] == 1) {$this->II1IIL1 =$data['id']; }}}}$this->aData =$aData; $this->aDrivers =Array(); $this->aUrls =Array(); }function Update($II1IllI) {$II1II11 =I1452; $II1Illl =$this->module->GetOption(I1457); $II1IllL =array(); $II1II11 =array("success" => I1452, "timestamp" => 0, I1453 => 0, "faults" => 0, "type" => I1452); if($this->module->IssetOption("_currency_last_get_timestamp")){ $II1IllL =$this->module->GetOption("_currency_last_get_timestamp"); if(isset($II1IllL[$this->cms->lang])){ $II1II11 =$II1IllL[$this->cms->lang]; }}$aData =$II1II11['value']; $success =$II1II11['success']; $II1Ill1 =$II1II11["type"]; if($II1Ill1 == I1458) {$II1IlLI =intval($II1II11['faults']); $II1IlLl =$II1II11['pereod_timestamp']; }else {$II1IlLI =0; $II1IlLl =time(); }$timestamp =$II1II11[I1454]; $faults =0; $II1IlI1 =$this->module->GetOption("currency_update_max_attempts"); $II1IILL =0; $II1IlLL =0; $aResult =Array(); $II1IlL1 =array(); foreach ($this->aData as $source => $data) {$driverName ="CMS_CurrencyImport_".$source; $this->driverName =$driverName; if (class_exists($driverName)) {$this->driver =new $this->driverName($this->module); $this->aUrls =$this->driver->Init($data); reset($data); for ($i =0; $i <count($this->aUrls); $i++) {set_time_limit(0); $aTmp =each($data); $II1Il1I =0; if (!(($this->driver->baseCurrency === $aTmp[0]) && ($this->oEshop->baseCurrency === $aTmp[0])) && ($this->driver->baseCurrency !== $aTmp[0])) {$II1Il1l =0; $reply =$this->II1II1L->Get($this->aUrls[$i]); if ($this->II1II1L->error === 0) {$II1Il1l =1; }$amount =$this->driver->Parse($reply); if ($II1Il1l === 0) {$this->aCurrencies[$aTmp[0]][I1459] =$this->aCurrencies[$aTmp[0]][I1459] +1; $II1IlL1 =array_merge((array)$II1IlL1, array($aTmp[0] => $this->aCurrencies[$aTmp[0]][I1459])); }else {$this->aCurrencies[$aTmp[0]][I1459] =0; }if ($this->oEshop->baseCurrency == $aTmp[0]) {if ($aTmp[1]['id'] == $this->II1IIL1) {$this->II1IILL =$amount; $II1Il1L =$aTmp[1]['code_digit']; $II1IILL =$amount; }}$result =Array("id" => $aTmp[1]['id'], I1460=>$aTmp[0], "code_digit" => $this->aCurrencies[$aTmp[0]]['code_digit'], "fault_attempts" => $this->aCurrencies[$aTmp[0]][I1459], "flag"=>1, I1461 => $II1Il1I, "amount"=>$amount, "success"=>$II1Il1l); $aResult[] =$result; }else {if (($this->driver->baseCurrency != $aTmp[0]) || ($this->II1IIL1 == $aTmp[1]['id'])) {$II1IILL =1; $II1IIL1 =$aTmp[1]['id']; $this->II1IILL =1; $II1Il11 =$aTmp[1][I1462]; $II1Il1L =$aTmp[1]['code_digit']; }else {$II1IlLL =$aTmp[1]['id']; }}}}}if($II1Il11 != $this->oEshop->baseCurrency){ $II1IILL += ($II1IILL *$II1Illl /100); }if ($II1IILL >0) {for ($i =0; $i <count($aResult); $i++) {if (1 || $aResult[$i]['id'] != $this->II1IIL1) {$aResult[$i]['_amount'] =$aResult[$i][I1463]; $II1ILII =(($aResult[$i][I1463]) /100)* $II1Illl; if ($aResult[$i][I1463] <1) {$II1ILII =-$II1ILII; }$aResult[$i][I1463] += $II1ILII; }if ($aResult[$i][I1463] == 0) {$aResult[$i]['exchange'] =0; $aResult[$i]['success'] =0; }else {if ($this->driver->baseCurrency !== $this->oEshop->baseCurrency) {$aResult[$i]['exchange'] =$II1IILL /$aResult[$i][I1463]; }else {$aResult[$i]['exchange'] =1/$aResult[$i][I1463]; }}}}else {unset($aResult); }if (($this->driver->baseCurrency !== $this->oEshop->baseCurrency) && ($II1IILL >0)) {$result =Array(I1464 => $II1IlLL, I1460=>$this->driver->baseCurrency, "fault_attempts"=>0, "flag"=>1, "amount"=>$amount, "success"=>$II1Il1l, I1465=> $II1IILL );$aResult[] =$result; }if (sizeof($II1IlL1) === 0) {$success =1; }else {$success =0; if(!$II1IllI) {$II1IlLI++; }}if($success || $II1IlLI >= $this->module->GetOption["update_max_attempts"]) {$this->II1II1l =strtotime($this->module->GetOption("currency_update_period")); $type ="next_new_pereod"; }else {$this->II1II1l =strtotime($this->module->GetOption("currency_fault_update_period")); $type =I1458; }$aData =Array(I1466 => $success, "timestamp" => time(), I1453 => $II1IlLl, "faults" => $II1IlLI, "type" => $type); $II1IllL[$this->cms->lang] =$aData; $this->cms->Core->TTllT1l(array($this->module->GetName())); $this->module->SetOption("_currency_last_get_timestamp", $II1IllL); $this->cms->Core->SaveOptions($this->module->GetName()); return $aResult; }}