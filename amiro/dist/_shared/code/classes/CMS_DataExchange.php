<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    core 
 * @version    $Id$ 
 * @size       25182 xkqwwlrgknikntwqrtggzqpupmkrtwqlrmxskwngkwlqttytguqisiiqxkgrqypyzrgrpnir
 */ ?><?php foreach(array(1467=>'ZWtMHn',1468=>'QxGHrt|SrMvQr',1469=>"MIGHrt",1470=>'JMnQ',1471=>"MS",1472=>"WJZDD?nHt?fHunS",1473=>"nZIQ",1474=>"SrMvQr|nZIQ",1475=>"vZJuQ",1476=>"QxGHrt|rQWMGMQnt",1477=>"QxGHrt|fMJQnZIQ",1478=>"|IQDDZPQ|nuIYQr",1479=>"WZJJYZWKD",1480=>"DtZtuD|",1481=>"",1482=>"MnfH",1483=>'',1484=>'fMJQnZIQ') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class CMS_DataExchange {public $cms; public $II1ILIl; public $_activeDriverName; public $II1ILIL; public $module; public $II1ILI1; public $II1ILlI; public $II1ILll =0; public $II1ILlL =array( 10001, 10002, 10003, 10010, 10011, 10013, 10014, );public $II1ILl1 =false; function CMS_DataExchange(&$cms, &$module) {$this->cms =&$cms; $this->module =&$module; $this->II1ILIl =$this->module->module->TTlTTTI("allowed_exchange_drivers"); if (!empty($cms->Vars['exchange_type']) && !empty($cms->Vars[I1467]) && $cms->Vars[I1467] == 'run' && (!empty($cms->Vars['import_driver']) || !empty($cms->Vars['export_driver']) )){$driver =empty($cms->Vars['import_driver']) ?$cms->Vars[I1468] :$cms->Vars['import_driver']; if (in_array($driver, $this->II1ILIl)) {$this->II1ILIl =array ($driver); }}foreach($this->II1ILIl as $drvName) {require_once $GLOBALS['CLASSES_PATH'] .$drvName .'.php'; }$this->_activeDriverName =""; $this->II1ILI1 =Array(); $this->II1ILlI =Array(); $this->II1ILIL =null; }function GetImportDriversList() {return $this->TTIII1l(I1469); }function TTIIIT1() {return $this->TTIII1l("export"); }function TTIIIIT($driverName, $aRecipients, $II1ILLI =array()) {return $this->II1ILlI[$driverName]->TTIIlTI($aRecipients, $II1ILLI); }function TTIIIII($driverName, &$aFormData) {return $this->II1ILlI[$driverName]->GetForm(I1469, $aFormData); }function TTIIIIl($driverName, &$aFormData) {return $this->II1ILlI[$driverName]->GetForm("export", $aFormData); }function TTIIII1($II1ILLl) {if(in_array($II1ILLl, $this->II1ILIl)) {$this->_activeDriverName =$II1ILLl; }}function Import(&$aParams) {$res =false; if($this->TTIIlTT(I1469)) {if($this->II1ILIL->Start(I1469, $aParams)) {$res =true; }else {$this->module->SetLastError(10100, $this->II1ILIL->TTIIlTl()); foreach($this->II1ILIL->_err as $err){ if(in_array($err['code'], $this->II1ILlL)){ if(isset($err['info'][I1470])){ $this->II1ILll =$err['info'][I1470]; }$this->II1ILl1 =true; }}}}return $res; }function TTIIIlT($II1ILLL, &$aParams) {$this->II1ILIL->TTIIIlT($II1ILLL, $aParams); return true; }function Export(&$aParams) {$res =false; if($this->TTIIlTT("export")) {if ($this->II1ILIL->Start("export", $aParams)) {$res =true; }else {$this->module->SetLastError(10100, $this->II1ILIL->TTIIlTl()); }}return $res; }function TTIIIlI() {$res =$this->II1ILIL->TTIIIlI(); if(!$res) {$this->module->SetLastError(10100, $this->II1ILIL->TTIIlTl()); }return $res; }function TTIIIll() {return $this->II1ILIL->End("export"); }function TTIIIl1($II1ILL1, &$II1IL1I, $II1IL1l, $II1IL1L) {return $this->II1ILIL->TTIIIl1($II1ILL1, $II1IL1I, $II1IL1l, $II1IL1L); }function TTIII1T($module, $id, $II1IL11 =I1471) {return $this->II1ILIL->TTIII1T($module, $id, $II1IL11); }function TTIII1I() {return $this->II1ILIL->GetInfo(); }function TTIII1l($type) {$aList =Array(); $this->TTIII11(); for($i=0; $i<sizeof($this->II1ILI1); $i++) {if(in_array($type, $this->II1ILI1[$i]["supported_actions"])) {$aList[] =$this->II1ILI1[$i]; }}return $aList; }function TTIII11() {if(sizeof($this->II1ILI1) == 0) {foreach($this->II1ILIl as $i => $II1I1II) {$this->II1ILlI[$II1I1II] =new $this->II1ILIl[$i]($this->cms->Gui, $this->module); $this->II1ILlI[$II1I1II]->Init("get_info"); $this->II1ILI1[] =$this->II1ILlI[$II1I1II]->GetInfo(); $this->II1ILlI[$II1I1II]->SetLang($this->langData); }}}function TTIIlTT($actionType) {$res =false; if(in_array($this->_activeDriverName, $this->II1ILIl) && class_exists($this->_activeDriverName)) {$this->II1ILIL =new $this->_activeDriverName($this->cms->Gui, $this->module); $aInfo =$this->II1ILIL->GetInfo(); $this->II1ILIL->SetLang($this->langData); if(in_array($actionType, $aInfo["supported_actions"])) {if($this->II1ILIL->Init($actionType)) {$res =true; }else {$this->module->SetLastError(10100, $this->II1ILIL->TTIIlTl()); }}else {$this->module->SetLastError(10002, "not supported action"); }}else {$this->module->SetLastError(10001, I1472); }return $res; }}class ExchangeDriver {public $gui; public $words; public $name; public $module; public $II1I1Il; public $_err; public $II1I1IL; public $II1I1I1; public $II1I1lI; public $II1I1ll; public $II1I1lL; public $langData; public $II1I1l1; function ExchangeDriver(&$gui, &$module) {$this->gui =&$gui; $this->module =&$module; $this->name ="ExchangeDriver"; $this->_err =Array(); $this->II1I1IL =null; $this->II1I1I1 =Array(); $this->II1I1lI =""; $this->II1I1Il =time(); $this->II1I1ll =0; $this->II1I1lL =""; $this->II1I1l1 =Array(); require $GLOBALS['CLASSES_PATH'] .'CMS_DataExchange_UTF8TOWIN.php'; }function Init($type) {$this->words =$this->gui->ParseLangFile("templates/ExchangeDrivers/lang/".$this->name.".lng"); $this->gui->addBlock($this->name, "templates/ExchangeDrivers/".$this->name.".tpl"); $fname ="_local/_admin/templates/ExchangeDrivers/".$this->name.".tpl"; if($this->gui->isValidFile($fname)) {$this->gui->mergeBlock($this->name, $fname); }$aEvent =array( 'driverName' => $this->name, 'oDriver' => $this );AMI_Event::fire('on_dataexchange_driver_init', $aEvent, AMI_Event::MOD_ANY); return true; }function GetInfo() {$aInfo =Array( I1473=>"", "title"=>"", "supported_actions"=>Array() );return $aInfo; }function GetForm($type, &$formData) {$formData[I1474] =$this->name; $formData["driver_type"] =$type; return ""; }function TTIIlTI($aRecipients, $II1ILLI =array()){ $IIIIl11 =Array(); $aParams =Array(); $optName ="_".$this->name; if(!is_array($aRecipients)) {$aRecipients =Array($aRecipients); }foreach($aRecipients as $recipient) {if($this->module->cms->Core->ReadOption($IIIIl11, $this->module->moduleName, $recipient.$optName."_message_number")) {$II1I1ll =$IIIIl11[I1475] +1; }else {$II1I1ll =1; }$aParams["file_name"][$recipient] =$this->gui->getAbsDefPostf($this->name.":export_filename", "_".$recipient, Array("message_number"=>$II1I1ll, I1476=>$recipient)); $aParams["mail_subject"][$recipient] =$this->gui->getAbsDefPostf($this->name.":export_email_subject", "_".$recipient, Array("message_number"=>$II1I1ll, I1476=>$recipient, I1477 => (isset($II1ILLI['export_save_filename']) ?$II1ILLI['export_save_filename'] :"yandex_export.xml"))); }return $aParams; }function TTIIIlI() {$IIIIl11 =Array(); $optName =$this->II1I1lL."_".$this->name.I1478; $res =$this->module->cms->Core->WriteOption($this->module->moduleName, $optName, $this->II1I1ll); if(!$res) {$this->TTIIlT1("2001", "update_message_number_error"); }return $res; }function Start($actionType, &$aParams) {$this->II1I1lI =$actionType; $this->II1I1IL =&$aParams["callbacks"]["object"]; $this->II1I1I1 =$aParams[I1479]; if($actionType ="export") {$this->II1I1lL =$aParams["vars"][I1476]; $IIIIl11 =Array(); $optName =$this->II1I1lL."_".$this->name.I1478; if($this->module->cms->Core->ReadOption($IIIIl11, $this->module->moduleName, $optName)) {$this->II1I1ll =$IIIIl11[I1475] +1; }else {$this->II1I1ll =1; }}return true; }function End($actionType) {return ""; }function TTIIlTl() {$last =sizeof($this->_err) -1; $text =$this->words[I1480.$this->_err[$last]["text"]]; if(is_array($this->_err[$last]["info"])) {$text =$this->gui->ParseText($text, $this->_err[$last]["info"]); }elseif($this->_err[$last]["info"] != I1481) {$text =$this->gui->ParseText($text, Array("info"=>$this->_err[$last]["info"])); }return $text; }function TTIIlT1($errCode, $text, $info =I1481) {$this->_err[] =Array("code"=>$errCode, "text"=>$text, I1482=>$info); }function TTIIlIT($aParams) {$res =true; if($this->TTIIlI1("init_".$this->II1I1lI)) {$res =$this->II1I1IL->{$this->II1I1I1["init_".$this->II1I1lI]}($aParams); }return $res; }function TTIIlII($aParams) {$res =true; if($this->TTIIlI1("final_".$this->II1I1lI)) {$res =$this->II1I1IL->{$this->II1I1I1["final_".$this->II1I1lI]}($aParams); }return $res; }function TTIIlIl($II1I1LI, $maxValue) {$this->module->TTII1Tl($II1I1LI, $maxValue); }function TTIIlI1($IILlLLI) {$res =false; $obj =&$this->II1I1IL; $method =$this->II1I1I1[$IILlLLI]; if(is_object($obj)) {if(method_exists($obj, $method)) {$res =true; }}return $res; }function TTIII1T($module, $id, $II1IL11 =I1471) {$res =$id; return $res; }function TTIIIl1($II1ILL1, $II1IL1I, $II1IL1l, $II1IL1L) {return I1481; }function KeepItemCatId() {return false; }function SetLang($cLang) {$this->langData =$cLang; }function EncodeStubCB($str) {return $str; }function EncodeToWinMbCB($str) {return $str; }function EncodePhpCB($II1I1Ll) {return $II1I1Ll; }function EncodeToUtfMbCB($str) {return $str; }function EncodeToUtfPhpCB($II1I1LL) {return $II1I1Ll; }function TTIIllT($row) {$res =false; if (is_array($row)) {foreach (array_keys($row) as $k) {if ($row[$k] !== I1483 && !is_null($row[$k])) {$res =true; break; }}}return $res; }function TTIIllI(){ $II1I1L1 =I1481; $II1I11I =mb_strtoupper(md5(uniqid(rand(), true))); $II1I11l =chr(45); $II1I1L1 =mb_substr($II1I11I, 0, 8).$II1I11l.mb_substr($II1I11I, 8, 4).$II1I11l.mb_substr($II1I11I,12, 4).$II1I11l.mb_substr($II1I11I,16, 4).$II1I11l.mb_substr($II1I11I,20,12); return mb_strtolower($II1I1L1); }function TTIIlll($resource, $aData =array()){ if(!$resource || !is_array($aData) || !sizeof($aData)){ return false; }$II1I11L =array(); $oEshop =AMI::getResourceModel($resource); $II1I111 =$oEshop->getFieldsRemap(); foreach($aData as $fieldName){ if(isset($II1I111[$fieldName])){ $II1I11L[$fieldName] =$II1I111[$fieldName]; }else{ $II1I11L[$fieldName] =$fieldName; }}return $II1I11L; }protected function TTIIll1($url){ $name =basename($url); $aURL =parse_url($url); if(is_array($aURL)){ $data =isset($aURL['query']) ?$aURL['query'] :I1483; if(isset($aURL['path'])){ $path =dirname($aURL['path']); if(mb_strlen($path) >1){ $data .= mb_substr($path, 1); }}if(I1483 !== $data){ $hash =mb_substr(md5($data), 5, 8); $aPath =pathinfo($name); $name =(I1483 !== $aPath[I1484] ?$aPath[I1484] .'-' :I1483) .$hash .(isset($aPath['extension']) ?'.' .$aPath['extension'] :I1483); }}return $name; }}