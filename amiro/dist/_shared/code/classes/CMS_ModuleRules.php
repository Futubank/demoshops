<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       51351 xkqwuqgswgpnqksqsnyqmwrpmwxqmtrltuquxpzpnmipziknsiptpinzxysnxpspripppnir
 */ ?><?php foreach(array(2127=>'Rjw|wzjjyzwk',2128=>'RjT|FjhzT',2129=>'RjT|szTq|gqRmhs',2130=>'RjT|qNUi|cmTo|dmNT',2131=>'RjT|dbd|mNdTzjjqs',2132=>'',2133=>"unKnHCn",2134=>"PQtZJJvZJuQD",2135=>"&```?iHSuJQ?*",2136=>'~IHSuJQ~ruJQD',2137=>'Qxt|rDD|ruJQD',2138=>'DuYtBGQ',2139=>'DKMGhtOQriHSuJQD',2140=>'DMnPJQiHSuJQ',2141=>"fJt|WHntZMnQr|nZIQ",2142=>"fJt|DGQW|YJHWK",2143=>"dGQWyJHWKNuI",2144=>"hGtMHnDiHSuJQNZIQ",2145=>"fJt|IHSuJQ|nZIQ",2146=>"fJt|JZBHut|YJHWK",2147=>"fJt|IHSuJQ",2148=>'DtBJQ|WJZDD',2149=>"nZIQ",2150=>'nZIQ',2151=>"ruJQ",2152=>"&```iHSuJQ?*",2153=>'WYzJJHCQSVZJuQD',2154=>"WZJJYZWK",2155=>"SQfZuJt|vZJuQ",2156=>"tBGQ",2157=>'?',2158=>"SZtZ|vZJuQ",2159=>"vZJuQ",2160=>"QnuI|SZtZ",2161=>"fZJDQ",2162=>"IMn",2163=>"IZx",2164=>"&",2165=>"QnuI",2166=>"MtQID|tBGQ",2167=>'vZJuQ',2168=>"_",2169=>"QnuI|SZtZ|",2170=>"MtQID|vZJuQD",2171=>"ZJJ",2172=>"PQtRuJQ%?iHSuJQ?MD?nHt?fMnMDOQS```*",2173=>"JQnPtO|IMn",2174=>"rQDuJt|tBGQ",2175=>"GQrMHS",2176=>"nuI",2177=>"&!?vZJuQ=*",2178=>"ZJJHC|QIGtB",2179=>"QnuI|HnJB",2180=>"MnGut",2181=>'~*^!\n?&~D') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} define('RLC_NONE', -1); define('RLC_EMPTY', -222222); define(I2127, -333333); define('RLT_BOOL', 10); define('RLT_UINT', 20); define('RLT_SINT', 25); define('RLT_CHAR', 30); define(I2128, 40); define('RLT_TEXT', 45); define('RLT_EMAIL', 50); define('RLT_ENUM', 60); define('RLT_ENUM_MULTI_ARRAY', 70); define('RLT_ENUM_MULTI_STRING', 80); define('RLT_SYS_DTIME', 90); define('RLT_DTIME', 100); define('RLT_DATE', 110); define('RLT_TIME', 120); define(I2129, 130); define('RLT_DATE_PERIOD_POSITIVE', 140); define('RLT_DATE_PERIOD_NEGATIVE', 150); define('RLT_ITEM_WITH_ENUM', 160); define('RLT_ENUM_WITH_UINT', 200); define(I2130, 210); define('RLT_ENUM_WITH_FLOAT', 220); define('RLT_ENUM_WITH_CHAR', 230); define('RLT_ENUM_WITH_EMAIL', 240); define('RLT_ENUM_WITH_DATE_PERIOD_POSITIVE', 250); define('RLT_ENUM_WITH_DATE_PERIOD_NEGATIVE', 260); define('RLT_LABEL', 300); define(I2131, 1000); define('RLT_ARRAY_OF', 10010); define('RLT_SPLITTER', 20010); class CMS_ModuleRules extends CMS_Module{ const RLC_NONE =-1; const RLC_EMPTY =-222222; const RLC_CALLBACK =-333333; const RLT_BOOL =10; const RLT_UINT =20; const RLT_SINT =20; const RLT_CHAR =30; const RLT_FLOAT =40; const RLT_TEXT =45; const RLT_EMAIL =50; const RLT_ENUM =60; const RLT_ENUM_MULTI_ARRAY =70; const RLT_ENUM_MULTI_STRING =80; const RLT_SYS_DTIME =90; const RLT_DTIME =100; const RLT_DATE =110; const RLT_TIME =120; const RLT_DATE_PERIOD =130; const RLT_DATE_PERIOD_POSITIVE =140; const RLT_DATE_PERIOD_NEGATIVE =150; const RLT_ITEM_WITH_ENUM =160; const RLT_ENUM_WITH_UINT =200; const RLT_ENUM_WITH_SINT =210; const RLT_ENUM_WITH_FLOAT =220; const RLT_ENUM_WITH_CHAR =230; const RLT_ENUM_WITH_EMAIL =240; const RLT_ENUM_WITH_DATE_PERIOD_POSITIVE =250; const RLT_ENUM_WITH_DATE_PERIOD_NEGATIVE =260; const RLT_LABEL =300; const RLT_SYS_INSTALLED =1000; const RLT_ARRAY_OF =10010; const RLT_SPLITTER =20010; const PRESERVE_CAPTIONS =0x01; public $cms; public $Rules; public $Captions; public $SpecialCaptions; public $IlllLL1; public $IlllL1I; public $IlllL1l; public $optionsData; public $IlllL1L; public $IlllL11; protected $Illl1II; protected $Illl1Il; protected $Illl1IL; protected $Illl1I1; protected $Illl1lI =array(); private $finished; private $Module; private $Illl1ll; function __construct(&$Module){ $this->cms =false; $this->coreRules =false; $this->Module =&$Module; $this->Rules =array(); $this->Captions =array(); $this->SpecialCaptions =array(); $this->IlllLL1 ='templates/lang/options/'; $this->finished =false; $this->Illl1Il =array(); $this->IlllL1l =I2132; $this->optionsData =array(); $this->IlllL11 =I2132; }function finishModule(){ if(!empty($this->IlllL1l)){ unset($this->Rules[$this->IlllL1l]); }$res =true; $this->TTlTTlI(); if (isset($this->Rules['spl_specblock']) && sizeof($this->Illl1I1)) {$Illl1lL =array ();foreach ($this->Illl1I1 as $IIL11II) {if (isset($this->Rules[$IIL11II])) {$Illl1lL[$IIL11II] =$this->Rules[$IIL11II]; unset($this->Rules[$IIL11II]); }}$rules =array ();$Illl1l1 =false; foreach ($this->Rules as $key => $value) {if ($Illl1l1) {foreach ($Illl1lL as $Illl1LI => $Illl1Ll) {$rules[$Illl1LI] =$Illl1Ll; }}$Illl1l1 =$key == 'spl_specblock'; $rules[$key] =$value; }$this->Rules =$rules; }foreach($this->Rules as $vName=>$Illl1LL){ $this->Rules[$vName] =$this->TTlTT1T($this->Rules[$vName]); }foreach($this->Illl1lI as $resId => $oModuleRules){ $oModuleRules->cleanup(); }$this->finished =$res; return $res; }function TTlTTT1(){ $this->Rules =array(); return true; }function TTlTTIT($options =0){ if($options &self::PRESERVE_CAPTIONS){ $this->Illl1ll =$this->Captions; }$this->TTlTTT1(); $Illl1L1 =$this->Illl1Il; $this->Illl1Il =array(); foreach($Illl1L1 as $Illl11I=>$Illl1LL){ $this->addRule($Illl1LL[0], $Illl1LL[9], $Illl1LL[1], $Illl1LL[2], $Illl1LL[3], $Illl1LL[4], $Illl1LL[5], $Illl1LL[6], $Illl1LL[7], $Illl1LL[8]); }$this->finishModule(); if($options &self::PRESERVE_CAPTIONS){ $this->Captions =$this->Illl1ll; $this->Illl1ll =NULL; }return true; }function TTlTTII($Illl11l){ $this->Captions =$this->cms->Gui->ParseLangFile($this->IlllLL1.$Illl11l); return true; }public function addCaptions($file, $Illl11L =FALSE){ $var =$Illl11L ?'SpecialCaptions' :'Captions'; $this->$var =$this->cms->Gui->ParseLangFile($file) +$this->$var; }function TTlTTIl($Illl11l){ if (is_string($Illl11l)) {$this->SpecialCaptions =$this->cms->Gui->ParseLangFile($this->IlllLL1.$Illl11l); return true; }$this->SpecialCaptions =array ();foreach ($Illl11l as $fullPath) {$this->SpecialCaptions =array_merge($this->SpecialCaptions, $this->cms->Gui->ParseLangFile($fullPath)); }}function getCaption($cName, $Illl111=true){ $res =I2133; if(isset($this->Captions[$cName])){ $res =$this->Captions[$cName]; }elseif ($Illl111){ $res =$this->coreRules->getCaption($cName, false); }return $res; }function TTlTTI1($cName, $IllLIII="", $Illl111=true){ $res =I2133; if(is_scalar($cName)){ $IllLIIl =($IllLIII=="")?$cName:$IllLIII."_".mb_strtoupper($cName); if($Illl111){ $res =$this->coreRules->TTlTTI1($cName, $IllLIII, false); }if(isset($this->SpecialCaptions[$IllLIIl])){ $res =$this->SpecialCaptions[$IllLIIl]; }elseif(isset($this->SpecialCaptions[$cName])){ $res =$this->SpecialCaptions[$cName]; }}return $res; }function setSpecialCaption($IlIlI1I, $cName, $IllLIIL) {$this->SpecialCaptions[$IlIlI1I."_".mb_strtoupper($cName)] =$IllLIIL; }function TTlTTlT($IllLII1, $cDefaultValue, $cData =array(), $IIL1l1I =I2134){ $modData =explode(":", $IllLII1); $cName =isset($cData['name']) ?$cData['name'] :'unknown'; if(count($modData) <2){ trigger_error("Undefined callback parameter for rule [".$cName.I2135.$this->Name."]..." ,E_USER_ERROR); }$res =""; $IllLIlI =false; $IllLIll =false; $aData =array ('warning' => false, 'allow_empty' => false); $IllLIlL =true; if(AMI_ModDeclarator::getInstance()->isRegistered($modData[0]) && AMI::isResource($modData[0] .I2136)){ if($modData[0] != I2137){ $oModuleRules =AMI::getSingleton($modData[0] .I2136); $oModuleRules->setModId($modData[0]); if(!method_exists($oModuleRules, $modData[1])){ $IllLIl1 =isset($this->Module->Name) ?$this->Module->Name :null; if($IllLIl1 == $modData[0]){ }}else{ $IllLIlI =$oModuleRules->{$modData[1]}($cData, $this->optionsData, $IIL1l1I, $res, $aData); $this->Illl1lI[$modData[0]] =$oModuleRules; $IllLIlL =false; }}}if($IllLIlL){ if($this->IlllL11 != $modData[0]){ $this->IlllL1L =&$this->cms->Core->GetModule($modData[0]); if($this->IlllL1L->IsInstalled()) {$db =new DB_si; $this->IlllL1L->InitEngine($this->cms, $db); $this->IlllL1L->Engine->Init(); if(!method_exists($this->IlllL1L->Engine, $modData[1])){ trigger_error("Undefined callback function for rule [".$cName.I2135.$this->Name."]..." ,E_USER_ERROR); }$IllLIll =true; $this->IlllL11 =$modData[0]; }}else {$IllLIll =true; }if($IllLIll) {$IllLIlI =$this->IlllL1L->Engine->{$modData[1]}($cData, $this->optionsData, $res, $aData, $IIL1l1I); }else {$this->IlllL11 =""; }}return array($IllLIlI, $res, $aData); }function addRule($IIL11IL, $IIL11I1, $cName, $cType, $aOptions =RLC_NONE, $cDefaultValue =false, $IIL11lI =false, $aGroups =array() ,$callback =I2132, $cbAllowedValues =null){ if(is_array($aOptions) && isset($aOptions['subtype'])){ $IllLILI =$aOptions[I2138]; }else{ $IllLILI =$aOptions; }if (is_array($this->IlllL1I) && (isset($this->IlllL1I[I2139]) ?$this->Illl1II != $this->IlllL1I['owner'] || $this->Name != $this->IlllL1I[I2140] :$this->Illl1II != $this->IlllL1I['owner'] && $this->Name != $this->IlllL1I[I2140] )){return; }$res =false; if($cType == RLT_SPLITTER){ if(!empty($this->IlllL1l)) unset($this->Rules[$this->IlllL1l]); $this->IlllL1l =$cName; }if(!isset($this->optionsData["SimpleMode"])){ $this->optionsData["SimpleMode"] =isset($this->cms->VarsGet[I2141]) ?true :false; if($this->optionsData["SimpleMode"]){ $this->optionsData["ItemId"] =$this->cms->VarsGet["flt_item_id"]; $this->optionsData["SpecBlock"] =$this->cms->VarsGet[I2142]; $this->optionsData["SpecBlockNum"] =$this->cms->VarsGet["flt_spec_num"]; $this->optionsData["SpecBlockName"] =$this->optionsData["SpecBlock"].(($this->optionsData[I2143])?"_".$this->optionsData[I2143]:""); $this->optionsData[I2144] =$this->cms->Vars[I2145]; $this->optionsData["ContainerName"] =$this->cms->VarsGet[I2141]; $this->optionsData["LayoutBlock"] =$this->cms->VarsGet[I2146]; }else{ $this->optionsData[I2144] =isset($this->cms->Vars[I2147]) ?$this->cms->Vars[I2147] :I2132; }}if(!is_object($this->Module)){ return false; }if( is_array($aOptions) && !empty($aOptions['style_class']) && isset($this->Captions[$cName .'_' .$aOptions['style_class']]) ){$this->Captions[$cName] =$this->Captions[$cName .'_' .$aOptions[I2148]]; }$this->Illl1Il[] =array($IIL11IL, $cName, $cType, $aOptions, $cDefaultValue, $IIL11lI, $aGroups, $callback, $cbAllowedValues, $IIL11I1); if(!is_int($cType)){ trigger_error("Undefined type for rule [".$cName.I2135.$this->Name."]..." ,E_USER_ERROR); }if($IIL11lI || $this->Module->issetOptionLazy(mb_strtolower(trim($cName)))){ $this->Rules[$cName]["groups"] =$aGroups; $this->Rules[$cName]["level"] =$IIL11IL; $this->Rules[$cName][I2149] =$cName; $this->Rules[$cName]["type"] =$cType; $this->Rules[$cName]["rule"] =($IllLILI!=RLC_NONE)?$aOptions:array(); $this->Rules[$cName]["callback"] =I2132; if($IllLILI!=RLC_NONE && $IllLILI!=RLC_CALLBACK && !is_array($aOptions) && $this->coreRules->TTIITlI($aOptions)){ $this->Rules[$cName]["rule"] =$this->coreRules->TTIITll($aOptions); }else if($IllLILI==RLC_CALLBACK){ $IllLILl =array( I2150 => mb_strtolower(trim($cName)), 'value' => $this->Module->getOptionLazy(mb_strtolower(trim($cName))), 'cbAllowedValues' => $cbAllowedValues );if(AMI_Registry::exists('AMI/Core/skipRuleCallbacks')){ $this->Rules[$cName]['type'] =RLT_BOOL; $IllLILI =RLC_NONE; }else{ $IllLILL =$this->TTlTTlT($callback, $cDefaultValue, $IllLILl); if($IllLILL[0]){ if(!in_array($cType, array(RLT_ENUM, RLT_ENUM_MULTI_ARRAY, RLT_ENUM_MULTI_STRING))){ $this->Rules[$cName][I2151] =$IllLILL[1]; }$this->Rules[$cName]["callback"] =$callback; }else{ unset($this->Rules[$cName]); return false; }}}elseif(!$IIL11lI && $IllLILI!=RLC_NONE && $IllLILI!=RLC_CALLBACK && !is_array($aOptions)){ trigger_error("Invalid data type in addRule: [".$aOptions.I2152.$this->Name."]..." ,E_USER_WARNING); }if($IllLILI == RLC_CALLBACK){ $this->Rules[$cName]["callback"] =$callback; $this->Rules[$cName][I2153] =$cbAllowedValues; }else{ $this->Rules[$cName]["value"] =($IIL11lI)?false:$this->Module->getOptionLazy(mb_strtolower(trim($cName))); }$this->Rules[$cName]["default_value"] =$cDefaultValue; $this->Rules[$cName]["caption"] =$this->getCaption($cName); $this->Rules[$cName]['view_mode'] =$IIL11I1; $res =true; }else{ trigger_error("Undefined option for rule [".$cName.I2135.$this->Name."]..." ,E_USER_WARNING); }if($res && $cType != RLT_SPLITTER) $this->IlllL1l =""; return $res; }function TTlTTlI(){ foreach($this->Rules as $vName=>$Illl1LL){ if($this->Module->issetOptionLazy(mb_strtolower(trim($vName)))){ if(in_array($this->Rules[$vName]["type"], array(RLT_ARRAY_OF, RLT_ENUM_MULTI_ARRAY))){ $this->Rules[$vName]["value"] =!$this->Rules[$vName][I2154] ?$this->Module->getAOptionLazy(mb_strtolower(trim($vName))) :$this->TTlTTlT($this->Rules[$vName][I2154], $this->Rules[$vName]["default_value"], array(I2149 => mb_strtolower(trim($vName)), "value" => $this->Module->getAOptionLazy(mb_strtolower(trim($vName))), I2153 => $this->Rules[$vName][I2153]), "getvalue"); }else{ $this->Rules[$vName]["value"] =!$this->Rules[$vName][I2154] ?$this->Module->getOptionLazy(mb_strtolower(trim($vName))) :$this->TTlTTlT($this->Rules[$vName][I2154], $this->Rules[$vName][I2155], array(I2149 => mb_strtolower(trim($vName)), "value" => $this->Module->getOptionLazy(mb_strtolower(trim($vName))), I2153 => $this->Rules[$vName][I2153]), "getvalue"); }if($this->Rules[$vName][I2154]){ $this->Rules[$vName]["value"] =$this->Rules[$vName]["value"][1]; }}}return true; }function TTlTTll($IllLIII){ $res =$IllLIII; $IllLIL1 =$this->coreRules->TTIITIl($IllLIII[I2156]); if($IllLIL1 >0){ $res[I2151]["control_length"] =$IllLIL1; }return $res; }function TTlTTl1($IllLIII, $prefix =""){ $res[$prefix."enum_data"] =Array(); $aP =$this->coreRules->TTIITI1(); list($cValue, $IllLI1I) =mb_strpos($IllLIII['value'], I2157) !== false ?explode(I2157, $IllLIII['value']) :array (I2132, I2132); foreach($aP as $IllLI1l){ $res[$prefix."enum_data"][] =array( I2149=>$IllLI1l, "caption"=>$this->TTlTTI1($IllLI1l, $IllLIII[I2149]), "selected"=>($IllLI1l==$IllLI1I) );}$res[I2158] =$cValue; return $res; }function TTlTT1T($IllLIII){ $res =$IllLIII; $vData =$IllLIII[I2151]; $IllLI1L =$IllLIII[I2156]; $Illl1LL =is_array($vData)?$vData:array($vData); if(in_array($IllLI1L, array(RLT_ENUM, RLT_ENUM_MULTI_ARRAY, RLT_ENUM_MULTI_STRING)) && !$IllLIII[I2154]){ $Illl1LL["enum_data"] =array(); foreach($vData as $key => $vItem){ if(($key === I2148) || ($key === 'custom_style_class')){ continue; }if($vItem===RLC_EMPTY){ $Illl1LL["allow_empty"] =1; continue; }$IllLI11 =false; if(in_array($IllLI1L, array(RLT_ENUM)) && $vItem==$IllLIII["value"]){ $IllLI11 =true; }elseif(in_array($IllLI1L, array(RLT_ENUM_MULTI_ARRAY)) && in_array($vItem, $IllLIII[I2159])){ $IllLI11 =true; }elseif(in_array($IllLI1L, array(RLT_ENUM_MULTI_STRING))){ $aTmp =explode("|", $IllLIII[I2159]); $IllLI11 =in_array($vItem, $aTmp); }$Illl1LL["enum_data"][] =array( I2149=>$vItem, "caption"=>$this->TTlTTI1($vItem, $IllLIII[I2149]), "selected"=>$IllLI11 );}}else if(in_array($IllLI1L, array(RLT_ENUM, RLT_ENUM_MULTI_ARRAY, RLT_ENUM_MULTI_STRING)) && $IllLIII[I2154]){ $Illl1LL[I2160] =$this->TTlTTlT($IllLIII['callback'], $IllLIII[I2155], $IllLIII); if ($Illl1LL[I2160][2]['allow_empty']) {$Illl1LL['allow_empty'] =1; }$Illl1LL[I2160] =$Illl1LL[I2160][1]; }elseif(in_array($IllLI1L, array(RLT_BOOL, RLT_SYS_INSTALLED))){ $IllLlII =($IllLIII[I2159]==false); $IllLlIl =($IllLIII[I2159]==true); $Illl1LL[I2160][] =array(I2149=>0, "caption"=>$this->TTlTTI1(I2161, $IllLIII[I2149]), "selected"=>$IllLlII); $Illl1LL[I2160][] =array(I2149=>1, "caption"=>$this->TTlTTI1("true", $IllLIII[I2149]), "selected"=>$IllLlIl); $Illl1LL += array(I2162=>0, "max"=>1); }elseif(in_array($IllLI1L, array(RLT_UINT))){ $Illl1LL += array(I2162=>0); }elseif(in_array($IllLI1L, array(RLT_DATE_PERIOD, RLT_DATE_PERIOD_POSITIVE, RLT_DATE_PERIOD_NEGATIVE))){ $Illl1LL += $this->TTlTTl1($IllLIII); if($IllLI1L == RLT_DATE_PERIOD_POSITIVE){ $Illl1LL += array(I2162=>0); }if($IllLI1L == RLT_DATE_PERIOD_NEGATIVE){ $Illl1LL += array("max"=>-1); }}elseif(in_array($IllLI1L, array(RLT_ITEM_WITH_ENUM))){ $IllLlIL =array(); $Illl1LL[I2160] =array(); if(in_array($Illl1LL["items_type"], array(RLT_UINT))){ $IllLlIL += array(I2162=>0); }elseif(in_array($Illl1LL["items_type"], array(RLT_BOOL))){ $IllLlIL += array(I2162=>0, I2163=>1); }if(!in_array($Illl1LL["items_type"], array(RLT_UINT, RLT_SINT, RLT_FLOAT, RLT_CHAR))){ trigger_error("Unsupported or unknown ITEMS_TYPE in rule [".$IllLIII[I2149]."].. type [".$Illl1LL["items_type"].I2164, E_USER_WARNING); }$IllLlI1 =I2133; $IllLllI =false; foreach($Illl1LL["enum"] as $vItem){ $IILlLll =mb_strpos($IllLIII[I2159], $vItem); $IllLI11 =($IILlLll!==false); if($IllLI11){ $IllLlI1 =trim(mb_substr($IllLIII[I2159], 0, $IILlLll)); $IllLllI =true; }$Illl1LL[I2160][] =array( I2149=>$vItem, "caption"=>$this->TTlTTI1($vItem, $IllLIII[I2149]), "selected"=>$IllLI11 );}if(!$IllLllI){ $Illl1LL[I2160][0]["selected"] =true; $IllLlI1 =$IllLIII[I2159]; }$Illl1LL += array(I2158=>$IllLlI1); }elseif(in_array($IllLI1L, array(RLT_ENUM_WITH_UINT, RLT_ENUM_WITH_SINT, RLT_ENUM_WITH_FLOAT, RLT_ENUM_WITH_CHAR, RLT_ENUM_WITH_EMAIL, RLT_ENUM_WITH_DATE_PERIOD_POSITIVE, RLT_ENUM_WITH_DATE_PERIOD_NEGATIVE))){ $Illl1LL[I2160] =array(); if($IllLI1L == RLT_ENUM_WITH_UINT){ $Illl1LL += array(I2162=>0); }foreach($Illl1LL[I2165] as $vItem){ $IllLlll =isset($Illl1LL["enum_only"][$vItem]); $Illl1LL[I2160][] =array( I2149=>$vItem, "caption"=>$this->TTlTTI1($vItem, $IllLIII[I2149]), "enum_only"=>$IllLlll );}if(in_array($IllLI1L, array(RLT_ENUM_WITH_DATE_PERIOD_POSITIVE, RLT_ENUM_WITH_DATE_PERIOD_NEGATIVE))) {$Illl1LL += $this->TTlTTl1($IllLIII, "sub_"); if($IllLI1L == RLT_ENUM_WITH_DATE_PERIOD_POSITIVE){ $Illl1LL += array(I2162=>0); }else {$Illl1LL += array(I2163=>-1); }}}elseif(in_array($IllLI1L, array(RLT_ARRAY_OF))){ $Illl1LL[I2160] =array(); $IllLlIL =array(); if(in_array($Illl1LL[I2166], array(RLT_UINT))){ $IllLlIL += array(I2162=>0); }elseif(in_array($Illl1LL[I2166], array(RLT_BOOL))){ $IllLlIL += array(I2162=>0, I2163=>1); }elseif(in_array($Illl1LL[I2166], Array(RLT_ENUM, RLT_ENUM_MULTI_STRING, RLT_ENUM_MULTI_ARRAY))){ $Illl1LL["items_captions"] =Array(); foreach($Illl1LL["items_values"] as $value) {$caption =""; if($value != RLC_EMPTY) {if(!empty($IllLIII['callback'])){ $cData =array( I2150 => $IllLIII[I2149], I2167 => $value );$aData =$this->TTlTTlT($IllLIII['callback'], I2132, $cData, "getcaption"); if(is_array($aData)){ $caption =$aData[0]; }}if(empty($caption)){ $caption =$this->TTlTTI1($value, $IllLIII[I2149]); }}else {$Illl1LL["allow_empty"] =1; }$Illl1LL["items_captions"][$value] =$caption; }}foreach($IllLIII[I2159] as $vName=>$vVal){ if(in_array($Illl1LL[I2166], array(RLT_BOOL, RLT_UINT, RLT_SINT, RLT_FLOAT, RLT_CHAR, RLT_EMAIL, RLT_DTIME, RLT_DATE, RLT_TIME, RLT_SYS_DTIME, RLT_ENUM, RLT_ENUM_MULTI_STRING, RLT_ENUM_MULTI_ARRAY))){ ;}else{ trigger_error("Unsupported or unknown ITEMS_TYPE in Array rule [".$IllLIII[I2149]."].. type [".$Illl1LL[I2166].I2164, E_USER_WARNING); }$IllLllL =array( I2149=>$vName, "caption"=>$this->TTlTTI1($vName, $IllLIII[I2149]), I2156=>$Illl1LL[I2166], I2159=>$vVal, I2155=>isset($IllLIII[I2155][$vName]) ?$IllLIII[I2155][$vName] :null, "remove_disabled"=>(in_array($vName, $Illl1LL["remove_disabled"])) );$Illl1LL[I2160][] =$IllLllL+$IllLlIL; if($Illl1LL[I2166] == RLT_ENUM_MULTI_STRING) {$IllLll1 =Array(); $aTmp =explode(I2168, $IllLIII[I2159][$vName]); foreach($Illl1LL["items_values"] as $idx => $value) {$selected =in_array($value, $aTmp); $IllLll1[] =Array("caption" => $Illl1LL["items_captions"][$value], I2149 => $value, "selected" => $selected); }$Illl1LL[I2169.$vName] =$IllLll1; }elseif ($Illl1LL[I2166] == RLT_ENUM) {$IllLll1 =Array(); foreach($Illl1LL["items_values"] as $idx => $value) {$selected =($value == $IllLIII[I2159][$vName]); $IllLll1[] =Array("caption" => $Illl1LL["items_captions"][$value], I2149 => $value, "selected" => $selected); }$Illl1LL[I2169.$vName] =$IllLll1; }elseif($Illl1LL[I2166] == RLT_ENUM_MULTI_ARRAY) {$IllLll1 =Array(); foreach($Illl1LL[I2170] as $idx => $value) {$selected =in_array($value, $IllLIII[I2159][$vName]); $IllLll1[] =Array("caption" => $Illl1LL["items_captions"][$value], I2149 => $value, "selected" => $selected); }$Illl1LL[I2169.$vName] =$IllLll1; }}}else{ $Illl1LL =$IllLIII[I2151]; }$res[I2151] =$Illl1LL; $res =$this->TTlTTll($res); return $res; }function removeRules($IllLlLI="all"){ if(!is_array($IllLlLI) && $IllLlLI!=I2171){ trigger_error("Invalid data in removeRules [".$IllLlLI.I2152.$this->Name."]..." ,E_USER_WARNING); }else{ if(!is_array($IllLlLI) && $IllLlLI==I2171){ $this->Rules =array(); $this->Illl1Il =array(); }else{ foreach($IllLlLI as $vName){ unset($this->Rules[$vName]); foreach($this->Illl1Il as $IllLlLl=>$IllLlLL){ if($IllLlLL[1]==$vName){ unset($this->Illl1Il[$IllLlLl]); break; }}}}}return true; }function TTlTT1I($cName){ if(!$this->finished){ trigger_error(I2172.$this->Name."], rule [".$cName."]...",E_USER_WARNING); }if(!isset($this->Rules[$cName])){ trigger_error("Rules is not defined [".$cName.I2152.$this->Name."]..." ,E_USER_WARNING); }return $this->Rules[$cName]; }function TTlTT1l(){ if(!$this->finished){ trigger_error(I2172.$this->Name."], rule [".$cName."]...",E_USER_WARNING); }return $this->Rules; }function TTlTT11(&$IllLlL1){ $res =array(); foreach($IllLlL1 as $vName=>$vVal){ if(isset($vVal[I2149])){ $res[] =$vVal[I2149]; }}return $res; }function TTlTITT(&$IILlLlL, $cType, $IllLl1I){ $res =true; if(in_array($cType, array(RLT_BOOL, RLT_UINT, RLT_SINT, RLT_FLOAT))) {if(isset($IllLl1I[I2151][I2162]) && $IILlLlL<$IllLl1I[I2151][I2162]){ $res =false; }elseif(isset($IllLl1I[I2151][I2163]) && $IILlLlL>$IllLl1I[I2151][I2163]){ $res =false; }elseif($cType == RLT_FLOAT){ $IILlLlL =floatval($IILlLlL); }else{ $IILlLlL =intval($IILlLlL); }}elseif(in_array($cType, array(RLT_CHAR, RLT_EMAIL))) {if(isset($IllLl1I[I2151]["length_min"]) && mb_strlen($IILlLlL)<$IllLl1I[I2151][I2173]){ $res =false; }elseif(isset($IllLl1I[I2151]["length_max"]) && mb_strlen($IILlLlL)>$IllLl1I[I2151]["length_max"]){ $res =false; }elseif($cType == RLT_EMAIL && !$this->TTlTITl($IILlLlL)) {$res =false; }}elseif(in_array($cType, array(RLT_ENUM, RLT_ENUM_MULTI_ARRAY, RLT_ENUM_MULTI_STRING))) {$aValue =is_array($IILlLlL)?$IILlLlL:array($IILlLlL); switch ($cType){ case RLT_ENUM: $tVal =$IILlLlL; break; case RLT_ENUM_MULTI_ARRAY: $tVal =$IILlLlL; break; case RLT_ENUM_MULTI_STRING: $tVal =implode(I2168, $IILlLlL); break; default: $tVal =array(); break; }$IllLl1l =$this->TTlTT11($IllLl1I[I2151][I2160]); foreach($aValue as $vItem){ if(!in_array($vItem, $IllLl1l )){$res =false; break; }}if($res){ $IILlLlL =$tVal; }}elseif(in_array($cType, array(RLT_ENUM_WITH_UINT, RLT_ENUM_WITH_SINT, RLT_ENUM_WITH_FLOAT, RLT_ENUM_WITH_CHAR, RLT_ENUM_WITH_EMAIL))) {$IllLl1L =$IILlLlL[I2165]; $IllLl11 =intval($IILlLlL["input"]); $aValue =is_array($IILlLlL[I2165])?$IILlLlL[I2165]:array($IILlLlL[I2165]); $IllLl1l =$this->TTlTT11($IllLl1I[I2151][I2160]); foreach($aValue as $vItem){ if(!in_array($vItem, $IllLl1l )){$res =false; break; }}if($res){ $IllLLII =(isset($IllLl1I[I2151]["result_type"]))?$IllLl1I[I2151][I2174]:"simple"; if($IllLLII == "simple"){ if(is_array($IllLl1I[I2151]["enum_only"]) && in_array($IllLl1L, $IllLl1I[I2151]["enum_only"])){ $IILlLlL =$IllLl1L; }else{ if(in_array($cType, array(RLT_ENUM_WITH_UINT, RLT_ENUM_WITH_SINT, RLT_ENUM_WITH_FLOAT)) && isset($IllLl1I[I2151][I2162]) && $IllLl11<$IllLl1I[I2151][I2162]){ $res =false; }elseif(in_array($cType, array(RLT_ENUM_WITH_UINT, RLT_ENUM_WITH_SINT, RLT_ENUM_WITH_FLOAT)) && isset($IllLl1I[I2151][I2163]) && $IllLl11>$IllLl1I[I2151][I2163]){ $res =false; }elseif($cType == RLT_ENUM_WITH_EMAIL && !isEmail($IllLl11)) {$res =false; }else{ $IILlLlL =$IllLl11; }}}}}elseif(in_array($cType, array(RLT_DATE_PERIOD, RLT_DATE_PERIOD_POSITIVE, RLT_DATE_PERIOD_NEGATIVE))) {if(!in_array($IILlLlL[I2175], $this->coreRules->TTIITI1())){ $res =false; }if(isset($IllLl1I[I2151][I2162]) && $IILlLlL["num"]<$IllLl1I[I2151][I2162]){ $res =false; }elseif(isset($IllLl1I[I2151][I2163]) && $IILlLlL["num"]>$IllLl1I[I2151][I2163]){ $res =false; }else{ $IILlLlL["num"] =intval($IILlLlL["num"]); }if($res){ $IILlLlL =$IILlLlL[I2176]." ".$IILlLlL[I2175]; }}elseif(in_array($cType, array(RLT_DTIME))) {if(DateTools::isvaliddate($IILlLlL, $this->coreRules->cms->DFMT["conf_dtime"]) === false){ $res =false; }}elseif(in_array($cType, array(RLT_DATE))) {if(DateTools::isvaliddate($IILlLlL, $this->coreRules->cms->DFMT["conf"]) === false){ $res =false; }}elseif(in_array($cType, array(RLT_SYS_DTIME))) {}else{ trigger_error("Unknow type in _adjustSingleValue type=[".$cType.I2177.$IILlLlL."]...", E_USER_WARNING); $res =false; }return $res; }function TTlTITI($cName, &$IILlLlL){ $res =true; $Illl1LL =$this->TTlTT1I($cName); $IllLI1L =$Illl1LL[I2156]; if(in_array($IllLI1L, array(RLT_BOOL, RLT_UINT, RLT_SINT, RLT_FLOAT))) {if(isset($Illl1LL[I2151][I2162]) && $IILlLlL<$Illl1LL[I2151][I2162]){ $res =false; }elseif(isset($Illl1LL[I2151][I2163]) && $IILlLlL>$Illl1LL[I2151][I2163]){ $res =false; }elseif($IllLI1L == RLT_FLOAT){ $IILlLlL =floatval($IILlLlL); }else{ $IILlLlL =intval($IILlLlL); }}elseif(in_array($IllLI1L, array(RLT_CHAR, RLT_EMAIL))) {if(isset($Illl1LL[I2151][I2173]) && mb_strlen($IILlLlL)<$Illl1LL[I2151][I2173]){ $res =false; }elseif(isset($Illl1LL[I2151]["length_max"]) && mb_strlen($IILlLlL)>$Illl1LL[I2151]["length_max"]){ $res =false; }elseif($IllLI1L == RLT_EMAIL && !$this->TTlTITl($IILlLlL)) {$res =false; }}elseif(in_array($IllLI1L, array(RLT_ENUM, RLT_ENUM_MULTI_ARRAY, RLT_ENUM_MULTI_STRING))) {$aValue =is_array($IILlLlL)?$IILlLlL:array($IILlLlL); switch ($IllLI1L){ case RLT_ENUM: $tVal =$IILlLlL; break; case RLT_ENUM_MULTI_ARRAY: $tVal =$IILlLlL; break; case RLT_ENUM_MULTI_STRING: $tVal =$IILlLlL; if(count($IILlLlL)==0 && (!isset($Illl1LL[I2151]["allow_empty"]) || !$Illl1LL[I2151][I2178])){ $res =false; }else{ $tVal =implode(I2168, $IILlLlL); }break; default: $tVal =array(); break; }$IllLl1l =$this->TTlTT11($Illl1LL[I2151][I2160]); if (!(isset($Illl1LL[I2151][I2178]) && $Illl1LL[I2151][I2178] && empty($vItem))) {foreach ($aValue as $vItem){ if (!in_array($vItem, $IllLl1l)){ $res =false; break; }}}if($res){ $IILlLlL =$tVal; }}elseif(in_array($IllLI1L, array(RLT_ENUM_WITH_UINT, RLT_ENUM_WITH_SINT, RLT_ENUM_WITH_FLOAT, RLT_ENUM_WITH_CHAR, RLT_ENUM_WITH_EMAIL, RLT_ENUM_WITH_DATE_PERIOD_POSITIVE, RLT_ENUM_WITH_DATE_PERIOD_NEGATIVE))) {$IllLl1L =$IILlLlL[I2165]; $IllLl11 =intval($IILlLlL["input"]); $aValue =is_array($IILlLlL[I2165])?$IILlLlL[I2165]:array($IILlLlL[I2165]); $IllLl1l =$this->TTlTT11($Illl1LL[I2151][I2160]); foreach($aValue as $vItem){ if(!in_array($vItem, $IllLl1l )){$res =false; break; }}if($res){ $IllLLII =(isset($Illl1LL[I2151][I2174]))?$Illl1LL[I2151][I2174]:"simple"; if($IllLLII == "simple"){ if(is_array($Illl1LL[I2151]["enum_only"]) && in_array($IllLl1L, $Illl1LL[I2151][I2179])){ $IILlLlL =$IllLl1L; }else{ if(in_array($IllLI1L, array(RLT_ENUM_WITH_UINT, RLT_ENUM_WITH_SINT, RLT_ENUM_WITH_FLOAT)) && isset($Illl1LL[I2151][I2162]) && $IllLl11<$Illl1LL[I2151][I2162]){ $res =false; }elseif(in_array($IllLI1L, array(RLT_ENUM_WITH_UINT, RLT_ENUM_WITH_SINT, RLT_ENUM_WITH_FLOAT)) && isset($Illl1LL[I2151][I2163]) && $IllLl11>$Illl1LL[I2151][I2163]){ $res =false; }elseif($IllLI1L == RLT_ENUM_WITH_EMAIL && !isEmail($IllLl11)) {$res =false; }elseif(in_array($IllLI1L, array(RLT_ENUM_WITH_DATE_PERIOD_POSITIVE, RLT_ENUM_WITH_DATE_PERIOD_NEGATIVE))) {if(!in_array($IILlLlL[I2175], $this->coreRules->TTIITI1())){ $res =false; }if(isset($IllLl1I[I2151][I2162]) && $IILlLlL[I2176]<$IllLl1I[I2151][I2162]){ $res =false; }elseif(isset($IllLl1I[I2151][I2163]) && $IILlLlL[I2176]>$IllLl1I[I2151][I2163]){ $res =false; }else{ $IILlLlL[I2176] =intval($IILlLlL[I2176]); }if($res){ $IILlLlL =$IILlLlL[I2176]." ".$IILlLlL[I2175]; }}else{ $IILlLlL =$IllLl11; }}}}}elseif(in_array($IllLI1L, array(RLT_DATE_PERIOD, RLT_DATE_PERIOD_POSITIVE, RLT_DATE_PERIOD_NEGATIVE))) {if(!in_array($IILlLlL[I2175], $this->coreRules->TTIITI1())){ $res =false; }if(isset($Illl1LL[I2151][I2162]) && $IILlLlL[I2176]<$Illl1LL[I2151][I2162]){ $res =false; }elseif(isset($Illl1LL[I2151][I2163]) && $IILlLlL[I2176]>$Illl1LL[I2151][I2163]){ $res =false; }else{ $IILlLlL[I2176] =intval($IILlLlL[I2176]); }if($res){ $IILlLlL =$IILlLlL[I2176]." ".$IILlLlL[I2175]; }}elseif(in_array($IllLI1L, array(RLT_ITEM_WITH_ENUM))) {if(in_array($Illl1LL[I2151][I2166], array(RLT_BOOL, RLT_UINT, RLT_SINT, RLT_FLOAT))) {if(isset($Illl1LL[I2151][I2162]) && $IILlLlL["input"]<$Illl1LL[I2151][I2162]){ $res =false; }elseif(isset($Illl1LL[I2151][I2163]) && $IILlLlL["input"]>$Illl1LL[I2151][I2163]){ $res =false; }elseif($Illl1LL[I2151][I2166] == RLT_FLOAT){ $IILlLlL[I2180] =floatval($IILlLlL[I2180]); }elseif(in_array($Illl1LL[I2151][I2166], array(RLT_CHAR, RLT_EMAIL))) {if(isset($Illl1LL[I2151][I2173]) && mb_strlen($IILlLlL[I2180])<$Illl1LL[I2151][I2173]){ $res =false; }elseif(isset($Illl1LL[I2151]["length_max"]) && mb_strlen($IILlLlL[I2180])>$Illl1LL[I2151]["length_max"]){ $res =false; }elseif($Illl1LL[I2151][I2166] == RLT_EMAIL && !$this->TTlTITl($IILlLlL[I2180])) {$res =false; }}}$IILlLlL =$IILlLlL[I2180].$IILlLlL[I2165]; }elseif(in_array($IllLI1L, array(RLT_DTIME))) {if(DateTools::isvaliddate($IILlLlL, $this->coreRules->cms->DFMT["conf_dtime"]) === false){ $res =false; }}elseif(in_array($IllLI1L, array(RLT_DATE))) {if(DateTools::isvaliddate($IILlLlL, $this->coreRules->cms->DFMT["conf"]) === false){ $res =false; }}elseif(in_array($IllLI1L, array(RLT_ARRAY_OF))) {$aValue =is_array($IILlLlL)?$IILlLlL:array($IILlLlL); $IllLl1l =$this->TTlTT11($Illl1LL[I2151][I2160]); foreach($aValue as $vItem=>$itemData){ if(!in_array($vItem, $IllLl1l )){$res =false; break; }if(in_array($Illl1LL[I2151][I2166], Array(RLT_ENUM, RLT_ENUM_MULTI_STRING, RLT_ENUM_MULTI_ARRAY))) {$IllLLIl =$Illl1LL; $IllLLIl[I2151][I2160] =$IllLLIl[I2151][I2169.$vItem]; if(!$this->TTlTITT($itemData, $Illl1LL[I2151][I2166], $IllLLIl)){ $res =false; break; }if($Illl1LL[I2151][I2166] == RLT_ENUM && is_array($itemData)) {$IILlLlL[$vItem] =$itemData[0]; }else {$IILlLlL[$vItem] =$itemData; }}else {if(!$this->TTlTITT($itemData, $Illl1LL[I2151][I2166], $Illl1LL[I2151][I2160])){ $res =false; break; }}}if($Illl1LL[I2151][I2166] == RLT_ENUM_MULTI_STRING) {$IILlLlL += $Illl1LL[I2159]; }}return $res; }function TTlTITl(&$IllLLIL){ $res =true; $IllLLI1 =array(); $aEmails =preg_split(I2181, $IllLLIL, -1, PREG_SPLIT_NO_EMPTY); foreach($aEmails as $email){ if(isEmail($email)){ $IllLLI1[] =$email; }else {$res =false; break; }}if(empty($IllLLI1)){ $res =false; }if($res){ $IllLLIL =implode(',', $IllLLI1); }return $res; }}