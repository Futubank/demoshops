<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    core 
 * @version    $Id$ 
 * @size       27096 xkqwmsungmxuwkiusplwkgpwgriyxwlmwtslxkmxznrmkiitgitgxpyqlmmukimtwzugpnir
 */ ?><?php foreach(array(2182=>'?nZIQ?MD?QIGtB',2183=>"'?Mn?IHSuJQ?'",2184=>'',2185=>"coqRq?nZIQ?=?'HGtMHnD|SuIG|JZAB'?zNs?.IHSuJQ|nZIQ.?=?'",2186=>"'",2187=>"wid|iHSuJQhGtMHnD%%?SZtZ?WHrruGtMHn?SQtQWtQS?fHr?IHSuJQ?'",2188=>'frHnt',2189=>"dqjqwT?[?FRhi?.WID|HGtMHnD.?coqRq?.IHSuJQ|nZIQ.?=?'WHrQ'?zNs?.nZIQ.?=?'HGtMHnD|SuIG|",2190=>'wid|iHSuJQDgrHGQrtMQD%%?SZtZ?WHrruGtMHn?SQtQWtQS',2191=>'YMP|vZJuQ',2192=>"dqjqwT?.IHSuJQ|nZIQ.!?.vZJuQ.!?.YMP|vZJuQ.?",2193=>"coqRq?nZIQ?=?'HGtMHnD|SuIG'?zNs?.IHSuJQ|nZIQ.?mN?}'",2194=>"'!'",2195=>'IHSuJQ|nZIQ',2196=>'HGtMHnD|SuIG',2197=>"coqRq?.IHSuJQ|nZIQ.?=?'",2198=>'nZIQ',2199=>"CrMtQhGtMHnDsuIG%?fZMJQS?fHr?IHSuJQ?'",2200=>'vZJuQ',2201=>'WID|HGtMHnD',2202=>"?zNs?.nZIQ.?=?'",2203=>"?zNs?.IHSuJQ|nZIQ.?=?'",2204=>'~') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class CMS_ModulesSettings{ public $db; public $aParams =array(); public $entity =''; public $debug =true; protected $IllLLlI =FALSE; protected static $IllLLll =array(); function CMS_ModulesSettings($entity){ $this->entity =$entity; $this->db =new DB_si; $this->db->setAttr('sql_safety_check', false); }function TTlTIT1($debug){ $this->debug =(bool)$debug; }function TTlTIIT($dump){ $this->aParams =$dump; }function TTlTIII($module, $dump){ $this->aParams[$module] =$dump; }function TTlTIIl(){ return $this->aParams; }function TTlTII1($module){ return $this->aParams[$module]; }function TTlTIlT($module, &$dump){ if(is_array($dump)){ $this->aParams[$module] =array_merge($this->aParams[$module], $dump); }}function TTlTIlI($dump){ $this->aParams =array_merge($this->aParams, $dump); }public function issetModParam($modId, $name){ if(empty($name) && $this->debug){ trigger_error(ucfirst($this->entity) .I2182, E_USER_WARNING); }$res =isset($this->aParams[$modId][mb_strtolower($name)]); return $res; }public function issetModParamLazy($modId, $name){ if(empty($name) && $this->debug){ trigger_error(ucfirst($this->entity) .I2182, E_USER_WARNING); }$name =mb_strtolower($name); $this->TTlTlTT($modId); $res =isset(self::$IllLLll[$modId][$name]); if(!$res){ $res =$this->issetModParam($modId, $name); }return $res; }public function issetAndTrueModParam($modId, $name){ return !empty($this->aParams[$modId][mb_strtolower($name)]); }public function TTlTIll($modId, $name){ $name =mb_strtolower($name); $res =isset(self::$IllLLll[$modId][$name]) ?!empty(self::$IllLLll[$modId][$name]) :!empty($this->aParams[$modId][$name]); return $res; }public function getModParam($modId, $name ='', $warn =TRUE){ $name =mb_strtolower($name); $res =null; if(!empty($name)){ if(isset($this->aParams[$modId][$name])){ $res =$this->aParams[$modId][$name]; }elseif($warn){ trigger_error("Unknown " .$this->entity ." name '" .$name .I2183 .$modId ."'", E_USER_WARNING); }}else{ $res =$this->aParams[$modId]; }return $res; }public function getModParamLazy($modId, $name =I2184, $warn =TRUE){ $name =mb_strtolower($name); $res =null; $this->TTlTlTT($modId); if(!empty($name)){ if(isset(self::$IllLLll[$modId][$name])){ $res =self::$IllLLll[$modId][$name]; }else{ $res =$this->getModParam($modId, $name, $warn); }}else{ $res =self::$IllLLll[$modId]; }return $res; }public function getModAParam($modId, $name){ $res =$this->getModParam($modId, $name); if(!is_array($res)){ $res =array($res); }return $res; }public function TTlTIl1($modId, $name){ $res =$this->getModParamLazy($modId, $name); if(!is_array($res)){ $res =array($res); }return $res; }public function setModParam($modId, $name, $value =NULL){ $name =mb_strtolower(trim($name)); if(!is_null($value)){ $this->aParams[$modId][$name] =$value; }else{ unset($this->aParams[$modId][$name]); }}public function setModParamLazy($modId, $name, $value =NULL){ $this->TTlTlTT($modId); $name =mb_strtolower(trim($name)); if(!is_null($value)){ self::$IllLLll[$modId][$name] =$value; }else{ unset(self::$IllLLll[$modId][$name]); }}public function TTlTI1T($modId, $name, $value =NULL){ $name =mb_strtolower(trim($name)); $this->TTlTlTT($modId); if(isset(self::$IllLLll[$modId][$name])){ $this->setModParamLazy($modId, $name, $value); }else{ $this->setModParam($modId, $name, $value); }}function TTlTI1I($options =null){ static $IllLLlL =null; if(is_array($options)){ $IllLLlL =$options; }elseif(is_null($options)){ return $IllLLlL; }else{ $IllLLlL =null; }}public function TTlTI1l($mode){ $this->IllLLlI =(bool)$mode; }public function TTlTI11($modId){ return self::$IllLLll[$modId]; }public function TTlTlTT($modId){ if(isset(self::$IllLLll[$modId])){ return; }self::$IllLLll[$modId] =array(); if( !$this->IllLLlI && AMI_ModDeclarator::getInstance()->isRegistered($modId) && AMI_ModDeclarator::getInstance()->getAttr($modId, 'has_options_lazy', FALSE) ){$sql ="SELECT `value`, `big_value` " ."FROM `cms_options` " .I2185 .(I2184 != $modId ?$modId :'core') .I2186; $IllLLl1 =$this->db->select($sql, DBC_SYS_QUERY); $aRecord =$IllLLl1->nextRecord(); self::$IllLLll[$modId] =array(); if($aRecord){ $dump =$aRecord['big_value']; if(mb_strlen($dump) != $aRecord['value']){ trigger_error(I2187 .$modId .I2186, E_USER_WARNING); }else{ $dump =unserialize($dump); if(is_array($dump)){ self::$IllLLll[$modId] =$dump; }}}}}}class CMS_ModulesProperties extends CMS_ModulesSettings{ function CMS_ModulesProperties(){ parent::CMS_ModulesSettings('property'); }function read($side ='front'){ $dump =null; if($side != I2188){ $side ='all'; }$sql =I2189 .$side .I2186; $record =$this->db->getRecord($sql, DBC_SYS_QUERY); mb_internal_encoding('UTF-8'); if($record){ if(mb_strlen($record['big_value']) != $record['value']){ trigger_error(I2190, E_USER_WARNING); }else{ $dump =unserialize($record[I2191]); if(!empty($dump['Options'])) {parent::TTlTI1I($dump['Options']); }}}return $dump; }function TTlTlTI(){ $res =$this->dump; $this->dump =null; return $res; }}class CMS_ModulesOptions extends CMS_ModulesSettings{ public $aOptionsBackup =array(); public $IllLLLI =array(); function CMS_ModulesOptions($aModuleNames =array ()){parent::CMS_ModulesSettings('option'); $this->TTlTlTl($aModuleNames); }function TTlTlTl($aModuleNames, $append =false){ $this->IllLLLI =$aModuleNames; $options =array(); if(sizeof($aModuleNames)){ $sql =I2192 ."FROM `cms_options` " .I2193 .implode(I2194, $aModuleNames) ."')"; $rs =&$this->db->select($sql, DBC_SYS_QUERY); while($record =$rs->nextRecord()){ $module =$record[I2195]; $dump =$record[I2191]; if(mb_strlen($dump) != $record['value']){ trigger_error(I2187 .$module .I2186, E_USER_WARNING); }else{ $dump =unserialize($dump); if(is_array($dump['Options'])){ $options[$module] =$dump['Options']; unset($this->IllLLLI[array_search($module, $this->IllLLLI)]); }}}if(!isset($options[I2184]) && is_array($IllLLlL =parent::TTlTI1I())){ $options[I2184] =$IllLLlL; parent::TTlTI1I(false); }if($append){ parent::TTlTIlI($options); }else{ parent::TTlTIIT($options); }}$res =sizeof($options); return $res; }function TTlTlT1($module, $dump, $name =I2196){ $dump =serialize($dump); $size =mb_strlen($dump); $dump =addslashes($dump); $aSQL =array( 'value' => $size, 'date_modified' => '=|NOW()', I2191 => $dump );$sql ="SELECT `id` " ."FROM `cms_options` " .I2197 .$module ."' AND `name` = '" .$name .I2186; $this->db->query($sql, DBC_SYS_QUERY); if($this->db->next_record()){ $sql =$this->db->GenUpdateSQL('cms_options', $aSQL, ' WHERE `id` = ' .$this->db->Record['id']); }else{ $aSQL += array( I2195 => $module, I2198 => $name );$sql =$this->db->GenInsertSQL('cms_options', $aSQL); }$res =$this->db->query($sql, DBC_SYS_QUERY); if(!$res){ trigger_error(I2199 .$module .I2186, E_USER_WARNING); }return $res; }function TTlTlIT($module, $cMask ="*", $lang =I2184){ $res =array(); $IllLLLl =mb_strlen(str_replace('*', I2184, $cMask)) +1; $IILlLl1 =mb_strtolower($cMask); foreach($this->aParams[$module] as $name => $val) {if($this->TTlTlll($name, $IILlLl1)){ $name =mb_substr($name, $IllLLLl); $res[$name] =empty($lang) || !is_array($val) || !isset($val[$lang]) ?$val :$val[$lang]; }}return $res; }function TTlTlII($module, $name, $IllLLLL =I2184){ $res =null; $name =mb_strtolower($name); if(is_array($this->aParams[$module][$name]) && isset($this->aParams[$module][$name][$IllLLLL])){ $res =$this->aParams[$module][$name][$IllLLLL]; }else{ if(isset($this->aParams[$module][$name])){ $res =$this->aParams[$module][$name]; }}return $res; }function TTlTlIl($module, $id, $force =false){ if(!isset($this->aOptionsBackup[$module][$id]) || $force){ $this->aOptionsBackup[$module][$id] =$this->getModParam($module); }}function TTlTlI1($module, $id, $clear =true, $warn =true){ $res =isset($this->aOptionsBackup[$module][$id]); if($res){ $this->TTlTIII($module, $this->aOptionsBackup[$module][$id]); if($clear){ unset($this->aOptionsBackup[$module][$id]); }}elseif($warn){ trigger_error('Options backup is empty', E_USER_WARNING); }return $res; }function readOption(&$vData, $IIILLII =I2184, $IILIlI1 =I2184, $cLang =I2184){ return self::TTlTllT($this->db, $vData, $IIILLII, $IILIlI1, $cLang); }function writeOption($IIILLII =I2184, $IILIlI1, $cValue, $IllLLL1 =false, $cLang =I2184, $IllLL1I =I2184){ $tmp =array(); $filter =self::TTlTllI($IIILLII, $IILIlI1, $cLang); $aSQL =array( I2195 => $IIILLII, I2198 => $IILIlI1, I2200 => $cValue, 'date_modified' => '=|NOW()' );if($IllLLL1 !== false){ $aSQL[I2191] =$IllLLL1; }if(!empty($cLang)) {$Data += array('lang' => $cLang); }if($this->ReadOption($tmp, $IIILLII, $IILIlI1, $cLang)){ $sql =$this->db->GenUpdateSql('cms_options', $aSQL, $filter .$IllLL1I); $res =$this->db->rawExecute($sql); if($res && mb_strlen($IllLL1I)){ $res =$this->db->affectedRows() >0; }}else{ $sql =$this->db->GenInsertSql(I2201, $aSQL); $res =$this->db->rawExecute($sql); }return $res; }function deleteOption($IIILLII, $IILIlI1, $cLang =I2184){ $filter =self::TTlTllI($IIILLII, $IILIlI1, $cLang); $sql ="DELETE FROM `cms_options` " .$filter; $res =$this->db->execute($sql, DBC_SYS_QUERY); return $res; }public static function TTlTllT(&$db, &$vData, $IIILLII =I2184, $IILIlI1 =I2184, $cLang =I2184){ $res =false; $filter =self::TTlTllI($IIILLII, $IILIlI1, $cLang); $sql ="SELECT * FROM `cms_options` " .$filter; $db->query($sql, DBC_RAW_QUERY); while($record =$db->nextRecord(MYSQL_BOTH)){ $res =true; $vData[] =$record; }if($res && sizeof($vData) == 1){ $vData =$vData[0]; $vData['_alone_record'] =true; }return $res; }public static function TTlTllI($IIILLII =I2184, $IILIlI1 =I2184, $cLang =I2184){ $filter ='WHERE 1 '; if(!empty($IILIlI1)){ $filter .= I2202 .$IILIlI1 .I2186; }if(!empty($IIILLII)){ $filter .= I2203 .$IIILLII .I2186; }if(!empty($cLang)){ $filter .= " AND `lang` = '" .$cLang .I2186; }return $filter; }function TTlTlll($cStr, $cMask, $IllLL1l ='*'){ $res =false; if(mb_strpos($cMask, $IllLL1l) !== false) {$mask =preg_quote($cMask, '/'); $mask ='/' .str_replace(preg_quote($IllLL1l, I2204), '.*', $mask) .I2204; $res =preg_match($mask, $cStr); }else{ $res =$cStr == $cMask; }return $res; }public function dropModData($modId){ unset($this->aParams[$modId]); }}