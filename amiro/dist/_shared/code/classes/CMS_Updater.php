<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       80734 xkqwlpimngyxlqllkwxmmuwmwzxltqnkmutqrutrnnqpzuigkilxrrmqtykwixzuzztxpnir
 */ ?><?php foreach(array(2443=>"OHDt",2444=>"dohc?Tzyjqd",2445=>'OZJt|Hn|Qrr',2446=>'&?',2447=>"+++?RqpqXg?EuQrB%?",2448=>"~",2449=>'+',2450=>'RunnMnP?SHUGSZtQ}{',2451=>"",2452=>"\r\n",2453=>"MnDtZJJQS|JZnPD",2454=>"?QrrHr}D{",2455=>"::",2456=>"`JnP",2457=>"<<++",2458=>"++<<",2459=>"WZn't?rQZS?fMJQ",2460=>"\n",2461=>"WHntQnt",2462=>"nHt?DGQWMfMQS",2463=>'iUjTm|dmTq|ms',2464=>'DGQW|nZIQ',2465=>'fMnZJ|WHSQ',2466=>'',2467=>"SZtZ",2468=>"DQZrWO|IHSQ",2469=>"DtrGHD",2470=>"ZSS|tH|YQPMn",2471=>"IHSQ",2472=>"HnduWWQDDsZtZ",2473=>"fZMJ|SZtZ",2474=>"zSSzftQrdQt",2475=>'IHSQ',2476=>'}`[ ^{ ',2477=>"^",2478=>'#,++<DQt?vZr="',2479=>"ZJJgrQfMxQD",2480=>"pQtdQt",2481=>"DQZrWO",2482=>"tZrPQtNZIQ",2483=>'WHntQnt',2484=>"rQPQxG",2485=>"ZSS|tH|QnS",2486=>"fZMJ|ZWtMHn",2487=>"|WOZnPQD`WIS",2488=>"IZMn",2489=>"#,++<DQt?vZr=\"",2490=>'\\5',2491=>'\\1',2492=>"'\n'D",2493=>"RhhT|gzTo",2494=>"WJQZrQS?*?",2495=>"``",2496=>"DHurWQ|nHt|QxMDtD",2497=>"frHI",2498=>"YZWKuGFMJQdtHrQ",2499=>"CMtOduYSMrD",2500=>"fMJQD|QrrHr",2501=>"\nFMJQD?rQCrMtQS%?",2502=>"SMr|nHt|QxMDtD",2503=>"SHnQ",2504=>"DKMGGQS",2505=>"fMJQD|",2506=>"SMrnZIQ",2507=>"WrQZtQ|SMr",2508=>"?&",2509=>'\ ',2510=>"czRNmNp") as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class CMS_Updater{ public $Il1I1Ll; public $Il1I1LL; public $db; public $Core; public $Il1I1L1; public $Il1I11I; public $debug; public $timeLimit; public $Il1I11l; public $Il1I11L; public $domain; function CMS_Updater($Il1I1Ll, &$Core, &$db, $IIl1llL=false, $sql2=false){ $this->Il1I1Ll =$Il1I1Ll; $this->_patchSignature =""; $this->db =&$db; $this->Core =&$Core; $this->Il1I1L1 =$IIl1llL; $this->Il1I11I =$sql2; $this->Il1lLLI =array(); $this->debug =false; $this->timeLimit =25; $this->Il1I11l =Array(); $this->Il1I11L =false; $aUrl =parse_url($GLOBALS["ROOT_PATH_WWW"]); $this->domain =$aUrl[I2443]; }function TTl1I1I() {if($this->_patchSignature == "") {$this->_patchSignature =$this->Il1I1Ll." (patched: ".date("Y-m-d h:i:s").")"; }return $this->_patchSignature; }function TTl1I1l() {if(!$this->Il1I11L) {$sql =I2444; $this->query($sql); while($this->db->next_record()) {$this->Il1I11l[] =$this->db->Record[0]; }$this->Il1I11L =true; }}function query($sql,$force=true) {$Il1I111 =$force ?DBC_RAW_QUERY :0; $this->db->query($sql,$Il1I111); }function log($msg,$level='NOTE') {echo sprintf("%s [%s]: %s\n",date("Y-m-d h:i:s"),$level,$msg); flush(); }function TTl1I11($file,&$Il1lIII) {$this->log("runSQLScript($file)"); if(!file_exists($file)) {$Il1lIII ="SQL file $file not found"; return false; }$sqlstr =file_get_contents($file); $this->TTl1lTT($sqlstr,$Il1lIII); return true; }function TTl1lTT(&$sqlstr,&$Il1lIII) {if(empty($sqlstr)) {$Il1lIII ="SQL file $file cannot be read or empty"; return false; }$sql =explode("\n", $sqlstr); $this->db->setAttr(I2445,false); for($i=0; $i<sizeof($sql); $i++) {if(preg_match('/^\s*CREATE\s+TABLE/i',$sql[$i])) {$line =preg_replace('/\r?\n/',' ',$sql[$i]); $this->db->TT1lIIT($line,DBC_RAW_QUERY); $this->db->TT1lTIT(); if($this->db->ILlI1Ll){ $this->log('*** SQL Error *** [' .$this->db->ILlI1Ll .I2446 .$this->db->errmsg()); }continue; }$lines =explode("\n",$sql[$i]); $query =''; foreach($lines as $line) {@set_time_limit(29); $line =trim($line); if($line{0}=='#' && $line{1} == '@') {$IlII1Ll =false; $Il1lIIl =I2447.$line." ---\n"; $line =mb_substr($line, 2); if(preg_match("/[^\/]+\/([^\/]+)\/.*/", $line, $IlII1Ll)) {$this->TTl1I1l(); $tmp =false; foreach($this->Il1I11l as $tableName) {if(preg_match("/".$IlII1Ll[1]."/i", $tableName, $tmp)) {$query =str_replace(I2448.$IlII1Ll[1].I2448, $tableName, $line); $Il1lIIl .= $query."\n"; $this->query($query); $query =''; }}}$Il1lIIl .= "--- end REGEXP query ---\n"; $this->log($Il1lIIl); continue; }elseif($line{0}=='#' || ($line{0}==I2449 && $line{1}==I2449)) {continue; }$query .= " $line"; }if(trim($query) != "") {$this->query($query, DBC_TRUSTED_QUERY); $this->db->TT1lTIT(); if($this->db->ILlI1Ll){ $this->log('*** SQL Error *** [' .$this->db->ILlI1Ll .I2446 .$this->db->errmsg()); }}}return true; }function update(){ set_time_limit($this->timeLimit); $Il1lIII =""; $this->log('Running beforeUpdate()'); if(!$this->TTl1lTI($Il1lIII)){ $this->TTl1lT1($Il1lIII); return false; }if($this->Il1I1L1!==false && !$this->TTl1I11($this->Il1I1L1,$Il1lIII)){ $this->TTl1lT1($Il1lIII); return false; }$this->log(I2450); if(!$this->TTl1lTl($Il1lIII)){ $this->TTl1lT1($Il1lIII); return false; }if($this->Il1I11I!==false && !$this->TTl1I11($this->Il1I11I,$Il1lIII)){ $this->TTl1lT1($Il1lIII); return false; }$this->log('Running afterUpdate()'); if(!$this->afterUpdate($Il1lIII)){ $this->TTl1lT1($Il1lIII); return false; }$this->TTl1lIT(); return true; }function TTl1lTI(&$Il1lIII){ set_time_limit($this->timeLimit); $this->log('Default beforeUpdate(): NOOP'); $Il1lIII =""; return true; }function TTl1lTl(&$Il1lIII){ set_time_limit($this->timeLimit); $this->log('Default doUpdate(): NOOP'); $Il1lIII =I2451; return true; }function afterUpdate(&$Il1lIII){ set_time_limit($this->timeLimit); $this->log('Default afterUpdate(): NOOP'); $Il1lIII =I2451; return true; }function TTl1lT1($errMsg){ print "500 ERROR $errMsg\n"; flush(); die(); }function TTl1lIT($Il1lIIL =I2451){ }function TTl1lII($Il1lII1) {if(isset($GLOBALS["Il1lIlI"])) {$GLOBALS["Il1lIll"] += $Il1lII1; }else {$GLOBALS["Il1lIll"] =$Il1lII1; }}}class CMS_LocalLangsUpdater extends CMS_Updater {public $rootPath; public $Il1lIlL; public $Il1lIl1; public $Il1lILI; public $Il1lILl; public $Il1lILL; public $gui; public $Il1lIL1; public $IILlllL; public $CRLF =I2452; public $Il1lII1; public $Il1lI1I; function CMS_LocalLangsUpdater($Il1I1Ll, &$Core, &$gui, $Il1lIl1, $IIIIlIL, $Il1lIlL =I2451) {$db =null; parent::CMS_Updater($Il1I1Ll, $Core, $db, false, false); $this->Il1lIl1 =$Il1lIl1; $this->rootPath =$GLOBALS["ROOT_PATH"]; $this->Il1lIlL =$Il1lIlL; $this->Il1lILL =$IIIIlIL; $this->gui =&$gui; $this->TTl1lIl(); }function TTl1lIl() {$this->Il1lII1 =0; $this->Il1lI1I =0; }function TTl1lTI(&$Il1lIII){ $res =parent::TTl1lTI($Il1lIII); if($res) {if (!class_exists('template')) {require_once $GLOBALS['CLASSES_PATH'] .'template.php'; }$this->Il1lIL1 =new template(); $this->IILlllL =$this->Core->GetAOption(I2453); }return $res; }function TTl1lTl(&$Il1lIII){ $res =parent::TTl1lTl($Il1lIII); if($res) {$this->log("RUN LOCAL LANG UPDATER\n-----------------------"); foreach($this->Il1lILL as $Il1lI1l) {$this->Il1lILl =$this->Il1lIlL.$Il1lI1l; $this->Il1lILI =$this->Il1lIl1.$Il1lI1l; if(!$this->TTl1lll($Il1lIII)) {$res =false; break; }}$log ="END LOCAL LANG UPDATER [".$this->domain."] - ".$this->Il1lI1I." patched"; if($this->Il1lII1 >0) {$log .= ", ".$this->Il1lII1.I2454; $this->TTl1lII($this->Il1lII1); }$log .= "\n"; $this->log($log); }return $res; }function TTl1lI1(&$fileContent) {$Il1lI1L =false; $Il1lI11 =false; $Il1lI1L =99999; foreach($this->IILlllL as $lang) {$IIlLILI =mb_strpos($fileContent, "%".$lang."%%"); if($IIlLILI !== false) {$Il1lI1L =min($Il1lI1L, $IIlLILI); $Il1lI11 =true; }}return ($Il1lI11) ?$Il1lI1L :false; }function TTl1llT(&$fileContent) {$aFiles =Array(); $Il1lI1L =$this->TTl1lI1($fileContent); if($Il1lI1L !== false) {$header =mb_substr($fileContent, 0, $Il1lI1L); $aHeaders =explode("%%", $header); unset($aHeaders[sizeof($aHeaders) -1]); }else {$header =$fileContent; $aHeaders =explode(I2455, $header); }$Il1llII =sizeof($aHeaders); if($Il1llII >0) {for($i =0; $i <$Il1llII; $i++) {$header =mb_strtolower(trim($aHeaders[$i])); if(mb_strpos($header, "include_language") !== false) {$fileName =mb_substr($header, 16); $aFiles[$fileName] =$aHeaders[$i]; }}}return $aFiles; }function TTl1llI($path, $msg, $isError =false) {$log =I2451; if($isError) {$this->Il1lII1++; $log ="[ERROR]: "; }$log .= $msg." [ ".$this->rootPath.$path." ]"; $this->log($log); }function TTl1lll(&$Il1lIII) {$dir =@opendir($this->Il1lILI); if($dir) {while($fileName=readdir($dir)) {set_time_limit($this->timeLimit); if(is_file($this->Il1lILI.$fileName)) {if(mb_strtolower(mb_substr($fileName, -4)) == I2456) {$Il1llIl =Array(); $Il1llIL =Array(); $Il1llI1 =@file_get_contents($this->Il1lILI.$fileName); if($Il1llI1 !== false) {$files =$this->gui->TITlI1I($fileName, $this->Il1lILl); foreach ($files as $path) {$path =$this->Il1lILl.$path; $Il1lllI =$this->gui->_readFromFile($path); if($Il1lllI !== false) {$Il1llll =Array(); $Il1lllL =Array(); $Il1lll1 =I2451; $Il1llLI =$this->TTl1llT($Il1lllI); $Il1llLl =$this->TTl1llT($Il1llI1); $Il1llLL =sizeof($Il1llLI); $Il1llL1 =sizeof($Il1llLl); if($Il1llLL >0 && $Il1llL1 >0) {$Il1ll1I =array_keys($Il1llLl); $Il1ll1l =array_keys($Il1llLI); $Il1ll1L =array_diff($Il1ll1I, $Il1ll1l); if(sizeof($Il1ll1L) >0) {$Il1ll11 =Array(); $Il1lLII =0; $Il1lLIl =0; foreach($Il1ll1L as $fileName) {$Il1lLII =array_search($fileName, $Il1ll1I); if($Il1lLII >0) {$Il1lLIL =$Il1ll1I[$Il1lLII -1]; $Il1lLI1 =array_search($Il1lLIL, $Il1ll1l); if($Il1lLI1 !== false) {for($i =$Il1lLIl; $i <= $Il1lLI1; $i++) {$Il1ll11[] =I2455.$Il1llLI[$Il1ll1l[$i]].I2455.$this->CRLF; ;}$Il1lLIl =$Il1lLI1 +1; }}$Il1ll11[] ="##--".$this->TTl1I1I()."--##".$this->CRLF.I2455.$Il1llLl[$fileName].I2455.$this->CRLF."##-- end ".$this->TTl1I1I()."--##".$this->CRLF; }for($i =$Il1lLIl; $i <$Il1llLL; $i++) {$Il1ll11[] =I2455.$Il1llLI[$Il1ll1l[$i]].I2455.$this->CRLF; }$Il1lll1 =implode(I2451, $Il1ll11); }}elseif($Il1llLL == 0) {if($Il1llL1 >0) {$Il1lll1 =I2457.$this->TTl1I1I()."--##".$this->CRLF.I2455.implode(I2455.$this->CRLF.I2455, $Il1llLl).I2455.$this->CRLF."##-- end ".$this->TTl1I1I()."--##".$this->CRLF; }}foreach($this->IILlllL as $lang) {$Il1llIl =Array(); $Il1llIL =Array(); $this->Il1lIL1->setLang($lang); $this->Il1lIL1->parseLangText($Il1llI1, $Il1llIl); $this->Il1lIL1->parseLangText($Il1lllI, $Il1llIL); $Il1llll =array_diff(array_keys($Il1llIl), array_keys($Il1llIL)); foreach($Il1llll as $Il1lLlI) {if(!isset($Il1lllL[$Il1lLlI])) {$Il1lllL[$Il1lLlI] =I2451; }$Il1lllL[$Il1lLlI] .= I2455.$Il1lLlI."%".$lang.I2455.$this->CRLF.$Il1llIl[$Il1lLlI].$this->CRLF; }}$Il1lLll =I2451; if(sizeof($Il1lllL) >0) {$Il1lLll =$this->CRLF.$this->CRLF.I2457.$this->TTl1I1I().I2458.$this->CRLF; $Il1lLll .= implode($this->CRLF, $Il1lllL); $Il1lLll .= "##-- end ".$this->TTl1I1I().I2458.$this->CRLF; }if($Il1lll1 != I2451 || $Il1lLll != I2451) {if($Il1lll1 == I2451) {$Il1llI1 =$Il1lllI.$Il1lLll; }else {$Il1lI1L =$this->TTl1lI1($Il1lllI); if($Il1lI1L === false) {$Il1lllI =I2451; }else {$Il1lLlL =mb_substr($Il1lllI ,0, $Il1lI1L); $aTmp =explode(I2455, $Il1lLlL); $Il1lLl1 =$aTmp[sizeof($aTmp) -1]; $Il1lllI =I2455.$Il1lLl1.mb_substr($Il1lllI, $Il1lI1L); unset($aTmp); }$Il1llI1 =$Il1lll1."\n".$Il1lllI.$Il1lLll; }if($this->gui->_saveFile($path, $Il1llI1, 0, FALSE)) {$this->TTl1llI($path, "patched", false); $this->Il1lI1I++; }else {$this->TTl1llI($path, "file write error", true); }}}else {$this->TTl1llI($path, I2459, true); }}}else {$this->TTl1llI($this->Il1lILI.$fileName, I2459, true); }}}}closedir($dir); }else {if(is_dir($this->Il1lILI)) {$this->TTl1llI($this->Il1lILI, "can't open directory", true); }}return true; }}class CMS_LocalTplsUpdater extends CMS_Updater {public $Il1lLLI; public $Il1lLLl; public $rootPath; public $Il1lIlL; public $Il1lLLL; public $Il1lLL1; public $Il1lILl; public $Il1lILI; public $Il1lL1I; public $Il1lL1l; public $Il1lL1L; public $Il1lL11; public $gui; public $Il1lII1; public $Il1lI1I; public $CRLF =I2452; function CMS_LocalTplsUpdater($Il1I1Ll, &$Core, &$gui, $Il1lLLL, $IIIIlIL, $Il1lIlL =I2451) {$db =null; parent::CMS_Updater($Il1I1Ll, $Core, $db, false, false); $this->aTplComments =Array(); $this->rootPath =$GLOBALS["ROOT_PATH"]; $this->Il1lIlL =$Il1lIlL; $this->Il1lLLL =$Il1lLLL; $this->Il1lLL1 =$IIIIlIL; $this->Il1lILl =I2451; $this->Il1lL1I =I2451; $this->Il1lL1L =I2451; $this->Il1lL11 =I2451; $this->gui =&$gui; $this->gui->cacheState(false); $this->TTl1lIl(); }function TTl1lIl() {$this->Il1lII1 =0; $this->Il1lI1I =0; }function TTl1lTl(&$Il1lIII){ $res =parent::TTl1lTl($Il1lIII); if($this->debug) {$this->Il1lL1L ="++"; $this->Il1lL11 ="++"; }else {$this->Il1lL1L =I2457; $this->Il1lL11 =I2458; }if($res) {$this->log("RUN LOCAL TEMPLATES UPDATER\n-----------------------"); foreach($this->Il1lLL1 as $Il1l1II) {$this->Il1lILl =$this->Il1lIlL.$Il1l1II; $this->Il1lL1I =$this->Il1lLLL.$Il1l1II; if(!$this->TTl11IT($Il1lIII)) {$res =false; break; }}$log ="END LOCAL TEMPLATES UPDATER [".$this->domain."] - ".$this->Il1lI1I." patched"; if($this->Il1lII1 >0) {$log .= ", ".$this->Il1lII1.I2454; $this->TTl1lII($this->Il1lII1); }$log .= I2460; $this->log($log); }return $res; }function TTl1ll1($fileName) {$this->aTplComments[$fileName] =Array(); $this->TTl1l1T($fileName, $this->Il1lLLI[$fileName]["content"], false); }function TTl1l1T($fileName, &$content, $Il1l1Il =true) {$num =preg_match_all('/##--.*?--##[\\r]?[\\n]?/s', $content, $matches, PREG_PATTERN_ORDER); if($num >0) {$Il1l1IL =sizeof($this->aTplComments[$fileName]); $k =$Il1l1IL; for($i =0; $i <$num; $i++) {if(!($Il1l1Il && preg_match('/##--\d*--##/', $matches[0][$i]))) {$this->aTplComments[$fileName][] =$matches[0][$i]; $content =str_replace($matches[0][$i], I2457.$k++.I2458, $content); }}}}function TTl1l1I($fileName, $Il1l1I1 =true){ $num =sizeof($this->aTplComments[$fileName]); for($i =$num-1; $i >= 0; $i--) {$this->Il1lLLI[$fileName]["content"] =str_replace(I2457.$i.I2458, $this->aTplComments[$fileName][$i], $this->Il1lLLI[$fileName][I2461]); }if($Il1l1I1){ unset($this->aTplComments[$fileName]); }}function TTl1l1l($Il1l1lI =I2451, $Il1l1ll ='') {$res =I2451; if (preg_match('/<!--#set\s+var="'.preg_quote($Il1l1ll).'((|(.*?;))'.$Il1l1lI.'((;.*?)|))"\s+value/si', $this->Il1lLLI[$this->Il1lL1l][I2461], $matches)) {$res =$matches[1]; }return $res; }function TTl1I1I($Il1l1lL =I2462) {$res =I2451; if($this->debug) {$res ="cmdnum: ".$Il1l1lL." "; }$res .= parent::TTl1I1I(); return $res; }function TTl1l11($Il1l1lL, &$content, $Il1l1l1 =true) {if($Il1l1l1) {$this->TTl1l1T($this->Il1lL1l, $content); }$Il1l1LI =$this->Il1lL1L.$this->TTl1I1I($Il1l1lL).$this->Il1lL11; $Il1l1Ll =$this->Il1lL1L." end ".$this->TTl1I1I($Il1l1lL).$this->Il1lL11; $content =$Il1l1LI.$content.$Il1l1Ll; }function TTl11TT($aCmd, &$aFiles) {$siteId =isset($GLOBAL['MULTI_SITE_ID']) ?intval($GLOBAL[I2463]) :0; if (isset($aCmd['variables'])) {extract($aCmd['variables']); }$Il1l1LL =isset($aCmd['startup_code']) ?eval($aCmd['startup_code']) :true; if ($Il1l1LL) {$sql ="SELECT `sb_data` FROM `cms_pages` WHERE " .($siteId ?"`id_site` = " .$siteId .' AND ' :'') ."`sb_data` LIKE '%" .$aCmd[I2464] ."%'"; if (!is_object($this->db)) {$this->db =&$GLOBALS['db']; }$rs =&$this->db->select($sql); while (list ($options) =$rs->nextRecord(MYSQL_NUM)) {$options =@unserialize($options); if (is_array($options)) {if (eval($aCmd['iteration_code'])) {break; }}}}if (isset($aCmd['final_code'])) {$Il1l1LL =eval($aCmd[I2465]); }}function TTl11TI($Il1l1lL, &$aChangesCmd) {$res =I2451; $aCmd =$aChangesCmd[$Il1l1lL]; $command =$aCmd["cmd"]; $Il1l1ll =isset($aCmd["prefix"]) ?$aCmd["prefix"] .':' :I2466; if(is_array($aCmd["set"])) {$aSets =$aCmd["set"]; }else {$aSets =Array($aCmd["set"]); }$searchStr =$aCmd["search"]; if(is_array($aCmd[I2467])) {foreach($aCmd[I2467] as $idx => $str) {$IIL1lLl[$idx] =$aCmd[I2467][$idx]; $this->TTl1l11($Il1l1lL, $IIL1lLl[$idx]); }}else {$IIL1lLl =$aCmd[I2467]; $this->TTl1l11($Il1l1lL, $IIL1lLl); }foreach($aSets as $set) {set_time_limit($this->timeLimit); switch ($command) {case "AddAfter": $template =$this->Il1lLLI[$this->Il1lL1l][I2461]; $pos =mb_strpos($template, "<!--#set var="); if ($pos !== false) {$template =mb_substr($template, 0, $pos) .$IIL1lLl .mb_substr($template, $pos); }$this->Il1lLLI[$this->Il1lL1l][I2461] =$template; break; case "AddAfterInSet": $setContent =$this->TTl11I1($set, $Il1l1ll); if(!is_array($searchStr)) {$searchStr =Array($searchStr); }$Il1l1L1 =false; $Il1l11I =false; foreach($searchStr as $idx => $str) {$Il1l11l =is_array($aCmd["search_mode"]) ?$aCmd[I2468][$idx] :$aCmd[I2468]; $Il1l11L =mb_strpos($Il1l11l, "_regexp"); if($Il1l11L !== false) {$Il1l111 =mb_substr($Il1l11l, 0, $Il1l11L); $Il1LIII =intval(mb_substr($Il1l11l, $Il1l11L +7)); $Il1l11l ="all_regexp"; }if(mb_strpos($Il1l11l, "regexp") === 0) {$Il1LIII =intval(mb_substr($Il1l11l, 6)); $Il1l11l ="regexp"; }switch($Il1l11l) {case I2469: break; case "regexp": if(preg_match($str, $setContent, $matches)) {$Il1LIIl =$str; $str =$matches[$Il1LIII]; }break; case "all_regexp": $aMatches =Array(); $Il1LIIL =preg_match_all($str, $setContent, $aMatches, PREG_SET_ORDER); if($Il1LIIL >0) {if($Il1l111 == "last") {$Il1l111 =sizeof($aMatches) -1; }else {$Il1l111 =intval($Il1l111); }$str =$aMatches[$Il1l111][$Il1LIII]; }unset($aMatches); break; case "add_to_end": $Il1LII1 =$setContent.$IIL1lLl; $Il1l11I =true; $Il1l1L1 =true; break; case I2470: $Il1LII1 =$IIL1lLl.$setContent; $Il1l11I =true; break; }if(!$Il1l11I) {if($str != I2451) {$pos =mb_strpos($setContent, $str); if ($pos !== false) {$Il1l1L1 =true; $Il1LIlI =$idx; break; }}}}if(!$Il1l11I) {if($Il1l1L1) {$Il1LIll =mb_strlen($str); if(isset($aCmd["mode"]) && $aCmd["mode"] == "replace") {$Il1LIlL =0; }else {$Il1LIlL =$Il1LIll; }if ($Il1l11l == "regexp" && isset($aCmd[I2471]) && $aCmd[I2471] == "preg_replace") {$Il1LIl1 =is_array($aCmd[I2467]) ?$aCmd[I2467][$Il1LIlI] :$aCmd[I2467]; $this->TTl1l11($Il1l1lL, $Il1LIl1, false); $Il1LII1 =preg_replace($Il1LIIl, $Il1LIl1, $setContent, empty($aCmd['limit']) ?-1 :$aCmd['limit']); $this->TTl1l1T($this->Il1lL1l, $Il1LII1); }else {$Il1LILI =is_array($IIL1lLl) ?$IIL1lLl[$Il1LIlI] :$IIL1lLl; $Il1LII1 =mb_substr($setContent, 0, $pos +$Il1LIlL) .$Il1LILI .mb_substr($setContent, $pos +$Il1LIll); }$Il1l11I =true; if (isset($aCmd["onSuccess"]) && isset($aCmd[I2472])) {$Il1LILl =(array)$aCmd["onSuccess"]; $Il1LILL =(array)$aCmd[I2472]; foreach ($Il1LILl as $index => $Il1LIL1) {$data =$Il1LILL[$index]; switch($Il1LIL1) {case "eval": eval($data); break; }}}}else if (isset($aCmd["fail_action"])) {$Il1LI1I =(array)$aCmd["fail_action"]; $Il1LI1l =(array)$aCmd[I2473]; foreach ($Il1LI1I as $index => $Il1LI1L) {$data =$Il1LI1l[$index]; switch($Il1LI1L) {case "add_to_end": $this->TTl1l11($Il1l1lL, $data); $Il1LII1 =$setContent.$data; $Il1l11I =true; break; case "ignore": $Il1l11I =false; break; case "replace": $this->TTl1l11($Il1l1lL, $data); $Il1LII1 =$data; $Il1l11I =true; break; case "eval": eval($data); break; }}}}if($Il1l11I) {$this->TTl11lT($set, $Il1LII1, $Il1l1ll); }break; case I2474: $IILI1IL =$this->TTl11I1($set, $Il1l1ll, true); if (!empty($IILI1IL)) {$Il1LI11 =$IILI1IL.$this->CRLF.$IIL1lLl; $this->Il1lLLI[$this->Il1lL1l][I2461] =str_replace($IILI1IL, $Il1LI11, $this->Il1lLLI[$this->Il1lL1l][I2461]); }break; case "AddBeforeSet": $Il1LlII =$this->TTl1l1l($set); $IILI1IL =$this->TTl11I1($set, $Il1l1ll, true); if (!empty($IILI1IL)) {$Il1LI11 =$IIL1lLl .$this->CRLF .$IILI1IL; $this->Il1lLLI[$this->Il1lL1l][I2461] =str_replace($IILI1IL, $Il1LI11, $this->Il1lLLI[$this->Il1lL1l][I2461]); }break; case "AddToStart": $IILI1IL =$this->TTl11I1($set, $Il1l1ll); if (!empty($IILI1IL)) {$Il1LI11 =$IIL1lLl .$IILI1IL; $this->Il1lLLI[$this->Il1lL1l][I2461] =str_replace($IILI1IL, $Il1LI11, $this->Il1lLLI[$this->Il1lL1l][I2461]); }break; case "AddToEnd": if (!empty($set)) {$IILI1IL =$this->TTl11I1($set, $Il1l1ll); if (!empty($IILI1IL)) {$Il1LI11 =$IILI1IL .$IIL1lLl; $this->Il1lLLI[$this->Il1lL1l][I2461] =str_replace($IILI1IL, $Il1LI11, $this->Il1lLLI[$this->Il1lL1l][I2461]); }}else {$this->Il1lLLI[$this->Il1lL1l][I2461] .= $IIL1lLl; }break; case "Replace": $this->TTl111l($set, $Il1l1ll, $searchStr, $IIL1lLl, isset($aCmd[I2475]) ?$aCmd[I2475] :I2466); break; case "RegReplace": if (!empty($set)) {$IILI1IL =$this->TTl11I1($set, $Il1l1ll); if (!empty($IILI1IL)) {$Il1LI11 =str_replace($searchStr, $IIL1lLl, $IILI1IL); $this->Il1lLLI[$this->Il1lL1l][I2461] =str_replace($IILI1IL, $Il1LI11, $this->Il1lLLI[$this->Il1lL1l][I2461]); }}break; case "RenameSet": $Il1LlII =$this->TTl1l1l($searchStr, $Il1l1ll); $IIL1lLl =$aCmd[I2467]; if (!empty($Il1LlII)) {switch ($aCmd[I2471]) {case "force": $this->Il1lLLI[$this->Il1lL1l][I2461] =preg_replace('/<!--#set var="'.preg_quote($Il1l1ll).I2476.$searchStr.'(;(.*?))?" value/si', '<!--#set var="'.$Il1l1ll.$IIL1lLl.'" value', $this->Il1lLLI[$this->Il1lL1l][I2461]); break; case "add": $aSets =explode(I2477, $Il1LlII); $Il1LlIl =empty($IIL1lLl) ?I2466 :';'.$IIL1lLl; if (!in_array($IIL1lLl, $aSets)) {$this->Il1lLLI[$this->Il1lL1l][I2461] =preg_replace('/<!--#set var="'.preg_quote($Il1l1ll).'((|(.*?;))'.$searchStr.'((;.*?)|))" value/si', $s =I2478.$Il1l1ll.'\\1'.$Il1LlIl.'" value', $this->Il1lLLI[$this->Il1lL1l][I2461]); }break; }}break; case "DeleteEmptyNamedSets": $Il1LlIL =isset($aCmd["allPrefixes"]) && $aCmd[I2479] ?"([^\:]+:)?" :preg_quote($Il1l1ll); $this->Il1lLLI[$this->Il1lL1l][I2461] =preg_replace( Array ('/<!--#set var="'.$Il1LlIL.';+(.+)" value/si', '/<!--#set var="'.$Il1LlIL.'([^;^"]+);+" value/si', '/<!--#set var="'.$Il1LlIL.';*" value=".*?"-->/si' ),Array (I2478.$Il1LlIL.'\\1" value', I2478.$Il1LlIL.'\\1" value', I2466 ),$this->Il1lLLI[$this->Il1lL1l][I2461] );break; case I2480: if (!empty($set)) {$res =$this->TTl11I1($set, $Il1l1ll); }break; case "Eval": eval($aCmd["code"]); break; case "ThroughReplace": $Il1l11l =$aCmd[I2468]; $this->TTl11T1($aCmd); $Il1LlI1 =$aCmd[I2473]; $this->TTl1l11($Il1l1lL, $Il1LlI1); $this->TTl11Tl($Il1l1lL, $aCmd[I2468], $aCmd[I2471], $aCmd["fail_action"], $aCmd[I2481], isset($aCmd["pureReplace"]) ?$aCmd["pureReplace"] :$IIL1lLl, $Il1LlI1, $this->Il1lLLI[$this->Il1lL1l][I2461], $this->Il1lLLI[$this->Il1lL1l][I2461]); break; case "CopySet": if (isset($aCmd["targetName"]) && !empty($aCmd[I2482]) && !empty($set) ){$Il1LlII =$this->TTl1l1l($set, $Il1l1ll); if (empty($Il1LlII)) {break; }$IILI1IL =$this->TTl11I1($set, $Il1l1ll, true); $Il1LI11 =$this->TTl11I1($set, $Il1l1ll, false); $this->TTl1l11($Il1l1lL, $Il1LI11); $Il1LI11 =$IILI1IL.$this->CRLF.$this->CRLF. I2478.$aCmd[I2482].'" value="'.$Il1LI11.'"-->'. $this->CRLF; $this->Il1lLLI[$this->Il1lL1l][I2461] =str_replace($IILI1IL, $Il1LI11, $this->Il1lLLI[$this->Il1lL1l][I2461]); }break; case "DeleteSet": $IILI1IL =$this->TTl11I1($set, $Il1l1ll, true); $this->Il1lLLI[$this->Il1lL1l][I2461] =str_replace($IILI1IL, I2451, $this->Il1lLLI[$this->Il1lL1l][I2461]); break; case 'templateAddToStart': $IILI1IL =$this->TTl11I1($set, $Il1l1ll, true); $this->Il1lLLI[$this->Il1lL1l][I2483] =$IIL1lLl .$this->Il1lLLI[$this->Il1lL1l][I2483]; break; }}return $res; }function TTl11Tl($Il1l1lL, $Il1l11l, $Il1LllI, $Il1LI1L, $Il1Llll, $Il1LllL, $Il1Lll1, &$content, &$newContent) {$Il1l1L1 =false; $Il1l11I =false; if(!is_array($Il1Llll)) {$Il1Llll =Array($Il1Llll); }foreach($Il1Llll as $idx => $searchStr) {if ($Il1l11l == "preg_replace") {$Il1LlLI =is_array($Il1LllL) ?$Il1LllL[$idx] :$Il1LllL; if (preg_match($searchStr, $content)) {$newContent =preg_replace($searchStr, $Il1LlLI, $content); $Il1LlLl =true; }continue; }$Il1l11L =mb_strpos($Il1l11l, "_regexp"); if($Il1l11L !== false) {$Il1l111 =mb_substr($Il1l11l, 0, $Il1l11L); $Il1LIII =intval(mb_substr($Il1l11l, $Il1l11L +7)); $Il1l11l ="all_regexp"; }if(mb_strpos($Il1l11l, "regexp") === 0) {$Il1LIII =intval(mb_substr($Il1l11l, 6)); $Il1l11l =I2484; }switch($Il1l11l) {case I2469: break; case I2484: if(preg_match($searchStr, $content, $matches)) {$searchStr =$matches[$Il1LIII]; }break; case "all_regexp": $aMatches =Array(); $Il1LIIL =preg_match_all($searchStr, $content, $aMatches, PREG_SET_ORDER); if($Il1LIIL >0) {if($Il1l111 == "last") {$Il1l111 =sizeof($aMatches) -1; }else {$Il1l111 =intval($Il1l111); }$searchStr =$aMatches[$Il1l111][$Il1LIII]; }unset($aMatches); break; case "add_to_end": $newContent =$content.(is_array($Il1LllL) ?$Il1LllL[$idx] :$Il1LllL); $Il1l11I =true; $Il1l1L1 =true; break; case I2470: $newContent =(is_array($Il1LllL) ?$Il1LllL[$idx] :$Il1LllL).$content; $Il1l11I =true; break; }if(!$Il1l11I) {$pos =mb_strpos($content, $searchStr); if ($pos !== false) {$Il1l1L1 =true; $Il1LIlI =$idx; break; }}}if(!$Il1l11I) {if($Il1l1L1) {$Il1LIll =mb_strlen($searchStr); if($Il1LllI == "replace") {$Il1LIlL =0; }else {$Il1LIlL =$Il1LIll; }$Il1LILI =is_array($Il1LllL) ?$Il1LllL[$Il1LIlI] :$Il1LllL; $newContent =mb_substr($content, 0, $pos +$Il1LIlL) .$Il1LILI .mb_substr($content, $pos +$Il1LIll); $Il1l11I =true; }else {switch($Il1LI1L) {case I2485: $newContent =$setContent.$Il1Lll1; $Il1l11I =true; break; case "ignore": $Il1l11I =false; break; }}}return $Il1l11I; }function TTl11T1(&$aCmd) {if(!isset($aCmd["set"])) {$aCmd["set"] =I2451; }if(!isset($aCmd[I2468])) {$aCmd[I2468] =I2469; }if(!isset($aCmd[I2471])) {$aCmd[I2471] ="add"; }if(!isset($aCmd[I2486])) {$aCmd[I2486] ="ignore"; }}function TTl1llI($path, $msg, $isError =false) {$log =I2451; if($isError) {$this->Il1lII1++; $log ="[ERROR]: "; }$log .= $msg." [ ".$this->rootPath.$path." ]"; $this->log($log); }function TTl11IT(&$Il1lIII) {$dir =@opendir($this->Il1lL1I); if($dir) {while($fileName=readdir($dir)) {set_time_limit($this->timeLimit); if(is_file($this->Il1lL1I.$fileName)) {if(mb_strtolower(mb_substr($fileName, -12)) == I2487) {$Il1LlLL =@file_get_contents($this->Il1lL1I.$fileName); if($Il1LlLL !== false) {if(@eval($Il1LlLL) !== false) {$tplFileName =mb_substr($fileName, 0, -12).'.tpl'; if(sizeof($aChangesCmd) >0) {$files =$this->gui->TITlI1I($tplFileName, $this->Il1lILl); if (!empty($aChangesCmd[0]['complex_cmd'])) {$this->TTl11TT($aChangesCmd[0], $files); unset($aChangesCmd[0]); }foreach ($files as $this->Il1lL1l) {$this->Il1lL1l =$this->Il1lILl.$this->Il1lL1l; if($this->TTl11II($this->Il1lL1l, $Il1lIII) !== false) {foreach($aChangesCmd as $Il1l1lL => $aCmd) {$res =$this->TTl11TI($Il1l1lL, $aChangesCmd); $aChangesCmd[$Il1l1lL]["command_result"] =$res; }if($this->TTl11lI($this->Il1lL1l)) {$this->TTl1llI($this->Il1lL1l, "patched"); $this->Il1lI1I++; }else {$this->TTl1llI($this->Il1lL1l, "destination file write error"); break; }}else {$this->TTl1llI($this->Il1lL1l, "can't read destination file", true); }}}}else {$this->TTl1llI($this->Il1lL1I.$fileName, "cmd file parse error", true); }}else {$this->TTl1llI($this->Il1lL1I.$fileName, "can't read cmd file", true); }}}}closedir($dir); }else {if($this->Il1lILI && is_dir($this->Il1lILI)){ $this->TTl1llI($this->Il1lL1I, "can't open directory", true); }}return true ;}function TTl11II($path, &$Il1lIII){ $res =true; if(!isset($this->Il1lLLI[$path])){ $this->Il1lLLI[$path][I2461] =$this->gui->_readFromFile($path); if($this->Il1lLLI[$path][I2461] === false) {unset($this->Il1lLLI[$path][I2461]); $res =false; }else {$this->TTl1ll1($path); }}return $res; }function TTl11Il($Il1LlL1, $Il1l1lI =I2451, $Il1Ll1I =0){ $ret =false; $Il1Ll1l =&$this->Il1lLLI[$Il1LlL1][I2461]; if(empty($Il1l1lI)){ $ret =$Il1Ll1l; }else if($Il1l1lI == I2488){ $ret =preg_replace('/<!--#set var=".*?"-->/si', I2451, $Il1Ll1l); }else{ if(preg_match('/<!--#set var="([^"]*?;)?'.$Il1l1lI.'(;[^"]*?)?"\s*?value="(.*?)"-->/si', $Il1Ll1l, $matches)) $ret =$matches[3]; }if($Il1Ll1I){ $ret =preg_replace('/##--.*?--##/si', I2451, $ret); }return $ret; }function TTl11I1($Il1l1lI, $Il1l1ll =I2466, $Il1Ll1L =false) {$res =false; if($Il1l1lI == I2488) {$res =preg_replace('/<!--#set var=".*?"-->/si', I2451, $this->Il1lLLI[$this->Il1lL1l][I2461]); }elseif($Il1l1lI != I2451) {if(preg_match('/<!--#set var="'.preg_quote($Il1l1ll).'([^"]*?;)?' .preg_quote($Il1l1lI, '/') .'(;[^"]*?)?"\s*?value="(.*?)"-->/si', $this->Il1lLLI[$this->Il1lL1l][I2461], $matches)) {if($Il1Ll1L) {$res =$matches[0]; }else {$res =$matches[3]; }}}return $res; }function TTl11lT($Il1l1lI, $setContent, $Il1l1ll =I2466) {$Il1Ll11 =$this->TTl11I1($Il1l1lI, $Il1l1ll, true); $pos =$Il1Ll11 !== false ?mb_strpos($this->Il1lLLI[$this->Il1lL1l][I2461], $Il1Ll11) :false; $res =false; if($pos !== false) {$res =true; $Il1LlII =$this->TTl1l1l($Il1l1lI, $Il1l1ll); $Il1LLII =mb_strlen($Il1Ll11); $this->Il1lLLI[$this->Il1lL1l][I2461] =mb_substr($this->Il1lLLI[$this->Il1lL1l][I2461], 0, $pos).I2489.$Il1LlII."\" value=\"".$setContent."\"-->".mb_substr($this->Il1lLLI[$this->Il1lL1l][I2461], $pos +$Il1LLII); }return $res; }function TTl11lI($Il1LlL1, $cContent =false){ $res =false; if($cContent === false && isset($this->Il1lLLI[$Il1LlL1])){ $this->TTl1l1I($Il1LlL1); $cContent =$this->Il1lLLI[$Il1LlL1][I2461]; }if($cContent !== false) {$res =$this->gui->_saveFile($Il1LlL1, $cContent); }return $res; }function TTl11ll(){ $success =true; foreach($this->Il1lLLI as $tpl => $arr){ $success =$this->TTl11lI($tpl, $arr[I2461]) &$success; }return $success; }function TTl11l1($Il1LlL1, $Il1l1lI, $cContent, $Il1LLIl ="down"){ $tmp =null; if($this->TTl11II($Il1LlL1, $tmp)){ $Il1LLIL =I2451; if(empty($Il1l1lI)){ $Il1LLIL =&$this->Il1lLLI[$Il1LlL1][I2461]; }else{ if(preg_match('/<!--#set var="([^"]*?;)?'.$Il1l1lI.'(;[^"]*?)?"\s*?value="(.*?)"-->/si', $this->Il1lLLI[$Il1LlL1][I2461], $matches)){ $Il1LLIL =$matches[3]; }}switch($Il1LLIl){ case "up": $Il1LLIL =$cContent.$Il1LLIL; break; default: $Il1LLIL .= $cContent; break; }if(!empty($Il1l1lI)){ $this->Il1lLLI[$Il1LlL1][I2461] =preg_replace('/(<!--#set var="([^"]*?;)?'.$Il1l1lI.'(;[^"]*?)?"\s*?value=")(.*?)("-->)/si', '\\1'.$Il1LLIL.I2490, $this->Il1lLLI[$Il1LlL1][I2461]); }return true; }return false; }function TTl111T($Il1LlL1, $Il1l1lI, $Il1LLI1, $Il1LLlI){ if($this->_readTemplate($Il1LlL1)){ $Il1LLIL =I2451; if(empty($Il1l1lI)) $Il1LLIL =&$this->Il1lLLI[$Il1LlL1][I2461]; else{ if(preg_match('/<!--#set var="([^"]*?;)?'.$Il1l1lI.'(;[^"]*?)?"\s*?value="(.*?)"-->/si', $this->Il1lLLI[$Il1LlL1][I2461], $matches)){ $Il1LLIL =$matches[3]; }}$Il1LLIL =preg_replace('/'.quotemeta($Il1LLI1).'/si', $Il1LLlI, $Il1LLIL); if(!empty($Il1l1lI)) $this->Il1lLLI[$Il1LlL1][I2461] =preg_replace('/(<!--#set var="([^"]*?;)?'.$Il1l1lI.'(;[^"]*?)?"\s*?value=")(.*?)("-->)/si', '\\1'.$Il1LLIL.I2490, $this->Il1lLLI[$Il1LlL1][I2461]); return true; }return false; }function TTl111I($Il1LlL1, $Il1LLll, $Il1LLlL){ if($this->_readTemplate($Il1LlL1)){ $this->Il1lLLI[$Il1LlL1][I2461] =preg_replace('/(<!--#set var="([^"]*?;)?)'.$Il1LLll.'((;[^"]*?)?"\s*?value=".*?"-->)/si', I2491.$Il1LLlL.'\\3', $this->Il1lLLI[$Il1LlL1][I2461]); return true; }return false; }function TTl111l($set, $Il1l1ll, $searchStr, $IIL1lLl, $mode) {if (empty($set)) {return; }$IILI1IL =$this->TTl11I1($set, $Il1l1ll); $this->TTl1l1T($this->Il1lL1l, $IIL1lLl); if ($mode == "force") {$this->Il1lLLI[$this->Il1lL1l][I2461] =preg_replace( '/<!--#set var="'.preg_quote($Il1l1ll).'([^"]*?;)?'.$set.'(;[^"]*?)?"\s*?value="(.*?)"-->/si', I2478.$Il1l1ll.I2491.$set.'\\2" value="'.$IIL1lLl.'"-->', $this->Il1lLLI[$this->Il1lL1l][I2461] );return; }if (!empty($IILI1IL)) {$Il1LI11 =str_replace($searchStr, $IIL1lLl, $IILI1IL); $this->Il1lLLI[$this->Il1lL1l][I2461] =str_replace($IILI1IL, $Il1LI11, $this->Il1lLLI[$this->Il1lL1l][I2461]); }}function TTl1111(&$content) {$content =preg_replace( array ("'\r\n's", "'\r's", I2492), array (I2460, I2460, $this->CRLF), $content );}}class CMS_SkelUpdater extends CMS_Updater {public $Il1LLl1; public $Il1LLLI; function CMS_SkelUpdater($Il1I1Ll, &$Core, $Il1LLl1) {$db =null; parent::CMS_Updater($Il1I1Ll, $Core, $db, false, false); $this->Il1LLl1 =$Il1LLl1; }function TT1TTTT($Il1I1Ll, &$Core, &$gui, $Il1lIl1, $IIIIlIL, $Il1lIlL =I2451) {$this->Il1LLLI =new CMS_LocalLangsUpdater($Il1I1Ll, $Core, $gui, $Il1lIl1, $IIIIlIL, $Il1lIlL); }function TT1TTTI($Il1I1Ll, &$Core, &$gui, $Il1lLLL, $IIIIlIL, $Il1lIlL =I2451) {$this->Il1LLLI =new CMS_LocalTplsUpdater($Il1I1Ll, $Core, $gui, $Il1lLLL, $IIIIlIL, $Il1lIlL); }function TT1TTTl($className, $Il1I1Ll, &$Core, &$gui, $Il1lLLL, $IIIIlIL, $Il1lIlL =I2451) {if(class_exists($className)) {$this->Il1LLLI =new $className($Il1I1Ll, $Core, $gui, $Il1lLLL, $IIIIlIL, $Il1lIlL); }else {trigger_error("createCMS_CustomUpdater: class '".$className."' not exists",E_USER_ERROR); }}function TTl1lTl(&$Il1lIII){ $res =parent::TTl1lTl($Il1lIII); foreach($this->Il1LLl1 as $path => $aPathData) {$this->Il1lLL1 =Array(); if($aPathData["is_root"]) {$this->log("UPDATE SUBPATH: ".$path."\n-----------------------"); $this->Il1LLLI->Il1lIlL =$path; $this->Il1LLLI->update(); }else {$dir =@opendir($this->rootPath.$path); if($dir) {while($Il1LLLl=readdir($dir)) {if(is_dir ($this->rootPath.$path.$Il1LLLl) && $Il1LLLl != "." && $Il1LLLl != "..") {$this->Il1LLLI->TTl1lIl(); $this->log("UPDATE SUBPATH: ".$path.$Il1LLLl."\n-----------------------"); $this->Il1LLLI->Il1lIlL =$path.$Il1LLLl.I2448; $this->Il1LLLI->update(); }}}}}return $res; }}class CMS_LocalFilesCleaner extends CMS_Updater {public $rootPath; public $Il1lIlL; public $aFileTypes; public $Il1LLLL; public $Il1LLL1; public $gui; function CMS_LocalFilesCleaner($Il1I1Ll, &$Core, &$gui, $Il1LLLL, $Il1lIlL =I2451) {$db =null; parent::CMS_Updater($Il1I1Ll, $Core, $db, false, false); $this->Il1LLLL =$Il1LLLL; $this->Il1lIlL =$Il1lIlL; $this->rootPath =$GLOBALS[I2493]; $this->aFileTypes =Array("tpl", "lng"); $this->Il1LLL1 =0; $this->gui =&$gui; }function TTl1lTl(&$Il1lIII){ $res =parent::TTl1lTl($Il1lIII); if($res) {$this->log("RUN LOCAL FILES CLEANER\n-----------------------"); foreach($this->Il1LLLL as $dir) {$this->TT1TTT1($this->rootPath.$this->Il1lIlL.$dir); }$this->log("DB CLEANER:\n"); $log =I2451; $this->Il1LLL1 += $this->gui->TITllTI($log, false); $this->Il1LLL1 += $this->gui->TITllTI($log, true); $this->log($log); $this->log("END LOCAL FILES CLEANER - ".$this->Il1LLL1." cleared\n"); }return $res; }function TT1TTT1($dir) {if(is_dir($dir)) {$Il1LL1I =@opendir($dir); if($Il1LL1I) {while($Il1LL1l=readdir($Il1LL1I)) {set_time_limit($this->timeLimit); if(is_file($dir.$Il1LL1l)) {$Il1LL1L =mb_strtolower(mb_substr($Il1LL1l, -3)); if(in_array($Il1LL1L, $this->aFileTypes)) {$fileContent =@file_get_contents($dir.$Il1LL1l); $fileSize =mb_strlen($fileContent); $fileContent =preg_replace('/(.*?)##--[^#]*?\(patched:[^#]*?--##/si', "\\1", $fileContent); if(mb_strlen($fileContent)!= $fileSize) {$fp =@fopen($dir.$Il1LL1l, "w"); if($fp) {$res =@fwrite($fp, $fileContent, mb_strlen($fileContent) +100); if($res) {$Il1lIIl =I2494.$dir.$Il1LL1l." ]"; $this->Il1LLL1++; }else {$Il1lIIl ="[ERROR]: write error [ ".$dir.$Il1LL1l." ]"; }@fclose($fp); $this->log($Il1lIIl); }}}}elseif(is_dir($dir.$Il1LL1l) && $Il1LL1l != "." && $Il1LL1l != I2495) {$this->TT1TTT1($dir.$Il1LL1l.I2448); }}}}}}class CMS_LocalFilesCopier extends CMS_Updater {public $rootPath; public $Il1lIlL; public $Il1lIl1; public $Il1LL11; public $Il1L1II; public $gui; public $aErrors; public $Il1L1Il; function CMS_LocalFilesCopier($Il1I1Ll, &$Core, &$db, &$gui, $Il1lIl1, $Il1lIlL =I2451) {parent::CMS_Updater($Il1I1Ll, $Core, $db, false, false); $this->rootPath =$GLOBALS[I2493]; $this->Il1lIlL =$Il1lIlL; $this->Il1lIl1 =$Il1lIl1; $this->Il1LL11 =Array(); $this->Il1L1II ="backup".$Il1I1Ll; $this->gui =&$gui; $this->aErrors =Array("create_dir" => 0, "create_dir_error" => 0, "dir_not_exists" => 0, I2496 => 0, "files_skipped" => 0, "files_copied" => 0, "files_rewrited" => 0, "files_error" => 0); $this->Il1L1Il =false; }function addCopyCmd($from, $to, $withSubdirs, $createDirIfNotExists, $rewriteFileIfExists, $backupFileStore, $Il1L1IL) {if(!$Il1L1IL) {$from =$this->Il1lIl1.$from; $to =$this->Il1lIlL.$to; }$aCmd =Array( I2497 => $from, "to" => $to, "withSubdirs" => $withSubdirs, "createDirIfNotExists" => $createDirIfNotExists, "rewriteFileIfExists" => $rewriteFileIfExists, I2498 => $backupFileStore );$this->Il1LL11[] =$aCmd; }function update($Il1L1I1 =false) {$this->Il1L1Il =$Il1L1I1; return parent::update(); }function TTl1lTl(&$Il1lIII){ $res =parent::TTl1lTl($Il1lIII); $Il1L1lI =$this->Il1L1Il ?' (commands only)': I2466; if($res) {$this->log("RUN LOCAL FILES COPIER" .$Il1L1lI ."\n-----------------------"); $withSubdirs =true; $createDirIfNotExists =true; $rewriteFileIfExists =false; $backupFileStore =false; if (!$this->Il1L1Il) {$res =$this->TT1TTIT($this->Il1lIl1, $this->Il1lIlL, $withSubdirs, $createDirIfNotExists, $rewriteFileIfExists, $backupFileStore, $Il1lIII); }foreach($this->Il1LL11 as $aCmd) {set_time_limit($this->timeLimit); $res =$res && $this->TT1TTIT($aCmd[I2497], $aCmd["to"], $aCmd[I2499], $aCmd["createDirIfNotExists"], $aCmd["rewriteFileIfExists"], $aCmd[I2498], $Il1lIII); }$Il1L1ll =$this->aErrors["dir_not_exists"] +$this->aErrors[I2496] +$this->aErrors["create_dir_error"] +$this->aErrors[I2500]; $log ="\n-----------------------\nDirs created: ".$this->aErrors["create_dir"]."\nFiles copied: ".$this->aErrors["files_copied"].I2501.$this->aErrors["files_rewrited"]."\nFiles skipped: ".$this->aErrors["files_skipped"]."\n\nErrors:\n-------\nDestination directories not exist: ".$this->aErrors[I2502]."\nSource directories(files) not exist: ".$this->aErrors[I2496]."\nDirectories create errors: ".$this->aErrors["create_dir_error"]."\nFiles error: ".$this->aErrors[I2500].I2460; if($Il1L1ll >0) {$Il1L1lL= $Il1L1ll.I2454; $this->TTl1lII($Il1L1ll); }else {$Il1L1lL= I2503; }$this->log($log."\nEND LOCAL FILES COPIER" .$Il1L1lI ." [".$this->domain."] - ".$Il1L1lL.I2460); }return $res; }function TTl1llI($res, $Il1L1l1, $Il1L1LI) {$action =I2451; $not =I2451; $error =I2451; $Il1L1Ll =I2451; if($res &1) {$this->aErrors["files_skipped"]++; $action =I2504; }else {if($res &2) {$action ="rewrited"; }else {$action ="copied"; }if($res &4) {$this->aErrors[I2500]++; $not ="can't be "; $error ="[ERROR]: "; }else {$this->aErrors[I2505.$action]++; }if($res &8) {$Il1L1Ll =" backup file was created"; }}$log =$error.$not.mb_strtoupper($action)." from [ ".$Il1L1l1." ] to [ ".$Il1L1LI." ]".$Il1L1Ll; $this->log($log); }function TT1TTIT($Il1L1LL, $Il1L1L1, $withSubdirs, $createDirIfNotExists, $rewriteFileIfExists, $backupFileStore, &$Il1lIII, $II111Ll =0) {set_time_limit($this->timeLimit); if($II111Ll == 0) {$Il1lIII =I2451; }$Il1L11I =$Il1L1L1; $Il1L1L1 =$this->rootPath.$Il1L1L1; if(is_file($Il1L1LL)) {if(!is_dir($Il1L1L1)) {$Il1L11l =pathinfo($Il1L11I); $Il1L11I =$Il1L11l[I2506].I2448; $Il1L11L =$Il1L11l["basename"]; }else {$Il1L1LL =str_replace("\\", I2448, $Il1L1LL); $aTmp =explode(I2448, $Il1L1LL); $Il1L11L =$aTmp[sizeof($aTmp) -1]; }$Il1L111 =pathinfo($Il1L1LL); $Il1L1LL =$Il1L111[I2506].I2448; $res =$this->gui->TITllTT($this->db, $Il1L1LL, $Il1L11I, $Il1L11L, $this->Il1L1II, $backupFileStore, $rewriteFileIfExists); $this->TTl1llI($res, $Il1L1LL.$Il1L11L, $this->rootPath.$Il1L11I.$Il1L11L); }elseif(is_dir($Il1L1LL)) {$dir =@opendir($Il1L1LL); if($dir) {if(is_dir($Il1L1L1)) {$Il11III =true; }else {if($createDirIfNotExists && $II111Ll >0) {$Il11IIl =mb_substr($Il1L1L1, 0, mb_strlen($Il1L1L1)-1); $res =@mkdir($Il11IIl, 0777, true); @chmod($Il11IIl,0777); if($res) {$Il11III =true; $this->log("Directory created [ ".$Il11IIl." ]"); $this->aErrors[I2507]++; }else {$Il11III =false; $this->log("[ERROR]: Directory can't be created [ ".$Il11IIl." ]"); $this->aErrors["create_dir_error"]++; }}else {$this->log("[ERROR]: Destination directory  not exists [ ".$Il1L1L1.I2508); $this->aErrors[I2502]++; }}if($Il11III) {$IIIIlIL =Array(); while($Il1LL1l=readdir($dir)) {if($Il1LL1l != I2495 && $Il1LL1l != ".") {if(is_dir($Il1L1LL.$Il1LL1l)) {$IIIIlIL[] =$Il1LL1l; }else {$res =$this->gui->TITllTT($this->db, $Il1L1LL, $Il1L11I, $Il1LL1l, $this->Il1L1II, $backupFileStore, $rewriteFileIfExists); $this->TTl1llI($res, $Il1L1LL.$Il1LL1l, $this->rootPath.$Il1L11I.$Il1LL1l); }}}if($withSubdirs) {foreach($IIIIlIL as $dirName) {$this->TT1TTIT($Il1L1LL.$dirName.I2448, $Il1L11I.$dirName.I2448, $withSubdirs, $createDirIfNotExists, $rewriteFileIfExists, $backupFileStore, $Il1lIII, $II111Ll +1); }}}}else {$this->log("[ERROR]: Can't open source directory [ ".$Il1L1LL.I2508); $this->aErrors[I2496]++; }}else {$this->aErrors[I2496]++; $this->log("[ERROR]: Can't open source [ ".$Il1L1LL.I2508); }return ($Il1lIII == I2451); }}class CMS_CustomizationScanner extends CMS_Updater {public $Il11IIL; function CMS_CustomizationScanner($Il1I1Ll, &$Core, $Il11IIL) {$db =null; parent::CMS_Updater($Il1I1Ll, $Core, $db, false, false); $this->Il11IIL =$Il11IIL; }function TTl1lTl(&$Il1lIII) {$res =parent::TTl1lTl($Il1lIII); if (!$res) {return $res; }$this->log("RUN CUSTOMIZATION SCANNER"); foreach ($this->Il11IIL as $params) {extract($params); if (!isset($mask)) {$Il1lIII ="Missing mask in parameters"; return false; }if (!isset($regexps)) {$Il1lIII ="Missing regexps in parameters"; return false; }$Il11II1 =pathinfo($mask); if (!isset($Il11II1[I2506])) {$Il1lIII ="Missing dirname in mask"; return false; }$path =$Il11II1[I2506]; $Il11IlI =isset($Il11II1["basename"]) ?I2448 .str_replace(array ('\*', I2509), array ('.*', '.'), preg_quote($Il11II1["basename"])) .I2448 :"/.+/"; $Il11Ill =isset($regexps) ?(is_array($regexps) ?$regexps :(array)$regexps) :null; $this->TT1TTII($path, $Il11IlI, $Il11Ill, isset($recursive) ?$recursive :false); }$this->log("END CUSTOMIZATION SCANNER\n"); return $res; }function TT1TTII($path, $Il11IlI, $Il11Ill, $recursive =true) {if (!is_dir($path)) {return; }if (!is_readable($path) || !($dh =@opendir($path))) {$this->log(sprintf("CUSTOMIZATION SCANNER: Unable to open directory '%s'", $path)); return; }while (false !== ($file =readdir($dh))) {if (in_array($file, array (".", I2495))) {continue; }if (is_dir($newPath =$path .I2448 .$file)) {if ($recursive) {$this->TT1TTII($newPath, $Il11IlI, $Il11Ill); }}else {if (preg_match($Il11IlI, $file)) {if (false === ($content =@file_get_contents($newPath))) {$this->log(sprintf("CUSTOMIZATION SCANNER: Unable to open file '%s'", $newPath)); continue; }foreach ($Il11Ill as $regExp) {if (preg_match($regExp, $content)) {$this->log(sprintf("CUSTOMIZATION SCANNER: file '%s' matches '%s'", $newPath, $regExp), I2510); }}}}}closedir($dh); }}