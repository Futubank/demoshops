<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       77605 xkqwnzqplytyntriugwxkttwrpqmtsrxplwuiwpgtynzpsprkzruqrxilsxtwlurzlkrpnir
 */ ?><?php  if(!defined('AMI_ENVIRONMENT')){header(I2650);die(I2651.__FILE__.I2652.__LINE__);} require_once $GLOBALS[I2653] .I2654; class CMS_Cache extends CMS_CacheLite {public $MonitorDB; public $ILIIIIl; public $ILIIIIL; public $ILIIII1; public $ILIIIlI; public $ILIIIll; public $ILIIIlL; public $ILIIIl1; public $ILIIILI; public $ILIIILl; public $ILIIILL; public $ILIIIL1; public $ILIII1I; public $ILIII1l; public $ILIII1L; public $StorageLimit; public $ILIII11; public $_Headers; public $ILIIlII; public $conn; public $Core; public $ILIIlIl; public $ILIIlIL; public $ILIIlI1; public $_IsIgnoreClearCmd; public $ILIIllI; public $ILIIlll; public $pageIsComplitedForSave; public $ILIIllL; public $ILIIll1; public $ILIIlLI; public $PageId; public $ILIIlLl; public $ILIIlLL; public $ILIIlL1; public $ILIIl1I; public $ILIIl1l; public $IIllIlL; private $ILIIl1L =array(); function CMS_Cache(&$Core) {parent::CMS_CacheLite(); if (I2655 != $GLOBALS[I2656]) {$GLOBALS[I2657][I2658] =I2659; }$this->Core =&$Core; $this->conn =false; $this->MonitorDB =true; $this->ILIIIIl =true; $this->ILIIIIL =false; $this->ILIIII1 =I2660; $this->ILIIIlI =I2660; $this->ILIIIll =array(); $this->ILIIIlL =I2660; $this->ILIIIl1 =I2661; $this->ILIIILL =I2662; $this->ILIIIL1 =0.02; $this->ILIIlLL =0.05; $this->ILIII1I =I2663; $this->ILIII1l =Array(I2664 => 2, I2665 => 8); $this->ILIII1L =I2666; $this->StorageLimit =0; $this->ILIII11 =10; $this->ILIIILI =date($this->ILI1LLI, strtotime($this->ILIIIl1)); $this->ILIIILl =date($this->ILI1LLI, strtotime($this->ILIIILL)); $this->_Headers =false; $this->ILIIlII =true; $this->_IsIgnoreClearCmd =false; $this->ILIIllI =Array(); if ($this->ILI1LIl == I2667) {$this->MonitorDB =true; }$this->ILIIlll =I2668; $this->ILIIlIl =Array(); $this->ILIIlI1 =I2660; $this->pageIsComplitedForSave =true; $this->ILIIllL =Array(); $this->ILIIlIL =Array(); $this->ILIIll1 =Array(); $this->ILIIlLI =0; $this->PageId =0; $this->ILIIlLl =Array(); $this->ILIIlL1 =false; $this->ILIIl1I =true; $this->ILIIl1l =Array(); $this->IIllIlL =Array(); return true; }public function TT1TIlT($ILIIl11){ if(I2669 == $ILIIl11){ $this->MonitorDB =FALSE; }}function Init( $ILIILII =I2670, $ILIILIl =TRUE, $ILIILIL =0, $ILIILI1 =I2671, array $aOptions =NULL ){if(is_object($this->ILI1ILL)){ $this->TT1IIlI($this->ILI1ILL); $this->ILI1ILL =NULL; }else{ parent::Init($ILIILII, $ILIILIl, $ILIILIL, $ILIILI1, $aOptions); }if ($this->Core->Side == I2672) {$this->TT1IIl1(); }if (!isset($this->options[I2673]) || !is_array($this->options[I2673])) {$this->options[I2673] =Array(); $this->ILIIl1I =false; }if (!isset($this->options[I2674])) {$this->options[I2674] =true; }$this->IIllIlL =$this->options; if ($this->IssetOption(I2675) && $this->GetOption(I2675)) {AMI_Event::addHandler(I2676, array($this, I2677), AMI_Event::MOD_ANY); }return true; }function TT1TIlI($aSpecBlocks) {$this->options[I2673] =$aSpecBlocks; }function TT1TIll() {$this->ClearCacheNow(); return false; }function Start() {if ($this->Enabled && $this->ILI1LLL) {parent::Start(); }}function TT1TIl1() {if ($this->ILIIl1I) {$res =parent::TT1TIl1(); }else {$res =false; }return $res; }function SetLang($cLang) {$this->lang =$cLang; return true; }function SetPageId($Ill11lL) {$this->PageId =$Ill11lL; return true; }function TT1TI1T($key, $ILIILlI) {$this->options[I2678][I2679][$key] =$ILIILlI; }function TT1TI1I($ILIILll, $enable) {if ($enable) {unset($this->options[I2678][I2680][$ILIILll]); }else {$this->options[I2678][I2680][$ILIILll] =1; unset($this->ILIL1Il[$ILIILll]); }}function TT1TI1l($key, $ILIILlL, $blockName =I2660) {if ($blockName == I2660) {$blockName =$this->ILIL1I1; }$this->ILIIll1[$blockName][$key] =$ILIILlL; }function TT1TI11() {if (!isset($this->ILIIll1[$this->ILIL1I1])) {$this->ILIIll1[$this->ILIL1I1] =Array(); }foreach ($this->ILIIll1 as $blockName => $ILIILl1) {$this->TT1TlTT($blockName); }}function TT1TlTT($blockName) {if (is_array($this->ILIIll1[$blockName]) && sizeof($this->ILIIll1[$blockName]) >0) {$this->ILIIllL[$blockName] =I2660 .TlTIIlT(serialize($this->ILIIll1[$blockName] +$this->ILIIll1[$this->ILIL1I1])); }else {$this->ILIIllL[$blockName] =I2660; }}function TT1TlTI(&$IlL1IIl, $key =null) {if (is_array($IlL1IIl)) {if (is_null($key)) {$this->ExtraPageData =$IlL1IIl; }else {if (isset($this->ExtraPageData[$key])) {unset($this->ExtraPageData[$key]); }$this->TT1II1I($IlL1IIl); }}}function &TT1TlTl($key =I2660) {if ($key == I2660) {$res =&$this->ExtraPageData; }else {$res =&$this->ExtraPageData[$key]; }return $res; }function GetLang() {return $this->lang; }function TT1TlT1($aNames, $ILIILLI =false) {$res =true; $this->ILIIIlI =I2660; if (is_array($aNames)) {$this->ILILL11 =true; $ILIILLl =array_keys($this->options[I2673]); if ($ILIILLI) {$aTmp =TT1TlIl($aNames, $ILIILLl, I2681); $this->ILIIIlI =$aTmp[I2682]; $this->ILIIII1 =array_intersect($aNames, array_keys($aTmp[I2683])); }else {$this->ILIIIlI =TT1TlIl($aNames, $ILIILLl, I2682); $this->ILIIII1 =$aNames; }}else {trigger_error("CACHE: Invalid parameter: [$aNames]...", E_USER_WARNING); $res =false; $this->ILILL11 =false; }return $res; }function TT1TlIT($ILIILLL) {$res =true; if (!is_array($ILIILLL)) {trigger_error("CACHE: ERROR: Invalid parameter: [$ILIILLL]...", E_USER_WARNING); $res =false; }$this->ILIIIll =$ILIILLL; return $res; }function TT1TlII() {if ($this->ILILL11) {return $this->ILIIII1; }else {return I2660; }}function TT1TlIl($ILIILL1 =I2660) {$res =I2660; if ($this->ILILL11) {$ILIIL1I =array_keys($this->ILIIIlI); if ($ILIILL1 != I2660) {$ILIIL1I =str_replace($ILIILL1, I2660, $ILIIL1I); }$res =I2684 .implode(I2684, $ILIIL1I); if (mb_strlen($res) >255) {trigger_error(I2685 .mb_strlen($res) .I2686); }}return $res; }function TT1TlI1($cName) {$res =$this->ILIIIl1; }function TT1TllT($IllLI1I) {$res =false; if (!empty($IllLI1I)) {$IllLI1l =strtotime($IllLI1I); if ($IllLI1l >0) {$this->ILIIIl1 =$IllLI1I; $this->ILIIILI =date($this->ILI1LLI, strtotime($this->ILIIIl1)); $res =true; }}return $res; }function TT1TllI($cSize) {$cSize =mb_strtolower($cSize); $this->ILIII1L =I2687; $vSize =intval($cSize); if ($vSize <= 0) {$this->ILIII1L =I2666; $this->StorageLimit =0; }else {$this->StorageLimit =$vSize; }return true; }function TT1Tlll() {return $this->ILIIIl1; }function TT1Tll1($ILIIL1l) {if (!empty($ILIIL1l) && strtotime($ILIIL1l) >0 && (strtotime($ILIIL1l) <strtotime($this->ILIIIl1))) {$this->TT1TllT($ILIIL1l); }return true; }function TT1Tl1T() {$this->ILIIIIl =false; return true; }function TT1Tl1I() {return true; }function TT1Tl1l($blockName) {$this->ILIIlLl[$blockName] =true; }function TT1Tl11() {return $this->Enabled; }function TT1T1TT() {return ($this->Enabled && $this->ILILL1l); }function ClearCacheNow() {if (!empty($this->ILI1IlI)) {$IlIl11I =I2660; if (!empty($this->lang)) {$IlIl11I =I2688 .$this->lang .I2689; }$aQueries =$this->ILIIl1L; $this->ILIIl1L =array(); $ILIIL1L =I2690 .$this->ILI1LlL .I2691; $ILIIL11 =I2692 .$this->ILI1LlL .I2691; $ILII1II =I2693; $ILII1Il =I2694; $ILII1IL =I2695; $ILII1I1 =I2660; if ($ILII1I1 != I2660) {$ILII1lI =strtotime($ILII1I1); if ($ILII1lI >$ILII1ll) {$ILII1IL =$ILII1I1; }}$ILII1lL =date($this->ILI1LLI, strtotime($ILII1IL)); if ($this->_IsIgnoreClearCmd) {$this->_IsIgnoreClearCmd =false; $aQueries[$ILII1lL][] =I2696; $aQueries[$ILII1lL][] =I2697; if (1 || $this->ILILLL1) {$aQueries[$ILII1lL][] =I2698; }$this->db->query(I2699); $this->Core->DeleteOption(I2700, I2701); $ILII1l1 =$this->options; $this->options =array( I2702 => $this->ILI1LlL, I2675 => isset($ILII1l1[I2675]) ?$ILII1l1[I2675] :0 );$this->saveOptions(); $this->db->query(I2703); $this->options =$ILII1l1; $this->options[I2702] =$this->ILI1LlL; }else {$ILII1LI =str_replace(I2704, I2660, $this->ILIL1I1); $ILII1Ll =I2705 .$ILII1LI .I2706 .$ILII1LI .I2707; $ILII1LL =I2708 .$ILII1LI .I2709; if (isset($this->ILI1IlI[I2710][I2711])) {foreach ($this->ILI1IlI[I2710][I2711] as $expireTime => $ILII1L1) {if (sizeof($ILII1L1) >0) {$ILII11I =$this->TT1T1TI($expireTime, $ILII1lL); $ILII1L1 =str_replace(I2704, I2660, array_keys($ILII1L1)); foreach ($ILII1L1 as $specName) {$ILII11l =I2712 .$specName .I2713 .$specName .I2709; $ILII11L =I2705 .$specName .I2706 .$specName .I2707; $aQueries[$ILII11I][] =I2714 .$ILII11I .I2691 .$ILII11L .I2715 .$ILIIL1L .I2716 .$ILII11I .I2717 .$IlIl11I .$ILII11l .I2718; }$aQueries[$ILII11I][] =I2719 .$ILII11I .I2720 .$ILIIL11 .I2716 .$ILII11I .I2721 .$IlIl11I .I2722 .implode(I2723, $ILII1L1) .I2707; }}}if (isset($this->ILI1IlI[I2710][I2724])) {foreach ($this->ILI1IlI[I2710][I2724] as $expireTime => $aPageIds) {unset($aPageIds[0]); if (sizeof($aPageIds) >0) {$ILII11I =$this->TT1T1TI($expireTime, $ILII1lL); $ILII111 =I2725 .implode(I2723, array_keys($aPageIds)) .I2726; $aQueries[$ILII11I][] =I2714 .$ILII11I .I2691 .$ILII1Ll .I2715 .$ILIIL1L .I2716 .$ILII11I .I2717 .$IlIl11I .$ILII111 .$ILII1LL .I2718; }}}if (isset($this->ILI1IlI[I2727]) && sizeof($this->ILI1IlI[I2727]) >0) {foreach ($this->ILI1IlI[I2727] as $expireTime => $aMods) {$ILIlIII =I2728 .implode(I2723, array_keys($aMods)) .I2726; $ILII11I =$this->TT1T1TI($expireTime, $ILII1lL); $aQueries[$ILII11I][] =I2714 .$ILII11I .I2691 .$ILII1Ll .I2715 .$ILIIL1L .I2716 .$ILII11I .I2717 .$IlIl11I .$ILIlIII .$ILII1LL .I2718; }}if (isset($this->ILI1IlI[I2710][I2729]) && sizeof($this->ILI1IlI[I2710][I2729]) >0) {foreach ($this->ILI1IlI[I2710][I2729] as $expireTime => $aMods) {$ILIlIII =I2730 .implode(I2723, array_keys($aMods)) .I2726; $ILII11I =$this->TT1T1TI($expireTime, $ILII1lL); $aQueries[$ILII11I][] =I2714 .$ILII11I .I2691 .$ILII1Ll .I2715 .$ILIIL1L .$ILIlIII; }}}ksort($aQueries); if (!empty($GLOBALS[I2731]) && sizeof($aQueries) >0) {$GLOBALS[I2732]->TTI11I1(); }foreach ($aQueries as $ILII11I => $aSqls) {foreach ($aSqls as $sql) {$this->db->query($sql); if ($this->Debug) {$this->AddDebug(I2733 .$this->ILI1LlL .I2734 .$this->db->affected_rows() ."</b> $sql"); }}}$this->ILI1IlI =array(); }return true; }function TT1T1TI($expireTime, $ILII1lL) {if ($expireTime >0) {$ILIlII1 =date($this->ILI1LLI, $expireTime); $ILII11I =date($this->ILI1LLI, strtotime(I2695)); if (($ILIlII1 !== -1) && $ILIlII1 >$ILII11I) {$ILII1lL =$ILIlII1; }}return $ILII1lL; }function TT1T1Tl() {$ILIlIlI =I2735 .$this->ILIIILl .I2691; $numRows =$this->TT1ITTI($ILIlIlI); if ($this->Debug && $numRows) {$this->AddDebug(I2736 .$numRows .I2737); }return true; }function TT1T1T1() {$sql =I2738; if ($this->Debug) {$this->AddDebug("<b>CACHE:OPTIMIZING TABLE:</b> $sql"); }$this->db->query($sql); $sql =I2739; $this->db->query($sql); return true; }function TT1T1IT() {$this->TT1IlII(); $ILIlIll =$this->ILIL1L1->TT1T1IT($this->ILIL1lL); $this->ILIIll1 =array_merge_recursive($this->ILIIll1, $ILIlIll); }function TTI11l1() {global $conn; if ($this->ILILL1l) {$this->TT1ITIT($this->pId, I2740); }$aHeaders[] =Array(I2741 => I2742, I2743 => true); if (sizeof($this->ILIL11L) >0) {$ILIlIlL =Array(); foreach ($this->ILIL11L as $ILIlIl1) {$ILIlILI =$GLOBALS[I2744]->TTITlII($ILIlIl1); $ILIlILl =(strncmp(I2745, $ILIlILI, 10) == 0); $ILIlIlL[0][] =str_replace(I2746, quotemeta($ILIlIl1), $this->ILIIlll); $ILIlIlL[1][] =($ILIlILl ?I2747 :I2748) .$ILIlILI .($ILIlILl ?I2747 :I2749); }$this->ILILL1L =preg_replace($ILIlIlL[0], $ILIlIlL[1], $this->ILILL1L); }parent::TTI11l1(); }function TT1T1II($cId) {$ILII11I =date($this->ILI1LLI, strtotime(I2695)); $sql ="update cms_cache set date_expire='$ILII11I', page_errors=page_errors+1 where id='$cId'"; if ($this->Debug) {$this->AddDebug("<b>CACHE:CORRUPTED PAGE FOUND: id=[$cId]</b>"); }$this->db->query($sql); return true; }function SetForceExpireTime($modName, $expireTime, $pageId =0, $ILIlILL =false) {if ($this->Enabled && $expireTime >0) {if ($pageId >0) {$ILIlIL1 =I2750; $ILIlI1I =$pageId; }else {$ILIlIL1 =I2751; $ILIlI1I =$modName; }while (isset($this->ILI1Lll[$ILIlIL1][$expireTime++])); $expireTime--; $this->ILI1Lll[$ILIlIL1][$expireTime] =$ILIlI1I; $this->ILI1IL1 =true; $ILIlI1l =array_keys($this->ILI1Lll[$ILIlIL1]); foreach ($ILIlI1l as $ILIlI1L) {if ($expireTime >$ILIlI1L) {if ($this->ILI1Lll[$ILIlIL1][$ILIlI1L] == $ILIlI1I) {unset($this->ILI1Lll[$ILIlIL1][$ILIlI1L]); }}else {break; }}if (!$ILIlILL && $modName != I2660 && $this->Core->IssetModProperty($modName, I2752)) {$this->ILI1Lll[I2753][$modName] =$this->Core->GetModProperty($modName, I2752); }}}function TT1T1Il() {if (sizeof($this->ILIIlIl) >0) {foreach ($this->ILIIlIl as $specName => $ILIlI11) {$GLOBALS[I2744]->SetSpecialBlock($specName, $ILIlI11, false); }}}function TT1T1I1(&$ILIllII) {$ILIllIl =array_keys($this->options[I2673]); return TT1TlIl($ILIllII, $ILIllIl, I2683); }function TT1T1lT() {$ILIllIL =Array(); if ($this->Enabled) {$ILIllI1 =$this->TT1TlII(); $this->ILIL1ll =sizeof($ILIllI1); $ILIlllI =array_keys($this->ILIL1Il); $ILIllll =TT1TlIl($ILIllI1, $ILIlllI, I2681); $this->ILIIlLI =sizeof($ILIllll[I2683]); if (count($ILIllll[I2682]) >0) {$this->TT1IIlT($ILIllll[I2682], I2754); }if ($this->ILILLL1) {$ILIlllL =array_diff($ILIllI1, $this->ILIL11L); $this->ILIL1lL =$this->TT1T1I1($ILIlllL, array_keys($ILIllll[I2683])); $this->TT1T1IT(); $this->TT1TI11(); $this->TT1T1ll($ILIlllL); $this->TT1T1Il(); $ILIllIL =array_keys($this->ILIIlIl); $this->ILIIIIL =(sizeof($ILIllI1) >sizeof($ILIllIL)); }}return $ILIllIL; }function TT1T1lI($aIds) {if (sizeof($aIds)) {$sql =I2755 .$this->ILI1L1l .I2756 .implode(I2757, $aIds) .I2718; $this->db->query($sql); }return $this->db->affectedRows(); }function TT1T1ll(&$ILIllII) {if ($this->ILILLL1) {$this->ILIIlIl =Array(); $ILIlll1 =$this->Core->GetProperty(I2758, false); if (!is_array($ILIlll1)) {$ILIlll1 =array(); }$ILIllLI =Array(); if (sizeof($ILIllII) >0) {foreach ($ILIllII as $specName) {$hash =I2660; $ILIllLl =$this->options[I2673][$this->ILIL1lL[$specName]][I2727]; if ($ILIllLl == $this->ILI1ILl || (isset($ILIlll1[$this->ILIL1lL[$specName]]) && in_array($this->ILI1ILl, $ILIlll1[$this->ILIL1lL[$specName]]))) {$hash =$this->ILIIllL[$this->ILIL1I1]; }if (isset($this->ILIIllL[$specName])) {$hash =$this->ILIIllL[$specName]; }$ILIllLI[] =I2759 .$specName .I2760 .$hash .I2726; $this->ILIIlIL[$specName] =$hash; }$sql =I2761 .$this->ILI1LlL .I2762 .implode(I2763, $ILIllLI) .I2764 .$this->ILI1II1 .I2765 .$this->lang .I2691; $this->db->query($sql); if ($this->db->num_rows() >0) {$aIds =array(); while ($this->db->next_record()) {$aIds[] =$this->db->Record[I2766]; $specBlockName =$this->db->Record[I2767]; $this->ILIIlIl[$specBlockName] =$this->db->Record[I2768]; unset($this->ILIIlIL[$specBlockName]); unset($this->ILIL1lL[$specBlockName]); }}}}}function TT1T1l1() {if ($this->ILIL1lI) {$ILIllLL =array_diff($this->ILIL1LI, array_merge($this->ILIL1Ll, array_keys($this->ILIL1lL))); if ($this->ILIL11I && !$this->ILIL11l) {$ILIllLL[] =$this->ILIL1I1; }foreach ($ILIllLL as $index => $specName) {$searchStr =I2769 .$specName .I2770; $bPos =mb_strpos($this->ILILL1L, $searchStr); if ($bPos === false) {unset($ILIllLL[$index]); }else {$ePos =mb_strpos($this->ILILL1L, I2771 .$specName .I2772); if ($ePos !== false) {$offset =mb_strlen($searchStr); $bPos += $offset; $this->ILIL111[$specName] =mb_substr($this->ILILL1L, $bPos, $ePos -$bPos); }}}if ($this->ILIL11I && !$this->ILIL11l) {$this->ILIIlI1 =&$this->ILIL111[$this->ILIL1I1]; unset($this->ILIL111[$this->ILIL1I1]); }$this->ILIIllI =array_values($ILIllLL); unset($this->ILILL1L); foreach ($this->ILIIllI as $specName) {$GLOBALS[I2744]->SetSpecialBlock($specName, $this->ILIL111[$specName]); unset($this->ILIL111[$specName]); }}$ILIllL1 =(sizeof($this->ILIL1lL) >0); if ($ILIllL1 || $this->ILIL1LL) {$ILIllII =Array(); if ($ILIllL1) {$ILIllII += array_keys($this->ILIL1lL); }if ($this->ILIL1LL) {$ILIllII += array_diff($this->ILIL1Ll, $this->ILIL11L); }$this->TT1T1ll($ILIllII); }$ILIllII =Array(); if ($ILIllL1) {foreach ($this->ILIL1lL as $ILIlIl1 => $ILIll1I) {if (!isset($this->ILIIlIl[$ILIlIl1])) {$ILIllII[$ILIlIl1] =$this->options[I2673][$ILIll1I][I2727]; }}$this->ILILL1l =true; }if ($this->ILIL1LL) {foreach ($this->ILIL1Ll as $ILIlIl1) {$ILIllII[$ILIlIl1] =$this->ILIL1II[$ILIlIl1]; }if (!$this->ILILL1l) {$this->ILILL1l =(sizeof($this->ILIL1Ll) >sizeof($this->ILIL11L)); }}if ($this->ILILL1l) {$this->TT1TlT1($this->ILIL1LI); }$this->ILIIlL1 =(sizeof($ILIllII) == 0); return $ILIllII; }function TT1T11T(&$ILIllII) {$ILIlIlL =Array(); $ILIll1l =($this->ILILLL1 && sizeof($this->ILIIlIl) >0); if ($this->ILIL1lI) {if ($this->ILILLL1) {$this->TT1T1Il(); }$this->ILILL1l =($this->ILILL1l || (!$this->ILIL11I) || ($this->ILIL11I && !$this->ILIL11l)); }else {foreach ($this->ILIL11L as $specName => $tmp) {unset($ILIllII[$specName]); }$ILIllL1 =(sizeof($ILIllII) >0); if ($ILIllL1) {foreach ($ILIllII as $ILIlIl1 => $vModName) {$ILIlILI =$GLOBALS[I2744]->TTITlIl($ILIlIl1); $ILIlILl =(strncmp(I2745, $ILIlILI, 10) == 0); $ILIlIlL[0][] =str_replace(I2746, quotemeta($ILIlIl1), $this->ILIIlll); $ILIlIlL[1][] =($ILIlILl ?I2747 :I2748) .$ILIlILI .($ILIlILl ?I2747 :I2749); }$this->ILIIIIL =true; }if ($this->ILILLL1 && sizeof($this->ILIIlIl) >0) {foreach ($this->ILIIlIl as $ILIlIl1 => $ILIlI11) {$ILIlIlL[0][] =str_replace(I2746, quotemeta($ILIlIl1), $this->ILIIlll); $ILIlIlL[1][] =I2748 .$ILIlI11 .I2749; }}if ($ILIllL1 || $ILIll1l) {$this->ILILL1L =preg_replace($ILIlIlL[0], $ILIlIlL[1], $this->ILILL1L); }$this->TTI11l1($this->_SavedPage); }}function TT1T11I() {if ($this->ILIIIIL) {$ILIllLI =Array(); $ILIllII =array_keys($this->ILIIlIL); if (sizeof($this->ILIIlIL) >0) {$ILIllIl =$this->TT1T1I1($ILIllII); unset($ILIll1L); foreach ($this->ILIIlIL as $specName => $hash) {$ILIllLI[] =I2759 .$specName .I2760 .$hash .I2726; }$sql =I2773 .implode(I2763, $ILIllLI) .I2764 .$this->ILI1II1 .I2765 .$this->lang .I2691; $this->db->query($sql); $ILIll11 =Array(); while ($this->db->next_record()) {$ILIll11[$this->db->Record[I2774]] =$this->db->Record[I2775]; }foreach ($this->ILIIlIL as $specName => $hash) {if (!isset($this->ILIIlLl[$specName])) {$aSql =Array( I2776 => $this->ILI1LlL, I2777 => $this->ILIIILI, I2778 => $this->ILI1II1, I2768 => addslashes($GLOBALS[I2744]->TTITlIl($specName)) );if (isset($ILIll11[$specName])) {$sql =$this->db->GenUpdateSQL(I2779, $aSql, I2780 .$ILIll11[$specName] .I2691); }else {$aSql[I2781] =$this->ILI1LlL; $aSql[I2782] =str_replace(I2704, I2660, $ILIllIl[$specName]); $aSql[I2774] =$specName; $aSql[I2783] =$this->ILIIlIL[$specName]; $aSql[I2784] =$this->lang; $sql =$this->db->GenInsertSQL(I2779, $aSql); }$this->db->query($sql, DBC_TRUSTED_QUERY); }}}}}function IsCached() {return $this->ILI1III; }function TT1T11l() {return $this->ILIL1lI || !$this->ILIIl1I; }function TT1T111() {return ($this->ILIL1LL || sizeof($this->ILIL1lL) >0); }function TT1ITTT() {if (!$this->IsCached()) {trigger_error(I2785, E_USER_WARNING); }return $this->_SavedPage[I2786]; }function GetPageId() {return $this->PageId; }function SetPageModule($ILIlLII) {$this->ILI1ILl =$ILIlLII; return true; }function TT1ITTI($ILIlIlI) {$sql =I2787 .$ILIlIlI; $rs =$this->db->select($sql); $numRows =$rs->numRows(); if ($numRows) {$aIds =Array(); while ($rs->nextRecord()) {$aIds[] =$rs->Record[I2775]; }$sql =I2788 .implode(I2757, $aIds) .I2718; $this->db->query($sql); $sql =I2789 .implode(I2757, $aIds) .I2718; $this->db->query($sql); $this->ILI11I1 =array_merge($this->ILI11I1, $aIds); }return $numRows; }function TT1ITTl() {if ($this->StorageLimit >0) {$vSize =0; $vRows =0; $ILIlLIl =0; switch ($this->ILIII1L) {case I2687: $aInfo =$this->db->GetTableInfo(I2790); $vRows =$aInfo[I2791]; $vAvgSize =$aInfo[I2792] /1048576; $vSize =intval($vAvgSize *$aInfo[I2791]); $ILIlLIl =0; if ($vAvgSize >0) {$ILIlLIl =intval(($vSize -$this->StorageLimit +$this->StorageLimit *0.2) /($vAvgSize *$this->ILIIlLL /0.05)); $ILIlLIL =intval($aInfo[I2791] *0.4); $ILIlLIl =min($ILIlLIl, $ILIlLIL, 200); }break; }if ($vSize >0 && $ILIlLIl >0) {$ILIlIlI =I2793 .$ILIlLIl; $numRows =$this->TT1ITTI($ILIlIlI); if ($this->Debug && $numRows) {$this->AddDebug(I2794 .$numRows .I2795); }}}return true; }function TT1ITT1($pageUin) {$res =$pageUin; $res[I2796] =addslashes($res[I2796]); return $res; }function TT1ITIT($pId =0, $mode =I2797) {$this->TT1T11I(); $II11LI1 =Array(); $ILIlLI1 =$this->TT1TlII(); if ($mode == I2797) {$ILIlLlI =ob_get_contents(); if ($this->ILIL11I && $this->ILIL11l) {$ILIlIlL =str_replace(I2746, quotemeta($this->ILIL1I1), $this->ILIIlll); $ILIlLlI =preg_replace($ILIlIlL, I2748 .$this->ILIIlI1 .I2749, $ILIlLlI); }else {$this->TT1IIIl($this->ILI1ILl); }}else {$ILIlLlI =&$this->ILILL1L; $II11LI1 =Array( I2798 => I2799, I2800 => I2801 );}foreach ($this->ILI1IIL[I2802] as $index => $_tmp) {if (is_null($this->ILI1IIL[I2802][$index][I2803])) {$this->ILI1IIL[I2802][$index][I2804]($this->ILILL1L); }else $this->ILI1IIL[I2802][$index][I2803]->{$this->ILI1IIL[I2805][$index][I2804]}($this->ILILL1L); }$ILIlLll =mb_strlen($ILIlLlI); $IlLLlll =I2660; if ($this->ILIIlII && is_array($this->_Headers)) {$IlLLlll =addslashes(serialize($this->_Headers)); }$ILIlLlL =array( I2806 => $ILIlLI1, I2807 => &$this->ExtraPageData, I2808 => &$this->ILIL1l1, I2809 => $this->ILIIllL, I2810 => AMI_Registry::get(I2811, TRUE), I2812 => array() );foreach (array(I2813) as $ILIlLl1) {if (AMI_Registry::exists($ILIlLl1)) {$ILIlLlL[I2812][$ILIlLl1] =AMI_Registry::get($ILIlLl1); }}$ILIlLLI =$this->ILIIILI; if (in_array($this->ILI1ILl, $this->ILI1Lll[I2814])) {$ILIlLLI =min($ILIlLLI, date(I2815, array_search($this->ILI1ILl, $this->ILI1Lll[I2814]))); }$ILIlLLl =I2660; if ($this->ILIL11I && $this->ILIL11l) {$ILIlLLl =I2684 .$this->ILIL1I1; }$asql =array( I2776 => $this->ILI1LlL, I2816 => $this->ILI1LlL, I2777 => $ILIlLLI, I2724 => $this->PageId, I2778 => $this->ILI1II1, I2786 => $this->ILI1ILl, I2817 => $this->TT1TlIl(I2704), I2818 => $ILIlLll, I2784 => $this->lang, I2819 => $IlLLlll, I2820 => addslashes(serialize($ILIlLlL)), I2821 => I2822, I2823 => $ILIlLLl, )+$this->pageUin +$II11LI1; $ILIlLLL =($this->pId == 0); $ILIlLL1 =false; if ($this->ILI1Ill) {$pId =$this->pId =$this->ILI1Ill; }if ($this->pId >0) {$sql =$this->db->GenUpdateSQL(I2824, $asql, I2780 .$pId .I2691); $this->db->query($sql, DBC_TRUSTED_QUERY); $ILIlLL1 =$this->db->affectedRows(); if (defined(I2825) && isset($asql[I2826]) && $asql[I2827] == I2828 && preg_match(I2829, $asql[I2826])) {trigger_error(I2830, E_USER_WARNING); }}if ($ILIlLLL && CheckProbability($this->ILIIlLL)) {$this->TT1ITTl(); }if (!$ILIlLL1) {$asql += array(I2781 => $this->ILI1LlL); $sql =$this->db->GenInsertSQL(I2824, $asql); $this->db->query($sql, DBC_TRUSTED_QUERY); $pId =$this->db->lastInsertId(); if (defined(I2825) && isset($asql[I2826]) && $asql[I2827] == I2828 && preg_match(I2829, $asql[I2826])) {trigger_error(I2830, E_USER_WARNING); }}if (($pId >0) && !in_array($pId, $this->ILI11I1)) {$sql =I2831 .$pId .I2832 .addslashes($ILIlLlI) .I2726; $this->db->query($sql, DBC_TRUSTED_QUERY); if (!empty($GLOBALS[I2731]) && $this->ILI1II1 == 0) {$GLOBALS[I2732]->TTI111I($asql, false, $pId, $ILIlLlI); }}return true; }function TT1ITII($aOptions) {$ILIlL1I =Array(I2751 => Array(), I2750 => Array()); if (is_array($aOptions)) {foreach (array(I2751, I2750) as $ILIlIL1) {if (isset($aOptions[$ILIlIL1]) && is_array($aOptions[$ILIlIL1])) {foreach ($aOptions[$ILIlIL1] as $expireTime => $ILIlI1I) {if (!isset($ILIlL1I[$ILIlIL1][$ILIlI1I])) {if ($ILIlIL1 == I2751) {$this->SetForceExpireTime($ILIlI1I, $expireTime, 0, true); }else {$this->SetForceExpireTime(I2660, $expireTime, $ILIlI1I, true); }if ($this->ILI1Ll1 >$expireTime) {$ILIlL1I[$ILIlIL1][$ILIlI1I] =1; }}}}}}}function saveOptions() {if ($this->ILI11II <65000) {$ILIlL1l =$this->ILI11II +1; }else {$ILIlL1l =1; }$options =serialize($this->options); if ($this->IIllIlL != $options) {$res =$this->Core->WriteOption(I2700, I2701, $ILIlL1l, serialize($this->options), I2660, I2833 .$this->ILI11II); if (!$res) {$ILIlL1L =I2834; $sql =I2699; if ($this->db->query($sql)) {$ILIlL1L =I2835; $ILIlL11 =$this->options; if ($this->TT1IIl1()) {$ILIlL1L .= I2835; if (isset($ILIlL11[I2836])) {$ILIlL1L .= I2837 .serialize($ILIlL11[I2838]) .I2839; }$ILIlL1L .= I2840 .serialize($this->ILI1Lll) .I2839; if ($this->ILI1IL1) {$ILIl1II =$this->ILI1Lll; $this->options[I2838] =Array(); $this->ILI1Lll =Array(I2753 => $ILIl1II[I2753]); $this->Enabled =true; if (isset($ILIlL11[I2836])) {$this->TT1ITII($ILIlL11[I2836]); }$this->TT1ITII($ILIl1II); $this->Enabled =false; if (isset($ILIlL11[I2841]) && is_array($ILIlL11[I2841])) {$this->ILI1Lll[I2753] += $ILIlL11[I2753]; }if (isset($this->ILI1Lll[I2814]) && is_array($this->ILI1Lll[I2814])) {ksort($this->ILI1Lll[I2814]); }}$ILIlL1L .= I2842 .serialize($this->ILI1Lll) .I2839; $ILIlL11[I2838] =$this->ILI1Lll; }$this->options =$ILIlL11; $res =$this->Core->WriteOption(I2700, I2701, $ILIlL1l, serialize($this->options)); $ILIlL1L .= I2843; $sql =I2703; $this->db->query($sql); $ILIlL1L .= I2844; }else {}}}}function End() {if (!$this->ILIIIIl) {return false; }if (CheckProbability($this->ILIIIL1)) {$this->TT1T1Tl(); }if ($this->ILI1IL1) {ksort($this->ILI1Lll[I2814]); $this->options[I2838] =$this->ILI1Lll; }$this->ClearCacheNow(); if (!$this->Enabled) {if ($this->Core->Side != I2672) {$this->saveOptions(); }return false; }if (!$this->ILILL1l) {$this->saveOptions(); return false; }$ILIlLll =ob_get_length(); if ($ILIlLll == 0) {$this->saveOptions(); return false; }if ((!$this->pId || $this->ILILL1l) && $this->pageIsComplitedForSave) {$ILIl1Il =true; if (function_exists(I2845)) {$ILIl1Il =CacheSavePageBefore($this, $this->pageUin, $this->pId); }$ILIl1IL =array( I2846 => $this, I2847 => &$this->pageUin, I2848 => &$this->pId, I2849 => FALSE );AMI_Event::fire(I2850, $ILIl1IL, AMI_Event::MOD_ANY); if ($ILIl1IL[I2849] || !empty($ILIl1IL[I2851])) {$ILIl1Il =FALSE; }if ($ILIl1Il) {$this->TT1ITIT($this->pId); }$this->ILILL1l =false; }if (!isset($this->options[I2702])) {$this->options[I2702] =I2695; }$ILIl1I1 =date(I2852); if ((strtotime($this->ILIII1I) >strtotime($this->options[I2702])) && ($ILIl1I1 >= $this->ILIII1l[I2664] && $ILIl1I1 <= $this->ILIII1l[I2665]) && CheckProbability(0.01)) {$this->options[I2702] =$this->ILI1LlL; $this->saveOptions(); $this->TT1T1T1(); }else {$this->saveOptions(); }return true; }function AddDebug($cStr) {$this->ILIIIlL .= $cStr .I2853; return true; }function TT1ITIl() {$ILIl1lI =sizeof($this->ILIL1lL); $ILIl1ll =sizeof($this->ILIIlIl); $log =I2854; if ($this->IsCached()) {if ($this->ILI1IIl) {$log .= I2754; }else {$log .= I2855; }$log =I2856 .$log; $ILIl1lL =sizeof($this->ILIL1Ll); }else {if ($ILIl1ll == 0) {$log =I2857 .$log; }else {$log =I2856 .$log; }$log .= I2858; $ILIl1lL =$this->ILIIlLI; }$log .= I2859 .$this->ILIL1ll .I2860 .$ILIl1lI .I2861 .$this->ILIIlLI .I2862 .$ILIl1lL; $ILIl1l1 =0; if (($ILIl1lI +$ILIl1lL) >0) {$ILIl1l1 =$ILIl1ll /($ILIl1lI +$ILIl1lL) *100; }$log .= I2863 .$ILIl1ll .I2864 .$ILIl1l1; return $log; }function TT1ITI1(&$vMod) {$ILIl1LI =I2660; $ILIl1Ll =I2660; $vModName =$vMod->GetName(); $ILIl1LL =$vModName; $Action =I2865; if ($vMod->IssetAndTrueOption(I2866)) {$vModName =I2710; $ILIl1LI =I2660; }if ($vMod->issetOption(I2867)) {$ILIl1Ll =$vMod->GetOption(I2867); }if ($vMod->issetProperty(I2752)) {$ILIl1L1 =$vMod->GetProperty(I2752); if (!$vMod->issetProperty(I2868) || !($vMod->GetProperty(I2868) == $ILIl1L1)) {$vModName =I2710; $ILIl1LI =$ILIl1L1; }}if ($this->Core->Side == I2869) {if ($vMod->issetProperty(I2870)) {$Action =$vMod->GetProperty(I2870); }switch ($Action) {case I2871: $this->ClearAdd($vModName, 0, I2872, $ILIl1Ll, $ILIl1LI, $ILIl1LL); break; case I2873: break; default: $this->ClearAdd($vModName, 0, I2660, $ILIl1Ll, I2660, $ILIl1LL); break; }}else {$this->ClearAdd($vModName, 0, I2747, $ILIl1Ll, $ILIl1LI, $ILIl1LL); }}function TT1ITlT($IIL1II1, $table, $attr) {if (!$this->MonitorDB) {return; }$table =trim($table, I2874); if (in_array($IIL1II1, Array(I2875, I2876, I2877)) && $table != I2878 && $table != I2879 && $table != I2880 && mb_strpos($attr, I2881) === false ){$oMod =&$this->Core->TTllTIl($table); if (is_object($oMod)) {$this->clearModCache($oMod); }else {$blockName =AMI_Registry::get(I2882 .$table, I2747); if ($blockName != I2747) {$this->expireBlock($blockName, true); }}}}public function expireBlock($blockName, $ILIl11I =false) {foreach (array( I2883 .$blockName .I2691, I2884 .$blockName .I2709 )as $sql) {if ($ILIl11I) {if (empty($this->ILIIl1L[0])) {$this->ILIIl1L[0] =array(); }$this->ILIIl1L[0][] =$sql; }else {$this->db->query($sql); }}}function clearModCache($oMod) {if (is_object($oMod) && $oMod->IsInstalled()) {$vMod =&$oMod; if (count($this->ILI1IlI) <= 0) {$ILIl11l =$this->Core->GetOption(I2885); if (is_array($ILIl11l)) {foreach ($ILIl11l as $ILIl11L) {$ILIl111 =&$this->Core->GetModule($ILIl11L); if (is_object($ILIl111) && ($ILIl111->IsFrontAllowed())) {$this->TT1ITI1($ILIl111); }}}}while (is_object($vMod)) {if ($vMod->IsFrontAllowed()) {$this->TT1ITI1($vMod); }if ($vMod->IssetProperty(I2886)) {foreach ($vMod->TTlTTTI(I2886) as $ILILIII) {$ILILIIl =&$this->Core->GetModule($ILILIII); if (is_object($ILILIIl) && ($ILILIIl->IsFrontAllowed() && !$ILILIIl->issetAndTrueProperty(I2887))) {$this->TT1ITI1($ILILIIl); }}}if ($vMod->TTlIIIl()) {$ILILIIL =&$vMod->GetSubModules(); foreach ($ILILIIL as $ILILII1) {if ($ILILII1->IsFrontAllowed() && !$ILILII1->issetAndTrueProperty(I2887)) {$this->TT1ITI1($ILILII1); }}}$vMod =&$vMod->TTlIIIT(); }}}function TTI1111() {global $show_bench, $bench_time, $_SIDE; $ILILIlI =I2747; if ($this->Debug && $_SIDE != I2672 && $this->ILI1L1I) {$this->ILI1L1I =false; if ($this->IsCached()) {$aSpecBlocks =&$this->ILIL1LI; $ILILIll =I2888; }else {$aSpecBlocks =$this->TT1TlII(); if (!is_array($aSpecBlocks)) {$aSpecBlocks =array(); }$ILILIll =I2889; }$ILILIlL =Array(I2890 => Array(I2891 => I2892, I2893 => I2660, I2894 => I2660), I2895 => Array(I2891 => I2896, I2893 => I2660, I2894 => I2660), I2897 => Array(I2891 => I2898, I2893 => I2899, I2894 => I2900), I2901 => Array(I2891 => I2902, I2893 => I2899, I2894 => I2900), I2903 => Array(I2891 => I2904, I2893 => I2899, I2894 => I2900)); if ($this->ILIL11I) {$ILILIl1 =I2905; if ($this->ILIL1lI) {if ($this->ILIL11l) {$ILILIl1 .= I2906; }else {$ILILIl1 .= I2907; }}}else {$ILILIl1 =I2908; if ($this->ILIL1lI) {$ILILIl1 .= I2907; }}if (!$this->ILIL1lI) {$ILILIl1 .= I2909; }$aInfo =$this->db->GetTableInfo(I2790); $vRows =$aInfo[I2791]; $vAvgSize =$aInfo[I2792] /1048576; $vSize =number_format(($vAvgSize *$aInfo[I2791]), 2, I2910, I2747); $vAvgSize =number_format($vAvgSize *1024, 2, I2910, I2747); $oDB =new DB_si; $sql =I2911; $oDB->query($sql); $oDB->next_record(); $ILILILI =I2912 .I2913 .$vSize .I2914 .($this->StorageLimit >0 ?(I2915 .number_format($vSize /$this->StorageLimit *100, 2, I2910, I2747) .I2916 ):I2660) .I2917 .$vRows .I2918 .$oDB->Record[I2919] .I2915 .($vRows >0 ?number_format($oDB->Record[I2919] /$vRows *100, 2, I2910, I2747) :0) .I2920 .$vAvgSize .I2921 .I2922 .$this->StorageLimit .I2923; $aInfo =$this->db->GetTableInfo(I2779); $vRows =$aInfo[I2791]; $vAvgSize =$aInfo[I2792] /1048576; $vSize =number_format(($vAvgSize *$aInfo[I2791]), 2, I2910, I2747); $vAvgSize =number_format($vAvgSize *1024, 2, I2910, I2747); $oDB =new DB_si; $sql =I2924; $oDB->query($sql); $oDB->next_record(); $ILILILI .= I2925 ." <b>Size (approx.): $vSize" .I2914 .($this->StorageLimit >0 ?(I2915 .number_format($vSize /$this->StorageLimit *100, 2, I2910, I2747) .I2916) :I2660) .I2917 .$vRows .I2918 .$oDB->Record[I2919] .I2915 .($vRows >0 ?number_format($oDB->Record[I2919] /$vRows *100, 2, I2910, I2747) :0) .I2920 .$vAvgSize .I2926; unset($oDB); $ILILILI .= I2927; $ILILILI .= I2928 .$ILILIlL[$ILILIl1][I2891] .I2929 .$ILILIlL[$ILILIl1][I2893] .$ILILIl1 .$ILILIlL[$ILILIl1][I2894] .I2930; $ILILILI .= I2931; $ILILILl =I2932; $ILILILL =0; $ILILIL1 =0; $ILILI1I =0; if (is_array($aSpecBlocks)) {$ILILI1l =array_flip($this->ILIL1Ll); foreach ($aSpecBlocks as $ILILI1L) {$ILILIl1 =I2890; if (isset($this->ILIL1lL[$ILILI1L])) {$ILILIl1 =I2897; $ILILILL++; }if (isset($this->ILIL1II[$ILILI1L])) {if (in_array($ILILI1L, $this->ILIL11L)) {$ILILIl1 =I2903; }elseif (isset($ILILI1l[$ILILI1L])) {$ILILIl1 =I2901; $ILILIL1++; }else {$ILILIl1 =I2895; $ILILI1I++; }}$specBlock =$this->TT1IllT($ILILI1L); $ILILILl .= I2928 .$ILILIlL[$ILILIl1][I2891] .I2929 .$ILILIlL[$ILILIl1][I2893]; if ($this->ILILLL1 && isset($this->ILIIl1l[$ILILI1L])) {$ILILILl .= I2933 .$specBlock .I2933; }if ($this->ILILLL1 && isset($this->ILIIlIl[$ILILI1L])) {$ILILILl .= I2934 .$specBlock .I2935; }else {$ILILILl .= $specBlock; }$ILILILl .= $ILILIlL[$ILILIl1][I2894] .I2936; }}$ILILILl .= $this->TT1IlIl($ILILIlL); if ($this->ILILLL1) {$ILILILl .= I2937; $ILILILl .= I2938; }$ILILILl .= I2939; if ($this->ILI1IIl) {$ILILI11 =I2940; }else {$ILILI11 =I2941; if ($this->ILIIlL1) {$ILILI11 .= I2942; }}if ($this->ILI1ILI) {$ILILI11 .= I2943 .$this->ILI1ILI .I2944; }$ILILI11 .= I2945 .$ILILILL .I2946 .$ILILIL1 .I2947 .$ILILI1I; if ($this->ILILLL1) {$ILIl1ll =sizeof($this->ILIIlIl); $ILILI11 .= I2948 .$ILIl1ll; if ($ILIl1ll >0) {$percent =$ILIl1ll *100 /($ILILILL +$ILILIL1); $ILILI11 .= I2715 .number_format($percent, 2, I2910, I2747) .I2949; }}$ILILI11 .= I2718; $ILILIlI =I2950 .$ILILIll .I2951 .$ILILI11 .I2952 .($this->ILI1ILI ?I2953 .$this->ILI1ILI .I2954 :I2660) .I2955 .$this->ILI1ILl .I2956 .$this->pId .I2957 .$this->PageId .I2958; if ($this->pId >0) {$ILILIlI .= I2959 .$this->_SavedPage[I2776] .I2960 .$this->_SavedPage[I2777] .I2961 .$this->_SavedPage[I2818] .I2962; }$ILILIlI .= I2963 .$ILILILI .I2964 .$ILILILl .I2964; $ILILIlI .= $this->TT1IllI(); if (!empty($GLOBALS[I2731])) {$ILILIlI .= I2965 .$GLOBALS[I2732]->TTI1111(); }}return $ILILIlI; }public function handleOnRequestInit($name, array $aEvent, $handlerModId, $srcModId) {if (AMI::getSingleton(I2966)->getCookie(I2967, false)) {$layoutId =$this->GetOption(I2675); $aEvent[I2968][I2969] =$layoutId; $aEvent[I2970][I2969] =$layoutId; }return $aEvent; }public function stripGet(array &$aGET) {if (empty($aGET[I2971]) || $aGET[I2971] !== I2972) {$query =http_build_query($aGET, I2747, I2973); $count =0; $query =preg_replace($this->ILI11Il, I2747, $query, -1, $count); if ($count) {parse_str($query, $aGET); $aPage =AMI_Registry::get(I2813); $aPage[I2974][I2975] =TRUE; AMI_Registry::set(I2813, $aPage); }}}}