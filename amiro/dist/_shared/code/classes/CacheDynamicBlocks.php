<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       21264 xkqwmtqqtmlwzplppqlqswmutkxzpzprqkuqzkszxutiyzxlqgsmiqnrnxmssixrnrukpnir
 */ ?><?php  if(!defined('AMI_ENVIRONMENT')){header(I2650);die(I2651.__FILE__.I2652.__LINE__);} class CacheDynamicBlocks {public $db; public $oSession; public $oMember; public $ILILlII; public $ILILlIl; public $ILILlIL; public $lang; public $IlI111I; public $ILILlI1; function CacheDynamicBlocks($lang, &$ILILlII, &$ILILlIl, &$ILIlLlL, &$db) {$this->lang =$lang; $this->db =&$db; $this->oSession =false; $this->oMember =false; $this->ILILlII =isset($ILILlII[I2679]) ?$ILILlII[I2679] :Array(); $this->ILILlIl =&$ILILlIl; $this->ILILlIL =&$ILIlLlL; $this->IlI111I =I2700; $this->ILILlI1 =Array(); }function TT1T1IT(&$ILIllII) {$ILILllI =Array(I2976, I2977, I2978, I2979, I2980, I2981, I2982, I2983, I2984, I2985, I2986); $ILILlll =Array(); $ILIlIll =Array(); foreach($ILIllII as $specName => $ILILllL) {if(in_array($ILILllL, $ILILllI)) {$ILILlll[$ILILllL][] =$specName; }}foreach($ILILlll as $ILILllL => $ILIll1L) {$hash =I2660; switch($ILILllL) {case I2986: $hash =$this->TT1IT1I(); break; case I2976: $hash =$this->TT1IT1T(); break; case I2977: $hash =$this->TT1IT1l(); break; case I2978: $hash =$this->TT1ITl1(); break; case I2979: $ILILll1 =$this->TT1ITlI(I2987, $ILIll1L); $ILIlIll += $ILILll1; break; case I2980: $ILILll1 =$this->TT1ITlI(I2988, $ILIll1L); $ILIlIll += $ILILll1; break; case I2981: $ILILll1 =$this->TT1ITlI(I2989, $ILIll1L); $ILIlIll += $ILILll1; break; case I2982: $ILILll1 =$this->TT1ITlI(I2990, $ILIll1L); $ILIlIll += $ILILll1; break; case I2983: $ILILll1 =$this->TT1ITll($ILIll1L); $ILIlIll += $ILILll1; break; case I2984: $ILILll1 =$this->TT1ITlI(I2991, $ILIll1L); $ILIlIll += $ILILll1; break; case I2985: $ILILll1 =$this->TT1IT11($ILIll1L); $ILIlIll += $ILILll1; break; case I2992: $ILILll1 =$this->TT1ITlI(I2993, $ILIll1L); $ILIlIll += $ILILll1; break; }if(!empty($hash)) {foreach($ILIll1L as $specName) {$ILIlIll[$specName] =$hash; }}}return $ILIlIll; }function TT1ITlI($modName, $ILIll1L) {global $frn; $ILILll1 =Array(); foreach($ILIll1L as $specName) {if(!empty($this->ILILlII[$specName.I2994])) {$ILILlLI =1971; $ILILlLl =2030; $startYear =I2660; $ILILlLL =I2660; TlT1I1T($frn, $ILILlLL, $startYear, $ILILlLI, $ILILlLl); $ILILll1[$specName] =Array(I2995 => ($startYear.I2996.$ILILlLL)); }}return $ILILll1; }function TT1ITll($ILIll1L) {global $frn; $ILILll1 =Array(); foreach($ILIll1L as $specName) {if(!empty($this->ILILlII[$specName.I2997])) {$ILILll1[$specName] =Array(I2998 => $this->ILILlII[$specName.I2997]); }}return $ILILll1; }function TT1ITl1() {global $frn; $hash =I2660; $ILILlL1 =$frn->Core->GetModOption(I2999, I3000); $ILILl1I =$frn->ActiveModule->GetName(); if(in_array($ILILl1I, $ILILlL1)) {$hash =Array(I3001 => $ILILl1I); }return $hash; }function TT1IT1T() {global $frn; return Array(I3002 => $frn->Vars[I2750]); }function TT1IT1I() {global $frn; return Array(I2750 => $frn->Vars[I2750]); }function TT1IT1l() {global $frn; $cookie =$frn->Core->GetModProperty(I3003, I3004) .I3005; $pollId =isset($frn->VarsCookie) && isset($frn->VarsCookie[$cookie]) ?(int)$frn->VarsCookie[$cookie] :0; return Array(I3006 => $pollId); }function TT1IT11($ILIll1L){ $aHashes =array ();foreach ($ILIll1L as $specName) {if (!empty($this->ILILlII[$specName .I3007])) {$aHashes[$specName] =array (I3008 => $this->ILILlII[$specName .I3007]); }}return $aHashes; }function TT1IITT($ILILl1l =true) {if(!is_object($this->oSession)) {if(isset($GLOBALS[I3009]) && is_object($GLOBALS[I3009])){ $this->oSession =&$GLOBALS[I3009]; }else {if($ILILl1l){ require_once $GLOBALS[I2653] .I3010; $none =false; $this->oSession =new CMS_Session($none, $this->lang); $this->oSession->Start(); }}if($this->oSession->IssetVar($this->IlI111I)) {$this->ILILlI1 =$this->oSession->GetVar($this->IlI111I); }}}function TT1IITI($ILILllL, &$notChanged, &$ILILl1L) {$ILILl11 =false; $notChanged =false; $this->TT1IITT(); if(isset($this->ILILlI1[I3011])) {$ILILl11 =$this->ILILlI1[I3011]; }if($ILILl11) {$this->ILILlIl[$ILILllL][I3012] =I3013; TlT1T11($this->oSession); }else {if(isset($this->ILILlIl[$ILILllL][I3012]) && $this->ILILlIl[$ILILllL][I3012] == I3014) {$notChanged =1; }else {$this->ILILlIl[$ILILllL][I3012] =I3014; $ILILl1L =true; }}}function TT1IITl($ILILllL, &$notChanged, &$ILILl1L) {$this->TT1IITT(); $sess_cart_name =I3015; $notChanged =false; $isEmpty =true; if(isset($this->ILILlI1[I3016])) {$isEmpty =$this->ILILlI1[I3016]; }if($isEmpty) {if(isset($this->ILILlIl[$ILILllL][I3012]) && $this->ILILlIl[$ILILllL][I3012] == I3017) {$notChanged =true; }else {$this->ILILlIl[$ILILllL][I3012] =I3017; $ILILl1L =true; }}else {$this->ILILlIl[$ILILllL][I3012] =I3018; }}function TT1IIT1($ILILllL, &$notChanged, &$ILILl1L) {$this->TT1IITT(); $notChanged =false; $isEmpty =true; if (isset($this->ILILlI1[I3019])) {$isEmpty =$this->ILILlI1[I3019]; }if ($isEmpty) {if (isset($this->ILILlIl[$ILILllL][I3020]) && $this->ILILlIl[$ILILllL][I3020] == I3021 ){$notChanged =true; }else {$this->ILILlIl[$ILILllL][I3020] =I3021; $ILILl1L =true; }}else {$this->ILILlIl[$ILILllL][I3020] =I3022; }}function TT1IIIT($specName, $optName, &$notChanged, &$ILILl1L) {$notChanged =false; $ILILl1L =false; if(isset($this->ILILlII[$specName.$optName])) {if($this->ILILlII[$specName.$optName] != I3023) {$notChanged =true; }}if($notChanged) {if(!isset($this->ILILlIl[$specName][I3012]) || $this->ILILlIl[$specName][I3012] != I2908) {$this->ILILlIl[$specName][I3012] =I2908; $notChanged =false; $ILILl1L =true; }}else {$this->ILILlIl[$specName][I3012] =I2905; }}function TT1IIII(){ if(empty($GLOBALS[I3024]) && isset($this->ILILlIL[I3025]) && $this->ILILlIL[I3025][I3026] == 1 && !empty($this->ILILlIL[I3025][I3027])){ $ILILLIl =intval($this->ILILlIL[I3025][I3028]); $query =$this->ILILlIL[I3025][I3027]; $lang =$this->ILILlIL[I3025][I3029]; if(mb_strlen($query) >255) {$query =mb_substr($query, 0, 255); $ILILLIL =1; }else {$ILILLIL =0; }$ILILLI1 =md5($this->ILILlIL[I3025][I3030]); $sql =I3031.$ILILLI1.I3032.$lang.I2691; $this->db->query($sql); if($this->db->affected_rows() <= 0){ $asql =Array( I3033 => $ILILLI1, I3034 => $query, I3035=>1, I3036=>$ILILLIl, I3028 => addslashes(implode(I3037, $this->ILILlIL[I3025][I3038])), I3039=>I3040, I3041=>I3040, I3042=>$ILILLIL, I3043 => addslashes($this->ILILlIL[I3025][I3030]), I3044=>$lang );$sql =$this->db->GenInsertSQL(I3045, $asql); $this->db->query($sql); }}}function TT1IIIl($moduleName, &$expired, &$ILILLlI) {$notChanged =true; $res =false; $ILILllL =I3046; $ILILLll =true; $ILILl1L =false; $checkType =I2747; switch($moduleName) {case I3047: $checkType =I3047; break; case I3048: case I3049: case I3050: case I3051: case I3052: case I2999: case I3053: $checkType =I3054; break; case I3055: $checkType =I3055; break; case I3056: break; case I3057: $ILILl1L =true; $notChanged =true; $this->TT1IIII(); break; default: $checkType =I2666; }if(function_exists(I3058)){ $customNotChanged =$notChanged; $customNeedToSave =$ILILl1L; CacheCheckDynamicModules($moduleName, $checkType, $customNotChanged, $customNeedToSave); }switch($checkType) {case I3047: $ILILl1L =false; $notChanged =false; break; case I3054: $this->TT1IITI($ILILllL, $notChanged, $ILILl1L); break; case I3055: $this->TT1IITl($ILILllL, $notChanged, $ILILl1L); break; case I3059: $this->TT1IIT1($ILILllL, $notChanged, $ILILl1L); break; case I2679: $notChanged =$customNotChanged; $ILILl1L =$customNeedToSave; break; case I2666: $ILILLll =false; break; }$expired =!$notChanged; $ILILLlI =!$ILILl1L; return $ILILLll; }function TT1III1($specName, &$notChanged, &$ILILl1L) {$paramName =$specName.I3060; if(isset($this->ILILlII[$paramName])) {if ($this->ILILlII[$paramName][I3061]) {$notChanged =time() <= $this->ILILlII[$paramName][I3062]; }else {$notChanged =$this->ILILlII[$paramName][I3063]; }}else {$notChanged =false; }$ILILl1L =true; }function TT1IIlT(&$ILILLlL, &$ILILLl1, &$ILILLLI, &$ILILLLl, &$ILILLLL) {foreach($ILILLlL as $ILILllL => $ILIll1L) {$notChanged =true; $ILILl1L =false; switch($ILILllL) {case I3064: $this->TT1IITl($ILILllL, $notChanged, $ILILl1L); break; case I3065: $this->TT1IIT1($ILILllL, $notChanged, $ILILl1L); break; case I2978: $this->TT1IITI($ILILllL, $notChanged, $ILILl1L); break; case I2977: foreach($ILILLlL[$ILILllL] as $specName) {$this->TT1III1($specName, $notChanged, $ILILl1L); if(!$notChanged) {$ILILLLI[$specName] =1; if(!$ILILl1L) {$ILILLLL[$specName] =1; }}}$notChanged =true; $ILILl1L =false; break; }if(!$notChanged) {$ILILLl1[$ILILllL] =1; if(!$ILILl1L) {$ILILLLl[$ILILllL] =1; }}}}function _getVar($varName) {$res =false; if(isset($GLOBALS[I3066][$varName])) {$res =$GLOBALS[I3066][$varName]; }elseif(isset($GLOBALS[I3067][$varName])) {$res =$GLOBALS[I3067][$varName]; }return $res; }}?>