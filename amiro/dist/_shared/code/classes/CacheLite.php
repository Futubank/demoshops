<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       33080 xkqwrmpstngqiwuzyupxtsmlxkyinqklqpwnxumsizumiytiuwnqgpmlzqnsiurtwulgpnir
 */ ?><?php  if(!defined('AMI_ENVIRONMENT')){header(I2650);die(I2651.__FILE__.I2652.__LINE__);} require_once $GLOBALS[I2653] .I3068; class CMS_CacheLite extends CMS_CacheSimpleL1 {public $ILILLL1; public $ILILL1I; public $ILILL1l; public $ILILL1L; public $ILILL11; public $ILIL1II; public $ILIL1Il; public $ILIL1IL; public $ILIL1I1; public $ILIL1lI; public $ILIL1ll; public $ILIL1lL; public $ILIL1l1; public $ILIL1LI; public $ILIL1Ll; public $ILIL1LL; public $ILIL1L1; public $ILIL11I; public $ILIL11l; public $ILIL11L; public $ILIL111; public $ILI1III; public $ILI1IIl; public $ILI1IIL; public $ExtraPageData; public $ILI1II1; public $ILI1IlI; public $lang; public $ILI1Ill; public $ILI1IlL; public $ILI1Il1; public $ILI1ILI; public $ILI1ILl; protected $ILI1ILL; protected $ILI1IL1; function CMS_CacheLite() {if ($GLOBALS[I2656] == I2655) {parent::CMS_CacheSimpleL1(); }else {$GLOBALS[I2657][I2658] =I3069; }$this->ILILLL1 =true; $this->ILILL1I =false; $this->ILILL1l =false; $this->ILIL1II =Array(); $this->ILIL1Il =array( I3064 => I3055, I3065 => I3059, I2978 => I2999, I2977 => I3003, I3070 => I3071 );$this->ILIL1I1 =I3046; $this->ILIL1lI =false; $this->ILIL1ll =0; $this->ILIL1l1 =Array(); $this->ILIL1Ll =array(); $this->ILIL1LL =false; $this->ILIL1L1 =false; $this->ILIL11I =false; $this->ILIL11l =false; $this->ILIL11L =Array(); $this->ILIL111 =Array(); $this->ILI1III =false; $this->ILI1IIl =false; $this->ILI1IIL =Array(I2802 => Array(), I2805 => Array(), I3072 => Array()); $this->ExtraPageData =Array(); $this->ILIL1IL =Array(); $this->ILI1II1 =0; $this->ILI1IlI =array(); $this->lang =I2660; $this->ILI1Ill =false; $this->ILI1IlL =3; $this->ILI1Il1 =10; $this->ILI1ILI =0; $this->ILI1IL1 =false; $this->ILI1ILl =I2747; }function TT1IIlI(&$oCache) {$ILI1I1I =get_object_vars($oCache); foreach ($ILI1I1I as $varName => $value) {$this->$varName =&$oCache->$varName; }}public function TT1IIll($ILI1ILL){ $this->ILI1ILL =$ILI1ILL; }function Init( $ILIILII =I2670, $ILIILIl =TRUE, $ILIILIL =0, $ILIILI1 =I2671, array $aOptions =NULL ){if(is_object($this->ILI1ILL)){ $this->TT1IIlI($this->ILI1ILL); $this->ILI1ILL =NULL; }else{ parent::Init($ILIILII, $ILIILIl, $ILIILIL, $ILIILI1); }if (isset($this->options[I2678][I2680])) {$this->ILIL1Il =array_diff_key($this->ILIL1Il, $this->options[I2678][I2680]); }$this->db =new DB_si; $this->ILILL1I =!$ILIILIl; $this->ILILLL1 =$this->Enabled && !$this->ILILL1I; }function TT1IIl1(array $aOptions =NULL){ $res =false; $options =NULL; if (CMS_ModulesOptions::TTlTllT($this->db, $options, I2700, I2701)) {if ($options[I3073] != I2660) {$this->options =unserialize($options[I3073]); $this->ILI11II =intval($options[I3074]); $this->TT1Illl(); $res =true; }}return $res; }function Disable() {$this->markPageIsSkipped(); $this->Enabled =false; $this->ILILLL1 =false; }function Enable() {$this->Enabled =true; $this->ILILLL1 =!$this->ILILL1I; return true; }function TT1II1T($type, $obj, $methodName =I2747) {if (in_array($type, array(I2802, I2805, I3072))) {if (is_object($obj)) {if (method_exists($obj, $methodName)) {$this->ILI1IIL[$type][] =Array(I2803 => &$obj[0], I2804 => $methodName[1]); }}else {if (function_exists($obj)) {$this->ILI1IIL[$type][] =Array(I2803 => null, I2804 => $obj); }}}}function TT1II1I(&$IlL1IIl) {$this->ExtraPageData += $IlL1IIl; }function TT1II1l($IlllI1l) {$this->ILI1II1 =$IlllI1l; }function TT1II11($pageUIN =I2660, &$aPage, $groupMask =0){ if (sizeof($aPage) == 0 || $this->ILI1II1 >0 || $this->ILI1ILI >0) {$res =parent::TT1II11($pageUIN, $aPage, $this->ILI1II1); }else {$res =$aPage[I2775]; }return $res; }function TT1IlTT($ILI1I1l, $ILI1I1L) {$this->ILI1IL1 =true; unset($this->ILI1Lll[$ILI1I1l][$ILI1I1L]); }function TT1TIll() {if ($this->ILI1LLL) {foreach ($this->ILI1Lll[I2751] as $ILII1I1 => $modName) {if ($this->ILI1Ll1 >$ILII1I1) {$this->ClearAdd($modName); $ILI1I11 =true; if (isset($this->ILI1Lll[I2753][$modName])) {$this->ClearAdd(I2710, 0, I2660, I2660, $this->ILI1Lll[I2753][$modName]); $this->TT1IlTT(I2753, $modName); }$this->TT1IlTT(I2751, $ILII1I1); }else {break; }}if (is_array($this->ILI1Lll[I2750])) {foreach ($this->ILI1Lll[I2750] as $ILII1I1 => $pageId) {if ($this->ILI1Ll1 >$ILII1I1) {$this->ClearAdd(I2710, $pageId); $this->TT1IlTT(I2750, $ILII1I1); $ILI1I11 =true; }else {break; }}}}return $this->ILI1LLL; }function TT1IlTI() {return false; }function TT1IlTl($pageId) {$sql =I3075 .$this->ILI1L1l .I3076 .date($this->ILI1LLI, $this->ILI1Ll1 +3600) .I3077 .$pageId .I2691; $this->db->query($sql); return $this->db->affectedRows(); }function TT1IlT1() {$res =0; if (!is_array($this->pageUin)) {$this->pageUin =$this->TT1Il1T(); }$asql =array( I2781 => $this->ILI1LlL, I2777 => date($this->ILI1LLI, $this->ILI1Ll1 +3600), I2724 => 0, I2778 => $this->ILI1II1, I2786 => $this->ILI1ILl, I2818 => -1, I2821 => $this->ILI1L1l, )+$this->pageUin; $sql =$this->db->GenInsertSQL(I2824, $asql); if ($this->db->query($sql, DBC_TRUSTED_QUERY |DBC_NO_HALT)) {$res =$this->db->lastInsertId(); }return $res; }function markPageIsSkipped() {if ($this->Enabled && $this->ILI1Ill) {$sql =I3078 .$this->ILI1Ill .I3079; $this->db->query($sql); }}function TT1IlIT($id) {$sql =I3075 .$this->ILI1L1l .I3076 .date($this->ILI1LLI, $this->ILI1Ll1 +3600) .I3077 .$id .I3080 .$this->ILI1LlL .I2691; $this->db->query($sql); return $this->db->affectedRows(); }function Start() {$res =false; $res =parent::Start(); if ($this->Enabled) {if ($this->pId == 0 && !$this->ILI1ILI) {if (!$this->ILI1LLL) {if ($this->ILI1Ill) {if ($this->ILI1L1L || !$this->TT1IlIT($this->ILI1Ill)) {$this->ILI1Ill =false; }}else {$this->ILI1Ill =$this->TT1IlT1(); }if (!$this->ILI1Ill) {for ($i =0; $i <$this->ILI1Il1; $i++) {$this->ILI1ILI++; set_time_limit(20); sleep($this->ILI1IlL); $res =$this->TTI111T(); if ($res || !$this->Enabled) {break; }}}}if ($this->ILI1ILI && $this->Enabled) {display503Header(180); echo I3081 .str_repeat(I3082, 150) .I3083; die(); }else {$this->ILILL1l =($this->pId == 0 && !$this->ILI1LLL); $this->ILIL1lI =$this->ILIL1lI || ($this->pId == 0 && !$this->ILI1LLL); }}}return $res; }function TT1TIl1() {if ($this->ILI1ILI) {if (parent::TT1TIl1()) {die(); }}$res =true; $aSpecBlocks =false; $this->ILILL1L =&$this->_SavedPage[I3084]; $this->ILIL1LI =Array(); $this->ILIIllI =Array(); $this->PageId =$this->_SavedPage[I2724]; $ILIlLlL =unserialize($this->_SavedPage[I2820]); $ILIlllI =array_keys($this->ILIL1Il); if ($this->_SavedPage[I2823] != I2660) {$this->_SavedPage[I2823] =str_replace(I2684, I3085, $this->_SavedPage[I2823]); $ILI1lII =explode(I2684, $this->_SavedPage[I2823]); unset($ILI1lII[0]); $ILI1lIl =array_diff($ILI1lII, $ILIlllI); $ILI1lIL =array_search($this->ILIL1I1, $ILI1lIl); if ($ILI1lIL >0) {$this->ILIL1lI =true; unset($ILI1lIl[$ILI1lIL]); }unset($ILI1lIL); }if (empty($this->_SavedPage[I2817])) {$this->ILILL11 =false; if (!$this->ILIL1lI) {$this->TT1IIIl($this->_SavedPage[I2786]); }if ($this->ILIL1lI) {$this->ILILL1l =($this->ILILL1l || (!$this->ILIL11I) || ($this->ILIL11I && !$this->ILIL11l)); }}else {$this->ILILL11 =true; if (is_array($ILIlLlL[I3086])) {$aSpecBlocks =$ILIlLlL[I3086]; $this->ILIL1ll =sizeof($ILIlLlL[I3086]); }else {$aSpecBlocks =Array(); }$this->ILIL1lL =Array(); if ($this->_SavedPage[I2823] != I2660) {$this->ILIL1IL =array_intersect($ILIlllI, $ILI1lII); $this->ILIL1lL =TT1TlIl($aSpecBlocks, $ILI1lIl, I2683); unset($ILI1lII, $ILI1lIl); }$this->_SavedPage[I2817] =str_replace(I2684, I3085, $this->_SavedPage[I2817]); $this->ILIL1l1 =$ILIlLlL[I3087]; $ILI1lI1 =TT1TlIl($aSpecBlocks, $ILIlllI, I2681); foreach ($ILI1lI1[I2683] as $specName => $ILILllL) {$this->ILIL1II[$specName] =$this->ILIL1Il[$ILILllL]; }$ILILLlL =$ILI1lI1[I2682]; unset($ILI1lI1); if (!$this->ILIL1lI) {$this->TT1IIIl($this->_SavedPage[I2786]); }if (count($ILILLlL) >0) {$this->TT1IIlT($ILILLlL, I2754); if (count($this->ILIL1Ll) >0) {$this->ILIL1LL =true; }}unset($ILILLlL); $this->ILIL1LI =&$aSpecBlocks; $this->ILIIlLI =sizeof($this->ILIL1II); }$ILI1llI =($this->ILIL1LL || (sizeof($this->ILIL1lL) >0) || (sizeof($this->ILIL11L) >0)); if (!empty($GLOBALS[I2731])) {if (sizeof($this->ILIL11L) >0) {setcookie(I3088, I3089, time() +60); }else {setcookie(I3088, I3090, time() +60); }}$this->ILI1III =true; $this->ILI1IIl =(!($this->ILIL1lI || $ILI1llI)); if ($this->ILI1IIl) {if (sizeof($this->ILI1IIL[I3072]) >0) {foreach ($this->ILI1IIL[I3072] as $index => $_tmp) {if (is_null($this->ILI1IIL[I3072][$index][I2803])) {$this->ILI1IIL[I3072][$index][I2804]($this->ILILL1L); }else {$this->ILI1IIL[I3072][$index][I2803]->{$this->ILI1IIL[I3072][$index][I2804]}($this->_SavedPage); }}}if ($this->Debug) {$this->ILIIllL =$ILIlLlL[I3091]; }$this->TTI11l1(); }else {if (!($this->ILIL11I && $this->ILIL11l)) {$this->TT1IlTl($this->_SavedPage[I2775]); }$this->TT1II1I($ILIlLlL[I2820]); $aRegistry =array(I2812 => $ILIlLlL[I2812]); $this->TT1II1I($aRegistry); $this->ILIIllL =$ILIlLlL[I3091]; $this->ILI1ILl =$this->_SavedPage[I2786]; $this->lang =$this->_SavedPage[I2784]; $this->PageId =$this->_SavedPage[I2724]; }if ($this->ILIL1lI) {unset($this->_SavedPage); }return $res; }function TT1IlII() {if (!is_object($this->ILIL1L1)) {require_once $GLOBALS[I2653] .I3092; $this->ILIL1L1 =new CacheDynamicBlocks($this->lang, $this->options[I2678], $this->ILIL1l1, $this->ExtraPageData, $this->db); }}function TT1IIIl($ILI1lll) {$this->TT1IlII(); $ILI1llL =$this->ILIL1lI; $this->ILIL11I =$this->ILIL1L1->TT1IIIl($ILI1lll, $ILI1llL, $this->ILIL11l); if ($this->ILIL1lI && !$ILI1llL) {$this->ILIL11l =false; }$this->ILIL1lI =($this->ILIL1lI || $ILI1llL); }function TT1IIlT(&$ILILLlL, $mode) {$this->TT1IlII(); $ILILLl1 =array(); $ILILLLI =array(); $ILILLLl =array(); $ILILLLL =array(); $this->ILIL1L1->TT1IIlT($ILILLlL, $ILILLl1, $ILILLLI, $ILILLLl, $ILILLLL); if ($mode == I2754) {$ILI1ll1 =isset($this->options[I2678][I3093]) ?$this->options[I2678][I3093] :Array(); foreach ($ILILLl1 as $ILIll1I => $ILIll1L) {$this->ILIL1Ll =array_merge($this->ILIL1Ll, array_diff($ILILLlL[$ILIll1I], $ILI1ll1)); }foreach ($ILILLLI as $specName => $tmp) {$this->ILIL1Ll[] =$specName; }$ILI1lLI =Array(); foreach ($this->ILIL1IL as $ILI1lLl) {$ILI1lLI += $ILILLlL[$ILI1lLl]; }$this->ILIL1Ll += $ILI1lLI; foreach ($ILILLLl as $ILILllL => $tmp) {$this->ILIL11L =array_merge($this->ILIL11L, $ILILLlL[$ILILllL]); }foreach ($ILILLLL as $specName => $tmp) {$this->ILIL11L[] =$specName; }}}function TTI11l1() {foreach ($this->ILI1IIL[I2805] as $index => $_tmp) {if (is_null($this->ILI1IIL[I2805][$index][I2803])) {$this->ILI1IIL[I2805][$index][I2804]($this->_SavedPage[I3084]); }else $this->ILI1IIL[I2805][$index][I2803]->{$this->ILI1IIL[I2805][$index][I2804]}($this->_SavedPage[I3084]); }parent::TTI11l1(); }function TT1ITIl() {$ILIl1lI =sizeof($this->ILIL1lL); $log =I3094 .$this->ILIL1ll .I3095 .$this->ILIIlLI .I3096; return $log; }function GetDebugInfo() {$res =I2660; if ($this->Debug) {$res =$this->ILIIIlL; $res .= $this->TTI1111(); }return $res; }function TT1IlIl(&$ILILIlL) {$res =I3097; $delim =I2715; foreach ($ILILIlL as $ILILIl1 => $ILI1lLL) {$res .= I2928 .$ILILIlL[$ILILIl1][I2891] .I2929 .$ILILIlL[$ILILIl1][I2893] .$delim .$ILILIl1 .$ILILIlL[$ILILIl1][I2894] .I2930; $delim =($delim == I2715) ?I3098 :$delim; }$res .= I2939; return $res; }function TT1IlI1(&$aHeaders) {$ILI1lL1 =I3099; if (is_array($aHeaders)) {$ILI1lL1 =implode(I3098, $aHeaders); }$ILI1lL1 .= I3100; return $ILI1lL1; }function TT1IllT($ILILI1L) {$ILILILl =I3101; $ILILILl .= (isset($this->ILIIllL[$ILILI1L])) ?$this->ILIIllL[$ILILI1L] :I2666; $ILILILl .= I3102 .$ILILI1L .I3103; return $ILILILl; }function TT1IllI() {$html =I3104; $aTmp =$this->ILI1Lll[I2751]; if (is_array($aTmp)) {ksort($aTmp); foreach ($aTmp as $ILII1I1 => $modName) {$html .= I3105 .date($this->ILI1LLI, $ILII1I1) .I3106 .$modName; if (isset($this->ILI1Lll[I2753][$modName])) {$html .= I3107 .implode(I3108, $this->ILI1Lll[I2753][$modName]); }$html .= I3109; }}if (isset($this->ILI1Lll[I2750]) && is_array($this->ILI1Lll[I2750])) {$aTmp =$this->ILI1Lll[I2750]; ksort($aTmp); foreach ($this->ILI1Lll[I2750] as $ILII1I1 => $pageId) {$html .= I3105 .date($this->ILI1LLI, $ILII1I1) .I3110 .$pageId .I3111; }}return $html; }function ClearAdd($cModule, $Ill11lL =0, $IIL1l1I =I2660, $ILI1l1I =I2660, $ILI1l1l =I2660, $ILI1l1L =I2660) {if (!$this->_IsIgnoreClearCmd) {if (empty($cModule)) {trigger_error("CACHE: ERROR: Wrong module name for ClearCache [$cModule]...", E_USER_WARNING); return false; }$ILI1l1I =(empty($ILI1l1I)) ?0 :strtotime($ILI1l1I); $Ill11lL =intval($Ill11lL); if ($Ill11lL >0 || $ILI1l1l != I2660) {$cModule =I2710; }if ($cModule != I2710) {$ILI1l1l =I2660; }if ($cModule == I2710 && $ILI1l1l == I2660 && empty($Ill11lL)) {$this->ILI1IlI =Array(); $this->_IsIgnoreClearCmd =true; $this->ILI1IlI[I2710] =1; }else {if ($ILI1l1L != I2660) {$this->ILI1IlI[I2710][I2729][$ILI1l1I][$ILI1l1L] =1; }if ($cModule != I2710) {$this->ILI1IlI[I2727][$ILI1l1I][$cModule] =1; }else {if (is_array($ILI1l1l)) {foreach ($ILI1l1l as $specName) {$this->ILI1IlI[I2710][I2711][$ILI1l1I][$specName] =1; }}elseif ($ILI1l1l != I2660) {$this->ILI1IlI[I2710][I2711][$ILI1l1I][$ILI1l1l] =1; }$this->ILI1IlI[I2710][I2724][$ILI1l1I][$Ill11lL] =1; }}}return true; }function TTI1111() {global $show_bench, $bench_time, $_SIDE; $ILILIlI =I2747; if ($this->Debug && $_SIDE != I2672 && $this->ILI1L1I) {$aSpecBlocks =&$this->ILIL1LI; $ILI1lL1 =$this->TT1IlI1($this->_SavedPage[I2819]); $this->ILI1L1I =false; $ILILIlL =Array(I2890 => Array(I2891 => I2892, I2893 => I2660, I2894 => I2660), I2895 => Array(I2891 => I2896, I2893 => I2660, I2894 => I2660)); $ILILIl1 =($this->ILIL11I) ?I2905 :I2908; $ILILIl1 .= I2909; $aInfo =$this->db->GetTableInfo(I2790); $vRows =$aInfo[I2791]; $vAvgSize =$aInfo[I2792] /1048576; $vSize =number_format(($vAvgSize *$aInfo[I2791]), 2, I2910, I2747); $vAvgSize =number_format($vAvgSize *1024, 2, I2910, I2747); $limit =0; if ($this->StorageLimit) {$limit =$this->StorageLimit; }elseif (isset($GLOBALS[I3112][I3113])) {$limit =$GLOBALS[I3112][I3113]; }$oDB =new DB_si; $sql =I2911; $oDB->query($sql); $oDB->next_record(); $ILILILI =I2912 ." <b>Size (approx.): $vSize" .I2914 .($limit ?(I3114 .(number_format($vSize /$limit *100, 2, I2910, I2747)) .I2916) :I2660) ." </b>, Rows: $vRows, Expired rows: " .($oDB->Record[I2919]) .I2915 .(number_format($oDB->Record[I2919] /$vRows *100, 2, I2910, I2747)) .I3115 .$vAvgSize .I2921 .I2922 .($limit ?$limit :I2747) .I2923; $aInfo =$this->db->GetTableInfo(I2779); $vRows =$aInfo[I2791]; $vAvgSize =$aInfo[I2792] /1048576; $vSize =number_format(($vAvgSize *$aInfo[I2791]), 2, I2910, I2747); $vAvgSize =number_format($vAvgSize *1024, 2, I2910, I2747); $oDB =new DB_si; $sql =I2924; $oDB->query($sql); $oDB->next_record(); $ILILILI .= I2925 ." <b>Size (approx.): $vSize" .I2914 .($limit ?(I3114 .(number_format($vSize /$limit *100, 2, I2910, I2747)) .I2916) :I2660) ." </b>, Rows: $vRows, Expired rows: " .($oDB->Record[I2919]) .I2915 .(number_format($oDB->Record[I2919] /$vRows *100, 2, I2910, I2747)) .I3115 .$vAvgSize .I2921 .I3116; unset($oDB); $ILILILI .= I3117 .$ILILIlL[$ILILIl1][I2891] .I2929 .$ILILIlL[$ILILIl1][I2893] .$ILILIl1 .$ILILIlL[$ILILIl1][I2894] .I3118; $ILILILl =I2932; if (is_array($aSpecBlocks)) {foreach ($aSpecBlocks as $ILILI1L) {$ILILIl1 =(isset($this->ILIL1II[$ILILI1L])) ?I2895 :I2890; $ILILILl .= I2928 .$ILILIlL[$ILILIl1][I2891] .I2929 .$ILILIlL[$ILILIl1][I2893]; $ILILI1L =$this->TT1IllT($ILILI1L); $ILILILl .= $ILILI1L .$ILILIlL[$ILILIl1][I2894] .I2936; }}$ILILILl .= $this->TT1IlIl($ILILIlL); $ILILIlI =I3119 .($this->ILI1ILI ?I2953 .$this->ILI1ILI .I2954 :I2660) .I2955 .$this->_SavedPage[I2786] .I2956 .$this->_SavedPage[I2775] .I3120 .$this->_SavedPage[I2776] .I2960 .$this->_SavedPage[I2777] .I2961 .$this->_SavedPage[I2818] .I3121 .$ILI1lL1 .$ILILILI .I2964 .$ILILILl .I2964; $ILILIlI .= $this->TT1IllI(); if (!empty($GLOBALS[I2731])) {$ILILIlI .= I2965 .$GLOBALS[I2732]->TTI1111(); }}return $ILILIlI; }}