<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       90118 xkqwwkumnuwmgrxygxnkxwuxntwxxxkgimzyikxynmpkgtrrungmzkkmxlqwrlsytlpppnir
 */ ?><?php foreach(array(3188=>'vMS',3189=>"uDQ|DOMGGMnP|IHSuJQ",3190=>'QDOHG|SMDWHunt',3191=>"MtQImS",3192=>'EtB',3193=>'ZUDQrgrMWQD',3194=>"QDOHG|HrSQr",3195=>'MS',3196=>'Hn|WZrt|YQfHrQ|DQt',3197=>'GrMWQNuIYQr',3198=>"IMnMIZJ|unMt",3199=>"?zNs?W`MS|DMtQ='",3200=>"",3201=>"DEJ|tBGQ",3202=>"ZSS|QxtQntMHn|DEJ",3203=>"DQJQWt",3204=>"?coqRq?M`MS?mN?}",3205=>"MS",3206=>"SMDWHunt|tBGQ",3207=>"WOZrPQ|tZx|tBGQ",3208=>"GrMWQ0",3209=>"QrrnH",3210=>"nZIQ",3211=>"GrMWQ",3212=>"tZx|WJZDD|tBGQ",3213=>"GrMWQ|AQrH",3214=>"IDP",3215=>"EuZntMtB",3216=>"'!'",3217=>"PrHuG",3218=>"GrHGmSjMDt",3219=>"FRhi?",3220=>"rQWHrS|tBGQ",3221=>"MtQI|tBGQ",3222=>"GrQGZrQ|rQWHrS",3223=>"SMDWHunt",3224=>'MnSQx',3225=>"GrMWQ|vZJuQ",3226=>"GrMWQD",3227=>"|DOMGGMnP|IQtOHSD",3228=>"COQrQ",3229=>"frHI",3230=>'ZJJ|MtQI|DOZrQS',3231=>"{?zNs?M`GuYJMW=1",3232=>"MD|GrHG",3233=>"|tZx|WJZDDQD",3234=>"MS|DOMGGMnP|tBGQ",3235=>"EtB",3236=>"MS|tZx|WJZDD",3237=>'GQrDHnZJ|SMDWHunt',3238=>"GrMWQ|QxZWt|vZJuQ",3239=>"tZx|tBGQ",3240=>"CQMPOtD",3241=>'DuI',3242=>"CQMPOt",3243=>"rQDt",3244=>"MS|GrHG",3245=>"GrHG|MnfH",3246=>"SQDWr|QIGtB",3247=>"ZYDHJutQ|SMDWHunt",3248=>"tZx|MtQI|vZJuQ",3249=>"DOMGGMnP|MtQI",3250=>"HCnQr|nZIQ",3251=>"GHGuG|GMWturQ",3252=>"WurrQnWBRZtQD",3253=>'tZxZYJQ',3254=>"WHnSMtMHnD",3255=>"\$QvZJRQD=}",3256=>'$QvZJRQD=',3257=>'ZYD',3258=>"tZx|vZJuQ",3259=>"DOMGGMnP",3260=>"GrHGgrQf",3261=>"=_NUjj",3262=>"WurrQnWB",3263=>"QxWOZnPQ",3264=>"GrHGQrtB|WZGtMHn",3265=>"MtQI|MnfH",3266=>"WID|QD|HrSQr|MtQID",3267=>"YJHWKNZIQ",3268=>'ZIHunt',3269=>'IZx|CQMPOt',3270=>"DOHC|MntQrDQWtMHn",3271=>"FRhi?.",3272=>"{?zNs?M`GuYJMW?=?1",3273=>'HtOQrD',3274=>'MtQID|WHunt') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class Cart {public $items; public $prices; public $itemPropData; public $total; public $currency; public $isCleanup; public $isEmpty; public $grandDiscount; public $couponDiscountId; public $couponDiscountParentId; public $coupon; public $couponId; public $couponOwner; public $baseCurrencyTotal; public $_recallMethodMode; public $personalDiscount; public $_useShippingModule; public $shippingTypesToProductsIndices; public $selectedShippingMethodsToProductsIndices; public $_productsIndicesToShippingMethods; public $_dataGroupedByShippingMethods; public $cms; public $lastAdded; public $lastItem; public $errCode; public $ownerName; public $ext; public $vid; public $extraInfo =array(); function Cart(&$cms) {$this->cms =&$cms; $this->init(); $this->currency =""; $this->lastItem =Array(); $this->lastAdded =Array(); $this->isCleanup =false; $this->errCode =Array(); $this->ownerName =""; $this->ext =false; $this->vid =AMI_Registry::get(I3188, FALSE); $this->simpleInit(); }function init() {$this->total =0; $this->baseCurrencyTotal =0; $this->grandDiscount =0; $this->isCleanup =false; $this->isEmpty =true; $errCode =Array ();$this->couponDiscountId =0; $this->couponDiscountParentId =0; $this->coupon =''; $this->couponId =0; $this->couponOwner =''; foreach($this->cms->Eshop->aCloneOwners as $ownerName=>$tmp) {$this->items[$ownerName] =Array(); $this->prices[$ownerName] =Array(); $this->itemPropData[$ownerName] =Array(); $this->lastItem[$ownerName] =Array(); $this->lastAdded[$ownerName] =Array(); }$this->simpleInit(); }function simpleInit() {$this->ownerName =$this->cms->Eshop->ownerName; $this->_recallMethodMode =false; $_moduleName =$this->ownerName ."_shipping_methods"; $this->_useShippingModule =$this->cms->Core->IsInstalled($_moduleName) && $this->cms->Core->GetModOption($_moduleName, I3189); $this->selectedShippingMethodsToProductsIndices =null; $this->_productsIndicesToShippingMethods =null; $this->personalDiscount =array(); $this->personalDiscount =!$this->cms->Member->isLoggedIn() ?array() :array( 'amount' => $this->cms->Member->getUserInfo(I3190, true), 'type' => $this->cms->Member->getUserInfo('eshop_discount_type', true), 'exp_date' => $this->cms->Member->getUserInfo('eshop_discount_exp_date', true), );}function getPropData($ownerName, $productid, $itemPropId) {if(!isset($this->itemPropData[$ownerName][$productid][$itemPropId])) {$this->createExtensionObject(); $propData =Array(I3191 => $productid, "propId" => $itemPropId, "propPref" => "cart"); $aPropRes =Array(); $aNone =Array(); $a ="get_prop_desc"; $this->ext->ProcessAction($a, 0, $aNone, $propData, $aPropRes); if(isset($aPropRes["correctedItemPropId"])) {$itemPropId =$aPropRes["correctedItemPropId"]; }$this->itemPropData[$ownerName][$productid][$itemPropId] =$aPropRes["desc_arr"]; }return $itemPropId; }function add($productid, $qty, $priceNumber =0, $itemPropId =0, $itemPrice =0) {$productid =(int)$productid; if(!is_numeric($qty)){ $qty =(float)$qty; }$priceNumber =(int)$priceNumber; $itemPropId =(int)$itemPropId; if(!is_numeric($itemPrice)){ $itemPrice =(float)$itemPrice; }if ($productid >0) {$itemPropId =$this->getPropData($this->ownerName, $productid, $itemPropId); $aEvent =array( 'aProduct' => array( 'id' => $productid, I3192 => &$qty, 'propertyId' => &$itemPropId, 'priceNumber' => &$priceNumber, 'userPrice' => &$itemPrice ),'aProducts' => &$this->items[$this->ownerName], I3193 => &$this->prices[$this->ownerName] );AMI_Event::fire('on_cart_before_add', $aEvent, AMI_Event::MOD_ANY); if(!empty($aEvent['_discard'])){ return false; }if(!isset($this->items[$this->ownerName][$productid][$itemPropId][$priceNumber])) {$this->items[$this->ownerName][$productid][$itemPropId][$priceNumber] =0; $this->prices[$this->ownerName][$productid][$itemPropId][$priceNumber] =0; }$minUnit =$this->cms->Core->GetModOption("eshop_order", "minimal_unit"); $allowFloat =$this->cms->Core->GetModOption(I3194, "allow_fractional_quantity"); if ($allowFloat) {$lastQty =floatval($this->items[$this->ownerName][$productid][$itemPropId][$priceNumber]); $qty =floor($qty /$minUnit) *$minUnit; }else {$lastQty =intval($this->items[$this->ownerName][$productid][$itemPropId][$priceNumber]); }if(!isset($this->lastItem[$this->ownerName][$productid][$itemPropId][$priceNumber])) {$this->lastItem[$this->ownerName][$productid][$itemPropId][$priceNumber] =$lastQty; $this->lastAdded[$this->ownerName][$productid][$itemPropId][$priceNumber] =$lastQty; }$this->items[$this->ownerName][$productid][$itemPropId][$priceNumber] =isset($this->items[$this->ownerName][$productid][$itemPropId][$priceNumber]) ?$this->items[$this->ownerName][$productid][$itemPropId][$priceNumber] +$qty :$qty; if($itemPrice >0) $this->prices[$this->ownerName][$productid][$itemPropId][$priceNumber] =$itemPrice; AMI_Event::fire('on_cart_after_add', $aEvent, AMI_Event::MOD_ANY); SetLocalCookie("is_cart_filled", "1", 0); $this->isCleanup =false; }}function set(&$productid, $qty, $itemPropId =0, $priceNumber =0) {if ($productid >0) {if($this->items[$this->cms->Eshop->ownerName][$productid][$itemPropId][$priceNumber] != $qty) {$aProduct =array( I3195 => $productid, I3192 => &$qty, 'propertyId' => &$itemPropId, 'priceNumber' => &$priceNumber );$aEvent =array( 'aProduct' => $aProduct, 'aProducts' => &$this->items[$this->ownerName], I3193 => &$this->prices[$this->ownerName] );AMI_Event::fire(I3196, $aEvent, AMI_Event::MOD_ANY); if(!empty($aEvent['_discard'])){ return false; }$this->lastItem[$this->cms->Eshop->ownerName][$productid][$itemPropId][$priceNumber] =$this->items[$this->cms->Eshop->ownerName][$productid][$itemPropId][$priceNumber]; if($qty){ $this->items[$this->cms->Eshop->ownerName][$productid][$itemPropId][$priceNumber] =$qty; }else{ $this->remove($productid, $priceNumber, $itemPropId); }$this->getPropData($this->cms->Eshop->ownerName, $productid, $itemPropId); AMI_Event::fire('on_cart_after_set', $aEvent, AMI_Event::MOD_ANY); }$this->isCleanup =false; }}function remove(&$productid, $priceNumber =0, $itemPropId =0) {if (isset($productid)) {$aEvent =array( 'aProduct' => array( I3195 => $productid, 'propertyId' => &$itemPropId, I3197 => &$priceNumber ),'aProducts' => &$this->items[$this->ownerName], I3193 => &$this->prices[$this->ownerName] );AMI_Event::fire('on_cart_before_delete', $aEvent, AMI_Event::MOD_ANY); if(!empty($aEvent['_discard'])){ return false; }unset($this->items[$this->cms->Eshop->ownerName][$productid][$itemPropId][$priceNumber]); unset($this->prices[$this->cms->Eshop->ownerName][$productid][$itemPropId][$priceNumber]); if(isset($this->items[$this->cms->Eshop->ownerName][$productid][$itemPropId]) && sizeof($this->items[$this->cms->Eshop->ownerName][$productid][$itemPropId]) == 0) {unset($this->itemPropData[$this->cms->Eshop->ownerName][$productid][$itemPropId]); }if(empty($this->items[$this->cms->Eshop->ownerName][$productid][$itemPropId])){ unset($this->items[$this->cms->Eshop->ownerName][$productid][$itemPropId]); }if(empty($this->items[$this->cms->Eshop->ownerName][$productid])){ unset($this->items[$this->cms->Eshop->ownerName][$productid]); }AMI_Event::fire('on_cart_after_delete', $aEvent, AMI_Event::MOD_ANY); }}function cleanup() {if(!$this->isCleanup) {$minUnit =$this->cms->Core->GetModOption(I3194, I3198); $allowFloat =$this->cms->Core->GetModOption(I3194, "allow_fractional_quantity"); $minQty =$allowFloat ?(float)$minUnit :1; $this->cms->Eshop->saveCurrentConfig(); foreach($this->cms->Eshop->aCloneOwners as $ownerName=>$tmp) {$this->cms->Eshop->initByOwnerName($ownerName); if(empty($this->items[$ownerName])){ $this->items[$ownerName] =array(); }foreach ($this->items[$ownerName] as $productid => $aItemPropIds) {if(is_array($aItemPropIds)) {foreach($aItemPropIds as $itemPropId => $qtys) {if(is_array($qtys)) {foreach($qtys as $priceNumber => $qty) {if($qty <$minQty) {unset($this->items[$ownerName][$productid][$itemPropId][$priceNumber]); $this->unsetLastItemPrice($productid, $priceNumber, $itemPropId, $ownerName); }elseif($priceNumber >0 && !$this->cms->Eshop->issetPrice($priceNumber)) {unset($this->items[$ownerName][$productid][$itemPropId][$priceNumber]); $this->unsetLastItemPrice($productid, $priceNumber, $itemPropId, $ownerName); }}}if(sizeof($this->items[$ownerName][$productid][$itemPropId]) == 0) {unset($this->items[$ownerName][$productid][$itemPropId]); unset($this->itemPropData[$ownerName][$productid][$itemPropId]); $this->unsetLastItemPropId($productid, $itemPropId, $ownerName); }if(sizeof($this->lastAdded[$ownerName][$productid][$itemPropId]) == 0) {$this->unsetLastItemPropId($productid, $itemPropId, $ownerName); }}}else {unset($this->items[$ownerName][$productid]); unset($this->itemPropData[$ownerName][$productid]); $this->unsetLastItem($productid, $ownerName); }}$inClause =$this->getProductidList($ownerName); if(empty($inClause)) {SetLocalCookie("is_cart_filled", "", -1); continue; };$db =new DB_si; $aProducts =Array(); $aProductIds =Array(); $aProductsPrices =Array(); $emptyTmp =Array(); $filter =""; if($this->cms->Eshop->siteId >0) {$filter =I3199.$this->cms->Eshop->siteId."'"; }$this->createExtensionObject(); $addSql =Array("select"=>"", "from"=>I3200, "join"=>I3200, "where"=>I3200, "group"=>I3200, "order"=>I3200); $aCustom[I3201] ="prop_join"; $aCustom["prefix"] ="i"; $aCustom["propIdList"] =$this->getPropidList($ownerName); $a =I3202; $this->ext->ProcessAction($a, 0, $addSql, $addSql, $aCustom); $sql ="SELECT i.id, i.price AS price0".$this->cms->Eshop->getPriceFields("i.price%d").", i.discount, ". "i.discount_type, i.tax_type, i.max_quantity".$addSql[I3203]. ", i.charge_tax_type, i.tax, i.id_tax_class, i.tax_class_type, i.name, i.allow_fraction AS item_allow_fraction, c.id_discount, c.allow_fraction AS cat_fraction FROM ".$this->cms->Eshop->dbTablePrefix."_items i INNER JOIN ".$this->cms->Eshop->dbTablePrefix."_cats c ON i.id_category=c.id ".$addSql["join"].I3204.$inClause.") AND i.public=1 AND  c.public=1".$filter; $aCustom["record_type"] ="item_record"; $db->query($sql); $aProductProps =Array(); while ($db->next_record()) {$a ="prepare_record"; $this->ext->ProcessAction($a, 0, $db->Record, $none, $aCustom); $aProductIds[] =$db->Record[I3205]; $aItem =Array(); $aItemProp =Array(); $aItem["name"] =$db->Record["name"]; $aItem["discount"] =$db->Record["discount"]; $aItem[I3206] =$db->Record[I3206]; $aItem["tax"] =$db->Record["tax"]; $aItem["tax_type"] =$db->Record["tax_type"]; $aItem[I3207] =$db->Record[I3207]; $aItem["id_tax_class"] =$db->Record["id_tax_class"]; $aItem["tax_class_type"] =$db->Record["tax_class_type"]; $allowItemFract =$db->Record["item_allow_fraction"]; if ($allowFloat && $allowItemFract) {if (isset($this->items[$ownerName][$db->Record[I3205]][0][0])) {$qTemp =round($this->items[$ownerName][$db->Record[I3205]][0][0] /$minUnit) *$minUnit; $this->items[$ownerName][$db->Record[I3205]][0][0] =$qTemp; if (preg_match("/^\d+$/", $this->items[$ownerName][$db->Record[I3205]][0][0])) {$this->items[$ownerName][$db->Record[I3205]][0][0] =$this->items[$ownerName][$db->Record[I3205]][0][0].".0"; }}}else {if (isset($this->items[$ownerName][$db->Record[I3205]][0][0])) {$this->items[$ownerName][$db->Record[I3205]][0][0] =intval($this->items[$ownerName][$db->Record[I3205]][0][0]); }}for($i=0;$i<$this->cms->Eshop->numPrices;$i++) {$aItemProp["price".$this->cms->Eshop->priceFields[$i]] =$db->Record["price".$this->cms->Eshop->priceFields[$i]]; }$aItemProp[I3208] =$db->Record[I3208]; $aItemProp["max_quantity"] =$db->Record["max_quantity"]; $aProducts[$db->Record[I3205]] =$aItem; $propId =intval($db->Record["propId"]); $aProductProps[$db->Record[I3205]][$propId] =$aItemProp; }foreach($this->items[$ownerName] as $item => $aItemPropIds) {if(!in_array($item, $aProductIds)) {unset($this->items[$ownerName][$item]); unset($this->itemPropData[$ownerName][$productid]); $this->unsetLastItem($item, $ownerName); }else {foreach($aItemPropIds as $itemPropId => $val) {$maxQuantity =$aProductProps[$item][$itemPropId]["max_quantity"]; if($maxQuantity >0 ){$totalQty =0; foreach($val as $numPrice => $qty) {$totalQty += $qty; }if($maxQuantity <$totalQty) {$lastItemQty =0; $priceFields =$this->cms->Eshop->priceFields; $priceFields[] =0; for($i=0;$i<=$this->cms->Eshop->numPrices;$i++) {$numPrice =$priceFields[$i]; if(isset($this->lastItem[$ownerName][$item][$itemPropId][$numPrice])) {$lastItemQty += $this->lastItem[$ownerName][$item][$itemPropId][$numPrice]; }elseif(isset($this->items[$ownerName][$item][$itemPropId][$numPrice])) {$lastItemQty += $this->items[$ownerName][$item][$itemPropId][$numPrice]; }}$propertyInfo =strip_tags($this->_getPropInfoByPropData($this->itemPropData[$ownerName][$item][$itemPropId])); $this->errCode[] =Array(I3209=>1, "text"=>"max_quantity_".(($lastItemQty == $maxQuantity) ?"full" :"overflow"), I3210=>$aProducts[$item][I3210], "property_info" => $propertyInfo, "max_quantity"=>$maxQuantity, "type"=>"err"); $this->unsetLastItemPropId($productid, $itemPropId, $ownerName); if(isset($this->lastItem[$ownerName][$item][$itemPropId])) {$aTmp =array_keys($this->lastItem[$ownerName][$item][$itemPropId]); $qtyOver =$totalQty -$maxQuantity; foreach($aTmp as $tmpKey => $lastNumPrice) {$increment =$this->items[$ownerName][$item][$itemPropId][$lastNumPrice] -$this->lastItem[$ownerName][$item][$itemPropId][$lastNumPrice]; if($increment >0) {if($qtyOver <$increment) {$this->items[$ownerName][$item][$itemPropId][$lastNumPrice] =$this->lastItem[$ownerName][$item][$itemPropId][$lastNumPrice] +$increment -$qtyOver; break; }else {$qtyOver -= ($this->items[$ownerName][$item][$itemPropId][$lastNumPrice] -$this->lastItem[$ownerName][$item][$itemPropId][$lastNumPrice]); $this->items[$ownerName][$item][$itemPropId][$lastNumPrice] =$this->lastItem[$ownerName][$item][$itemPropId][$lastNumPrice]; }if($this->items[$ownerName][$item][$itemPropId][$lastNumPrice] == 0) {unset($this->items[$ownerName][$item][$itemPropId][$lastNumPrice]); }}}}else {unset($this->items[$ownerName][$item][$itemPropId]); unset($this->itemPropData[$ownerName][$productid][$itemPropId]); }}}foreach($val as $numPrice => $qty) {$aPrice =$this->cms->Eshop->calcPrice( $aProductProps[$item][$itemPropId][I3211.$numPrice], $numPrice, $aProducts[$item]["tax"], $aProducts[$item]["tax_type"], $aProducts[$item][I3207], $aProducts[$item]["discount"], $aProducts[$item][I3206], $this->cms->Eshop->baseCurrency, $this->cms->Eshop->baseCurrency, false, false, array( "tax_class_type" => $aProducts[$item][I3212], "id_tax_class" => $aProducts[$item]["id_tax_class"] ));if($aPrice["price_null"]) {if(!$this->cms->Eshop->nullPriceIsBuy) {unset($this->items[$ownerName][$item][$itemPropId][$numPrice]); $this->unsetLastItemPrice($item, $numPrice, $itemPropId, $ownerName); }}elseif($aPrice["price_zero"]) {if(!$this->cms->Eshop->zeroPriceIsBuy) {unset($this->items[$ownerName][$item][$itemPropId][$numPrice]); $this->unsetLastItemPrice($item, $numPrice, $itemPropId, $ownerName); }}elseif(!$aPrice[I3213]) {if(!$this->cms->Eshop->isBuyPrice($numPrice)) {unset($this->items[$ownerName][$item][$itemPropId][$numPrice]); $this->unsetLastItemPrice($item, $numPrice, $itemPropId, $ownerName); }}}}}}if(is_array($this->lastAdded[$ownerName]) && sizeof($this->lastAdded[$ownerName]) >0) {foreach($this->lastAdded[$ownerName] as $item => $aItemPropIds) {foreach($aItemPropIds as $itemPropId => $val) {$sumLastQty =0; $sumQty =0; foreach($val as $numPrice=>$lastQty) {$sumLastQty += $lastQty; $sumQty += $this->items[$ownerName][$item][$itemPropId][$numPrice]; }$propertyInfo =strip_tags($this->_getPropInfoByPropData($this->itemPropData[$ownerName][$item][$itemPropId])); if (!$this->checkShippingConflicts($db)) {$this->errCode[] =Array( I3209 => 101, "text" => "warn_shipping_conflicts", I3210 => $aProducts[$item][I3210], "property_info" => $propertyInfo, "type" => I3214 );unset($this->items[$ownerName][$item]); continue 2; }$this->errCode[] =Array(I3209=>100, "text"=>"item_added", I3210=>$aProducts[$item][I3210], "property_info" => $propertyInfo, "type"=>I3214, I3215=>($sumQty -$sumLastQty)); }}}}if($this->itemcount()==0){ SetLocalCookie("is_cart_filled", I3200, -1); }unset($this->lastItem); $this->cms->Eshop->setSavedConfig(); }}function itemcount() {$count =0; foreach($this->cms->Eshop->aCloneOwners as $ownerName=>$tmp) {foreach ($this->items[$ownerName] as $productid => $aItemPropIds) {foreach($aItemPropIds as $itemPropId => $qtys) {foreach ($qtys as $num => $qty) {$count += $qty; }}}}$this->isEmpty =($count == 0); return $count; }function itemcountTpl() {$count =0; foreach($this->cms->Eshop->aCloneOwners as $ownerName=>$tmp) {if(empty($this->items[$ownerName])){ continue; }foreach ($this->items[$ownerName] as $productid => $aItemPropIds) {foreach($aItemPropIds as $itemPropId => $qtys) {foreach ($qtys as $num => $qty) {$count += is_numeric($qty) ?$qty :1; }}}}$this->isEmpty =($count == 0); return $count; }function getProductidList($ownerName =I3200) {$productid_list =I3200; if($ownerName == I3200) {$aCloneOwners =$this->cms->Eshop->aCloneOwners; }else {$aCloneOwners =Array($ownerName => 1); }foreach($aCloneOwners as $ownerName=>$tmp) {foreach ($this->items[$ownerName] as $productid => $info) {$productid_list .= ",'" .$productid ."'"; }}return mb_substr($productid_list, 1); }function getPropidList($ownerName =I3200) {$aPropIds =Array(); $aPropId =array_keys($this->items[$ownerName]); foreach ($this->items[$ownerName] as $productid => $aPropIdsTmp) {$aPropIds =array_merge($aPropIds, array_keys($aPropIdsTmp)); }return "'".implode(I3216, $aPropIds)."'"; }function getQuantity($ownerName, $productId, $itemPropId, $priceNumber =-1) {$qty =0; if($priceNumber == -1) {foreach($this->items[$ownerName][$productId][$itemPropId] as $priceNumber => $pQty) {$qty += $pQty; }}else {$qty =$this->items[$ownerName][$productId][$itemPropId][$priceNumber]; }return $qty; }function getProductPrices($productId, $itemPropId) {return $this->items[$this->cms->Eshop->ownerName][$productId][$itemPropId]; }function getItems() {return $this->items; }function recalcTotal(&$db, $withTax =false, $owner =null) {$this->cms->Eshop->saveCurrentConfig(); $ownersSource =is_null($owner) ?$this->cms->Eshop->aCloneOwners :array ($owner => 1); $customChanged =false; if (!$this->_recallMethodMode) {$this->cms->Eshop->productsGroupedByDiscountIds =array ();}do {$this->total =0; $this->baseCurrencyTotal =0; $this->grandDiscount =0; $bcTotalByOwner =array(); foreach($this->cms->Eshop->aCloneOwners as $ownerName=>$tmp) {if (is_null($owner)) {$this->cms->Eshop->initByOwnerName($ownerName); }$bcTotalByOwner[$ownerName] =0; $inClause =$this->getProductidList($ownerName); if(empty($inClause)) {continue; };if(!$withTax) {$this->cms->Eshop->setForceTaxOff(); }$this->createExtensionObject(); $addSql =Array(I3203=>I3200, "from"=>I3200, "join"=>I3200, "where"=>I3200, I3217=>I3200, "order"=>I3200); $aCustom[I3201] ="prop_join"; $aCustom["prefix"] ="i"; $aCustom[I3218] =$this->getPropidList($ownerName); $a =I3202; $this->ext->ProcessAction($a, 0, $addSql, $addSql, $aCustom); $sql ="SELECT i.id, i.name, i.price AS price0".$addSql[I3203]. $this->cms->Eshop->getPriceFields("i.price%d, SUBSTRING(c.price%d, INSTR(c.price%d, '#')+1,3) AS currency%d, SUBSTRING(c.price%d, INSTR(c.price%d, ':')+1, 3) AS db_currency%d"). ", i.discount, i.discount_type, i.tax, i.tax_type, i.charge_tax_type, i.shipping, i.shipping_type, i.sublink, i.tax_class_type, i.id_tax_class, ". "(LENGTH(i.description) = 0) AS descr_empty, c.id AS cat_id, c.id_discount, c.allow_fraction, i.item_type ". I3219.$this->cms->Eshop->dbTablePrefix."_items i INNER JOIN ".$this->cms->Eshop->dbTablePrefix."_cats c ON i.id_category=c.id ".$addSql["join"].I3204.$inClause.") AND i.public=1"; $db->query($sql); $none =false; $aCustom[I3220] ="item_record"; $aRecord =Array(); $itemNum =0; while ($db->next_record()) {if(isset($db->Record["is_prop"]) && $db->Record["is_prop"] == 0 && is_array($this->items[$ownerName][$db->Record[I3205]])) {foreach($this->items[$ownerName][$db->Record[I3205]] as $propId => $aTmp) {$aRecord[$itemNum] =$db->Record; if($propId != 0) {$aRecord[$itemNum]["is_prop"] =1; }else if($db->Record[I3221] === "eshop_account" && $db->Record[I3208] == I3200 && $this->prices[$ownerName][$db->Record[I3205]][0][0] >0){ $aRecord[$itemNum][I3208] =$this->prices[$ownerName][$db->Record[I3205]][0][0]; $aRecord[$itemNum]["variable_price"] =true; $this->items[$ownerName][$db->Record[I3205]][0][0] =1; }$aRecord[$itemNum++]["propId"] =$propId; }}else {$aRecord[$itemNum++] =$db->Record; }}$index =0; $minUnit =$this->cms->Core->GetModOption(I3194, I3198); $allowFloat =$this->cms->Core->GetModOption(I3194, "allow_fractional_quantity"); foreach($aRecord as $record) {$a =I3222; $this->ext->ProcessAction($a, 0, $record, $none, $aCustom); $cartItem =Array("db_record" => &$record, "prices" => &$this->items[$this->cms->Eshop->ownerName][$record[I3205]], "variable_prices" => &$this->prices[$this->cms->Eshop->ownerName][$record[I3205]], "owner_name" => $ownerName); EventApplyVars($this->cms, "eshop_cart_calc_total", $cartItem); $itemPropId =$record["propId"]; $this->applyPriceNumDiscount($index, $record, $itemPropId); $aProductPrices =$this->getProductPrices($record[I3205], $itemPropId); foreach($aProductPrices as $numPrice => $quantity) {if ($record["variable_price"]) {$quantity =1; }$aPrice =$this->cms->Eshop->calcPrice( $record[I3211.$numPrice], $numPrice, $record["tax"], $record["tax_type"], $record[I3207], $record[I3223], $record[I3206], $this->currency, $record["db_currency".$numPrice], false, array ("qty" => $quantity, "id_discount" => $record["id_discount"], I3224 => $index, 'personal_discount' => $this->personalDiscount ),array( I3212 => $record[I3212], "id_tax_class" => $record["id_tax_class"] ));$this->total += $quantity *$aPrice["price_value"]; $bcTotalByOwner[$ownerName] += ($delta =$quantity *$record[I3211.$numPrice]); $this->baseCurrencyTotal += $delta; $this->grandDiscount += $quantity *($record[I3211.$numPrice] -$aPrice[I3225]); $this->groupProductsByDiscounts($index, $numPrice, $quantity, $record); $index++; }}$this->cms->Eshop->resetForceTaxOff(); if ($this->cms->Eshop->totalDiscountsArePresent && !$this->_recallMethodMode) {$this->_recallMethodMode =$this->cms->Eshop->useTotalDiscounts =true; $this->cms->Eshop->totalForDiscounts =$bcTotalByOwner[$ownerName]; $this->recalcTotal($db, $withTax, $ownerName); $this->_recallMethodMode =$this->cms->Eshop->useTotalDiscounts =false; }}$aVars =Array("total" => $this->total, "changed" => &$customChanged); EventApplyVars($this->cms, "eshop_cart_calc_total_final", $aVars); }while($customChanged); $this->cms->Eshop->setSavedConfig(); }function calcPayment(&$db, &$items, $withTax =false, $withOrder =false, $ownerName =I3200, $aAddItemFields =Array()) {$oExtEshopCustomFields_CommonStorage =$GLOBALS['ExtEshopCustomFields_CommonStorage']; if ($this->_useShippingModule && is_array($this->selectedShippingMethodsToProductsIndices) && !is_array($this->_productsIndicesToShippingMethods) ){$this->_productsIndicesToShippingMethods =array ();foreach ($this->selectedShippingMethodsToProductsIndices as $metodId => $indices) {foreach ($indices as $index) {$this->_productsIndicesToShippingMethods[$index] =$metodId; }}}if (!$this->_recallMethodMode) {$this->cms->Eshop->productsGroupedByDiscountIds =array ();}$items =array(); $index =0; $price =0; $fullPrice =0; $tax =0; $taxItem =0; $shipping =0; $totalWeight =0; $shippingChanged =false; $this->cms->Eshop->totalDiscountsArePresent =false; $this->shippingTypesToProductsIndices =array ();$this->_dataGroupedByShippingMethods =array (I3226 => array (),"weights" => array (),"currencyRates" => array ());$_ownerName =$ownerName; $this->cms->Eshop->saveCurrentConfig(); if($ownerName == I3200) {$aCloneOwners =$this->cms->Eshop->aCloneOwners; }else {$aCloneOwners =Array($ownerName); }$addItemFields =implode(", i.", $aAddItemFields); if($addItemFields != I3200) {$addItemFields =", i.".$addItemFields; }foreach($aCloneOwners as $ownerName=>$tmp) {$this->cms->Eshop->initByOwnerName($ownerName); $aAvailableShippingFields =array(); if($this->cms->Core->issetModOption($ownerName.I3227, "available_shipping_fields")){ $aAvailableShippingFields =$this->cms->Core->GetModOption($ownerName.I3227, "available_shipping_fields"); }$inClause =$this->getProductidList($ownerName); if($inClause!=I3200) {$this->createExtensionObject(); $addSql =Array(I3203=>I3200, "from"=>I3200, "join"=>I3200, I3228=>I3200, I3217=>I3200, "order"=>I3200); $aCustom[I3201] ="prop_join"; $aCustom["prefix"] ="i"; $aCustom[I3218] =$this->getPropidList($ownerName); $none =false; $a =I3202; $this->ext->ProcessAction($a, 0, $addSql, $addSql, $aCustom); $addCustomFieldsSql =array(I3203 => I3200, I3229 => I3200, "join" => I3200, I3228 => I3200, I3217 => I3200, "order" => I3200); $aTmpCustom =array('sql_type' => 'home_fields', I3230 => true); if(!$this->ext->mod){ $this->ext->mod =&$this->cms->Eshop; }$a ='add_extention_sql'; $this->ext->ProcessAction($a, 0, $addCustomFieldsSql, $addCustomFieldsSql, $aTmpCustom); $sql ="SELECT
                    i.id,
                    i.id_external,
                    i.name,
                    i.price AS price0" .$addSql[I3203] .$addCustomFieldsSql[I3203] .$addItemFields. $this->cms->Eshop->getPriceFields("
                    i.price%d,
                    SUBSTRING(c.price%d, INSTR(c.price%d, '#')+1, 3) AS currency%d,
                    SUBSTRING(c.price%d, INSTR(c.price%d, ':')+1, 3) AS db_currency%d" ).", i.discount,
                  i.sku,
                  i.discount_type,
                  i.tax,
                  i.item_type,
                  i.tax_type,
                  i.tax_class_type,". "c.tax_class_type AS cat_tax_class_type,
                  i.id_tax_class,
                  c.id_tax_class AS cat_id_tax_class,
                  i.charge_tax_type,
                  i.shipping,
                  i.shipping_type,
                  i.sublink,
                  i.ext_small_picture,
                  i.ext_picture,
                  i.ext_popup_picture,
                  (LENGTH(i.description) = 0) AS descr_empty,
                  c.id AS cat_id, c.name AS cat_name,
                  c.id_discount,
                  c.allow_fraction AS cat_fraction,
                  i.id_shipping_type, c.id_shipping_type
                  cat_id_shipping_type,
                  i.weight,
                  i.size,
                  tc.tax_rate AS tc_tax_rate,
                  tc.tax_type AS tc_tax_type,
                  tc.tax_apply_type AS tc_tax_apply_type
                FROM ".$this->cms->Eshop->dbTablePrefix."_items i
                INNER JOIN ". $this->cms->Eshop->dbTablePrefix."_cats c ON i.id_category=c.id ".$addSql["join"]. " LEFT JOIN cms_es_tax_classes tc ON i.id_tax_class = tc.id". I3204.$inClause.I3231; $db->query($sql); $aCustom[I3220] ="item_record"; $aRecord =Array(); $itemNum =0; while($db->next_record()) {if(isset($db->Record["is_prop"]) && $db->Record["is_prop"] == 0 && is_array($this->items[$ownerName][$db->Record[I3205]])) {foreach($this->items[$ownerName][$db->Record[I3205]] as $propId => $aTmp) {$aRecord[$itemNum] =$db->Record; $catFrac =$db->Record['cat_fraction']; if($propId != 0) {$aRecord[$itemNum][I3232] =1; }else if($db->Record[I3221] === "eshop_account" && $db->Record[I3208] == I3200 && $this->prices[$ownerName][$db->Record[I3205]][0][0] >0){ $aRecord[$itemNum][I3208] =$this->prices[$ownerName][$db->Record[I3205]][0][0]; $aRecord[$itemNum]["variable_price"] =true; $this->items[$ownerName][$db->Record[I3205]][0][0] =1; }$aRecord[$itemNum++]["propId"] =$propId; }}else {$aRecord[$itemNum++] =$db->Record; }}if($this->cms->Core->IsInstalled($ownerName."_tax_classes") && $this->cms->Core->issetModOption($ownerName.I3233, "tax_scheme")){ $taxScheme =$this->cms->Core->GetModOption($ownerName.I3233, "tax_scheme"); }else{ $taxScheme =$this->cms->Eshop->mEshop->GetOption('tax_scheme'); }$shippingScheme =$this->cms->Eshop->mEshop->GetOption('shipping_scheme'); foreach($aRecord as $record) {$record[I3234] =$record[I3234] >0 ?$record[I3234] :$record["cat_id_shipping_type"]; $a =I3222; $this->ext->ProcessAction($a, 0, $record, $none, $aCustom); $cartItem =Array("db_record" => &$record, I3226 => &$this->items[$this->cms->Eshop->ownerName][$record[I3205]], "owner" => $ownerName, "total" => $this->total); EventApplyVars($this->cms, "eshop_cart_calc_item", $cartItem); $itemPropId =$record["propId"]; $this->applyPriceNumDiscount($index, $record, $itemPropId); $this->cms->Eshop->calcTaxes($record); $aPrices =$this->getProductPrices($record[I3205], $itemPropId); if(sizeof($aPrices) >0) {foreach($aPrices as $numPrice => $qty) {$showPriceWithTax =($this->cms->Eshop->priceWithTax($numPrice) && $withTax); $currency =$this->currency; $currencyRate =$this->cms->Eshop->getCurrencyRate($currency); $dbCurrency =$record["db_currency".$numPrice]; if(!$withTax) {$this->cms->Eshop->setForceTaxOff(); }$aPrice =$this->cms->Eshop->calcPrice( $record[I3211.$numPrice], $numPrice, $record["tax"], $record["tax_type"], $record[I3207], $record[I3223], $record[I3206], $currency, $dbCurrency, true, array (I3235 => $qty, "id_discount" => $record["id_discount"], I3224 => $index, 'personal_discount' => $this->personalDiscount ),array( I3212 => $record[I3212], "id_tax_class" => $record[I3236] ));$this->cms->Eshop->resetForceTaxOff(); $this->cms->Eshop->setForceTaxOn(); $aPriceWithTax =$this->cms->Eshop->calcPrice( $record[I3211.$numPrice], $numPrice, $record["tax"], $record["tax_type"], $record[I3207], $record[I3223], $record[I3206], $currency, $dbCurrency, true, array (I3235 => $qty, "id_discount" => $record["id_discount"], I3224 => $index, I3237 => $this->personalDiscount ),array( I3212 => $record[I3212], I3236 => $record[I3236] ));$this->cms->Eshop->resetForceTaxOn(); $priceValue =$aPrice["price_exact_value"]; $originalPrice =$aPrice["originalNotFormattedPrice"]; $priceDifferencePercentage =$aPrice["percent"]; $priceDifferenceAbsolute =$this->cms->Eshop->convertCurrency($aPrice["bc_difference"], $this->cms->Eshop->baseCurrency, $currency); $priceWithTax =$aPriceWithTax[I3238]; $priceOrderValue =$aPrice[I3238]; $currencyRate =$this->cms->Eshop->convertCurrency($currencyRate, $currency, $this->currency); if(!$showPriceWithTax) {$calculateShipping =true; if($this->cms->Eshop->isApplyCalcs($numPrice)) {$taxValue =$record["tax"]; if($record[I3207] == "charge") {$taxItem =$this->cms->Eshop->getTax($aPrice[I3225], $taxValue, $record["tax_type"], $currencyRate); $taxItemExact =$taxItem; $taxItem =$this->cms->Eshop->formatNumber($taxItem, false, true); }else {if($withTax) {$this->cms->Eshop->setForceTaxOff(); $aPriceTmp =$this->cms->Eshop->calcPrice( $record[I3211.$numPrice], $numPrice, $record["tax"], $record[I3239], $record[I3207], $record[I3223], $record[I3206], $this->currency, $dbCurrency, true, array (I3235 => $qty, "id_discount" => $record["id_discount"], I3224 => $index, I3237 => $this->personalDiscount ),array( I3212 => $record[I3212], I3236 => $record[I3236] ));$this->cms->Eshop->resetForceTaxOff(); $priceWithoutTax =$aPriceTmp[I3238]; $priceWithoutTaxR =$aPriceTmp[I3225]; }else {$priceWithoutTax =$priceValue; $priceWithoutTaxR =$aPrice[I3225]; }$taxItem =$priceWithTax -$priceWithoutTaxR; $taxItemExact =$taxItem; $taxItem =$this->cms->Eshop->formatNumber($taxItem, false, true); }if ($this->_useShippingModule && $record[I3234] != 0 && is_array($this->selectedShippingMethodsToProductsIndices) ){$calculateShipping =false; $shippingItem =0; $shippingMethodId =$this->_productsIndicesToShippingMethods[$index]; if (isset($this->_dataGroupedByShippingMethods[I3226][$shippingMethodId])) {$this->_dataGroupedByShippingMethods[I3226][$shippingMethodId] += ($priceValue *$qty); $this->_dataGroupedByShippingMethods["weights"][$shippingMethodId] += ($record["weight"] *$qty); }else {$this->_dataGroupedByShippingMethods[I3226][$shippingMethodId] =$priceValue *$qty; $this->_dataGroupedByShippingMethods[I3240][$shippingMethodId] =$record["weight"] *$qty; $this->_dataGroupedByShippingMethods["currencyRates"][$shippingMethodId] =$currencyRate; }}else {$shippingItem =$this->cms->Eshop->getTax($priceValue, $record["shipping"], $record["shipping_type"], $currencyRate); }switch($taxScheme) {case I3241: $tax += $qty *$taxItem; break; case 'no': $taxItem =0; $taxValue =0; $taxItemExact =0; break; }}if ($calculateShipping && $record[I3221] != "eshop_digitals") {$_shippingItem =$qty *$shippingItem; switch ($shippingScheme) {case I3241: $shipping += $_shippingItem; break; case 'max': $shipping =max($shipping, $_shippingItem); break; case 'min': if ($_shippingItem >0) {$shipping =$shippingChanged ?min($shipping, $_shippingItem) :$_shippingItem; $shippingChanged =true; }break; }}else {$shippingItem =0; }}else {$shippingItem =0; $taxItem =0; $taxItemExact =0; $taxValue =0; }$price += $qty *$this->cms->Eshop->formatNumber($priceValue, false, true); $fullPrice += $qty *$this->cms->Eshop->formatNumber($priceWithTax, false, true); $totalWeight += $record[I3242] *$qty; $taxItemValue =$record["tax"]; if($withOrder && $this->cms->Eshop->priceWithTax($numPrice)) {$aPriceTmp =$this->cms->Eshop->calcPrice( $record[I3211.$numPrice], $numPrice, $record["tax"], $record[I3239], $record[I3207], $record[I3223], $record[I3206], $currency, $dbCurrency, true, array (I3235 => $qty, "id_discount" => $record["id_discount"], I3224 => $index, I3237 => $this->personalDiscount ),array( I3212 => $record[I3212], I3236 => $record[I3236] ));$priceOrderValue =$aPriceTmp[I3238]; }$aItemData =Array(); $aItemData[I3205] =$record[I3205]; $aItemData[I3243] =$record[I3243]; $aItemData[I3221] =$record[I3221]; $aItemData["variable_price"] =$record["variable_price"] ?1 :0; $aItemData["cat_id"] =$record["cat_id"]; $aItemData[I3244] =$itemPropId; $aItemData["id_external"] =$record["id_external"]; $aItemData[I3210] =$record[I3210]; $aItemData["cat_name"] =$record["cat_name"]; $aItemData[I3245] =$this->itemPropData[$ownerName][$record[I3205]][$itemPropId]; $aItemData["sku"] =$record["sku"]; $aItemData["sublink"] =$record["sublink"]; $aItemData[I3246] =$record[I3246]; $aItemData[I3211] =$aPrice[I3225]; $aItemData["cur_price"] =$priceValue; $aItemData["cur_price_tax"] =$priceWithTax; $aItemData["order_price"] =$priceOrderValue; $aItemData["original_price"] =$originalPrice; $aItemData[I3247] =$this->cms->Eshop->formatNumber($priceDifferenceAbsolute, true, true); $aItemData["percentage_discount"] =$priceDifferencePercentage; if ($this->_useShippingModule && is_array($this->selectedShippingMethodsToProductsIndices)) {$aItemData["shipping_method_name"] =$this->cms->Eshop->shippingData["methodsNames"][$this->_productsIndicesToShippingMethods[$index]]; }$aItemData["tax"] =$taxItem *$qty; $aItemData[I3248] =$taxItemValue; $aItemData[I3239] =$record[I3239]; $aItemData["tax_item"] =$taxItemExact; $aItemData["shipping"] =$shippingItem *($multiplyShippingCostByQty ?$qty :1); $aItemData["shipping_type"] =$record["shipping_type"]; $aItemData[I3249] =$shippingItem; $aItemData["price_number"] =$numPrice; $aItemData["price_null"] =$aPrice["price_null"]; $aItemData["currency"] =$currency; $aItemData[I3250] =$ownerName; $aItemData[I3242] =$record[I3242]; $aItemData["size"] =$record["size"]; foreach($aAddItemFields as $fieldName) {$aItemData[$fieldName] =$record[$fieldName]; }foreach(Array("picture", "small_picture", I3251) as $pic){ $aItemData[$pic] =$record['ext_'.$pic]; }foreach($oExtEshopCustomFields_CommonStorage->homeFields as $homeField){ if(in_array('custom_field_'.$homeField, $aAvailableShippingFields)){ $aItemData['custom_field_'.$homeField] =$record['custom_field_'.$homeField]; }}$items[$index] =$aItemData; $this->shippingTypesToProductsIndices[$record[I3234]][] =$index; $this->groupProductsByDiscounts($index, $numPrice, $qty, $record); $index++; }}}if($index >0) {if ($this->_useShippingModule && sizeof($this->_dataGroupedByShippingMethods[I3226])) {$shippingMethodIds =array_keys($this->_dataGroupedByShippingMethods[I3226]); $shippingTax =0; foreach ($shippingMethodIds as $shippingMethodId) {$shippingItem =$this->_getGroupedShipping($shippingMethodId, $this->_dataGroupedByShippingMethods[I3252][$shippingMethodId]); $i =$this->selectedShippingMethodsToProductsIndices[$shippingMethodId][0]; if(isset($items[$i]) && is_array($items[$i])){ $items[$i] =array_merge($items[$i], array ("shipping" => $shippingItem, I3249 => $shippingItem ));}if ($this->cms->Eshop->_taxesData['tax_system'] == 'us' && isset($this->cms->Eshop->taxShippingData[$shippingMethodId]) && $this->cms->Eshop->taxShippingData[$shippingMethodId]['tax_class_type'] == I3253 ){$applyTaxForShipping =true; }else {$applyTaxForShipping =false; }switch ($shippingScheme) {case I3241: $shipping += $shippingItem; if ($applyTaxForShipping) {$shippingTax += $shippingItem; }break; case 'max': $shipping =max($shipping, $shippingItem); if ($applyTaxForShipping) {$shippingTax =$shipping; }break; case 'min': if ($shippingItem >0) {$shipping =$shippingChanged ?min($shipping, $shippingItem) :$shippingItem; if ($applyTaxForShipping) {$shippingTax =$shipping; }$shippingChanged =true; }break; }}}$shippingConst =doubleval($this->cms->Eshop->mEshop->GetOption('shipping_const')); $shippingConst =$this->cms->Eshop->convertCurrency($shippingConst, $this->cms->Eshop->baseCurrency, $this->currency); $shipping += $shippingConst; $aShipCondition =$this->cms->Eshop->mEshop->GetOption('shipping_conditions'); $aShipCondition =$aShipCondition[$this->cms->lang_data]; if(!$this->_useShippingModule && is_array($aShipCondition[I3254]) && sizeof($aShipCondition[I3254]) >0) {$cCurrency =$aShipCondition["currency"]; $quantity =$this->itemcount(); $shippingScheme =$this->cms->Eshop->convertCurrency($shipping, $this->currency, $cCurrency); foreach($aShipCondition[I3254] as $cond => $value) {$evalRes =false; if($cond != I3200) {$priceCond =$this->cms->Eshop->convertCurrency($price, $this->currency, $cCurrency); $fullPriceCond =$this->cms->Eshop->convertCurrency($fullPrice, $this->currency, $cCurrency); $cond =str_replace("shipping_scheme", $shippingScheme, $cond); $cond =str_replace("total_with_tax", $fullPriceCond, $cond); $cond =str_replace("total", $priceCond, $cond); $cond =str_replace(I3215, $quantity, $cond); $cond =I3255.$cond.");"; @eval($cond); if($evalRes) {if(is_numeric($value)) {$shipping =$this->cms->Eshop->convertCurrency(doubleval($value), $cCurrency, $this->currency); }else {$evalRes =false; $value =str_replace("shipping_scheme", $shippingScheme, $value); $value =str_replace("total_with_tax", $fullPriceCond, $value); $value =str_replace("total", $priceCond, $value); $value =str_replace(I3215, $quantity, $value); $res =@eval(I3256.$value.";"); $shipping =$this->cms->Eshop->convertCurrency(doubleval($evalRes), $cCurrency, $this->currency); }}}}}if($showPriceWithTax) {$tax =0; }$excise_tax =0; $shipping_tax =0; if (($taxScheme != 'no') && $this->cms->Eshop->_taxesData['tax_system'] == 'us') {$excise_tax =$this->cms->Eshop->_taxesData[I3257]; if ($shippingTax && $this->cms->Eshop->_taxesData['percent'] >0) {$shipping_tax =$this->cms->Eshop->getTax($shippingTax, $this->cms->Eshop->_taxesData['percent'], 'percent', $currencyRate); $tax += $shipping_tax; }}$aTotal =Array(); $aTotal[I3205] ="total"; $aTotal[I3225] =$price; $this->total =$price; $aTotal[I3258] =$tax; $aTotal["excise_tax"] =$excise_tax; $aTotal["shipping_tax"] =$shipping_tax; $aTotal["shipping_value"] =$shipping; EventApplyVars($this->cms, "eshop_cart_calc_final", $aTotal); $aTotal[I3259] =$this->cms->Eshop->formatNumber($aTotal["shipping_value"], true, true); $aTotal[I3211] =$this->cms->Eshop->formatNumber($aTotal[I3225], true, true); $aTotal["tax"] =$this->cms->Eshop->formatNumber($aTotal[I3258], true, true); $aTotal["total_weight"] =$totalWeight; $items[$index] =$aTotal; if ($this->cms->Eshop->totalDiscountsArePresent && !$this->_recallMethodMode) {$this->_recallMethodMode =$this->cms->Eshop->useTotalDiscounts =true; $this->cms->Eshop->totalForDiscounts =$this->baseCurrencyTotal; $this->calcPayment($db, $items, $withTax, $withOrder, $_ownerName, $aAddItemFields); $this->_recallMethodMode =$this->cms->Eshop->useTotalDiscounts =false; }}}}$this->cms->Eshop->setSavedConfig(); }function InsertItems(&$itemsArray, $order_id, $priceInfo, &$aExtInfo) {$order_id =(int)$order_id; $db =new DB_si; $countItems =sizeof($itemsArray) -1; $aOwners =Array(); $aOwnersTmp =Array(); $propData =array("desc_arr" => I3200, I3260 => "item", "blockName" => "cart"); $this->createExtensionObject(); $unrealPropIdCounter =0; for($index=0; $index <$countItems; $index++) {$extData =Array(); $id =$itemsArray[$index][I3205]; $idProp =$itemsArray[$index][I3244]; if($itemsArray[$index]["price_null"]) {$price =I3261; }else {$price =$itemsArray[$index]["order_price"]; }$priceNumber =$itemsArray[$index]["price_number"]; $name =$itemsArray[$index][I3210]; $qty =$this->getQuantity($itemsArray[$index][I3250], $id, $idProp, $priceNumber); if($priceNumber >0) {$extData["price_captions"][$id][$priceNumber] =$priceInfo["captions"][$id][$priceNumber]; $currency =$priceInfo[I3262][$id][$priceNumber]; }else {$currency =$this->cms->Eshop->baseCurrency; }$extData["price_currency"][$id][$priceNumber] =Array("code" => $currency, "exchange" => $this->cms->Eshop->getCurrencyRate($currency)); $extData[I3210] =$itemsArray[$index][I3210]; $extData[I3262] =Array("code"=>$this->currency, I3263=>$this->cms->Eshop->getCurrencyRate($this->currency)); $extData["item_info"] =$itemsArray[$index]; if(!is_numeric($idProp)) {$idProp =-(++$unrealPropIdCounter); $extData["item_info"][I3244] =$idProp; }if($idProp != 0) {$aPropRes =Array(); $aNone =Array(); $propData["desc_arr"] =$itemsArray[$index][I3245]; $a ="get_prop_desc_by_arr"; $this->ext->ProcessAction($a, 0, $aNone, $propData, $aPropRes); $extData[I3264] =strip_tags($aPropRes["desc"]); }else {$extData[I3264] =I3200; }$extData[I3247] =$itemsArray[$index][I3247]; $extData["percentage_discount"] =$itemsArray[$index]["percentage_discount"]; if(isset($aExtInfo[$id])) {$extData["ext_info"] =$aExtInfo[$id]; }$aOwnersTmp[$extData[I3265][I3250]] =1; $asql =Array( "id_order"=>$order_id, "id_product"=>$id, I3244=>$idProp, I3250=>$extData[I3265][I3250], I3211=>$price, "price_number"=>$priceNumber, I3235=>$qty, "ext_data"=>addslashes(serialize($extData))); $sql =$db->GenInsertSQL(I3266, $asql); $db->query($sql); $aOwners =array_keys($aOwnersTmp); }return $aOwners; }function GetBuyNowLink() {$buyLink =I3200; if(sizeof($this->items[$this->ownerName]) >0) {$modPostfix ="_cart"; }else {$modPostfix ="_order"; }$modName =$this->cms->Eshop->getCommonModuleName($modPostfix); $mod =&$this->cms->Core->GetModule($modName); if(is_object($mod)) {$buyLink =$mod->GetFrontLink(); }return $buyLink; }function isEmpty() {$res =true; foreach($this->cms->Eshop->aCloneOwners as $ownerName=>$data) {if(sizeof($data) >0) {$res =false; break; }}return $res; }function unsetLastItem($item, $ownerName) {if(isset($this->lastAdded[$ownerName][$item])) {unset($this->lastAdded[$ownerName][$item]); }}function unsetLastItemPropId($item, $itemPropId, $ownerName) {if(isset($this->lastAdded[$ownerName][$item][$itemPropId])) {unset($this->lastAdded[$ownerName][$item][ $itemPropId]); }}function unsetLastItemPrice($item, $priceNumber, $itemPropId, $ownerName) {if(isset($this->lastAdded[$ownerName][$item][$itemPropId][$priceNumber])) {unset($this->lastAdded[$ownerName][$item][$itemPropId][$priceNumber]); }}function getNumberErrors() {return sizeof($this->errCode); }function getErrors() {return $this->errCode; }function cleanErrors() {$this->errCode =Array(); $this->lastAdded =Array(); }function onSerialize($keepErrors =false) {if(!$keepErrors) {unset($this->lastItem); unset($this->errCode); unset($this->lastAdded); unset($this->ownerName); $this->isCleanup =false; }$this->itemcount(); unset($this->ext); unset($this->cms); }function _getPropInfoByPropData(&$propData) {$propInfo =array("desc_arr" => &$propData, I3260 => "item", I3267 => "cart"); $aNone =$aPropRes =Array(); $a ="get_prop_desc_by_arr"; $this->ext->ProcessAction($a, 0, $aNone, $propInfo, $aPropRes); return $aPropRes["desc"]; }function createExtensionObject() {if(!is_object($this->ext)) {$this->ext =&createEshopExtensionObject($this->cms); }}function _getGroupedShipping($shippingMethodId, $currencyRate) {$customConditions =$this->cms->Eshop->shippingData["methodsIdsToCustomConditions"][$shippingMethodId]; if (!isset($this->cms->Eshop->shippingData["methodsIdsToCustomConditions"][$shippingMethodId]) || $customConditions == 'value') {return $this->cms->Eshop->getTax(0, 0, "abs", $currencyRate); }$priceValue =$this->_dataGroupedByShippingMethods[I3226][$shippingMethodId]; $shipping =$this->cms->Eshop->shippingData[$customConditions][$shippingMethodId]; if ($shipping["hidden"]) {return $this->cms->Eshop->getTax($priceValue, $defaultShippingValue, $defaultShippingType, $currencyRate); }switch($customConditions){ case 'none': return $this->cms->Eshop->getTax($priceValue, $shipping[I3268], $shipping['type'], $currencyRate); case 'total': $field ='max_total'; $value =$this->cms->Eshop->convertCurrency($priceValue, $this->currency, $this->cms->Eshop->baseCurrency); break; case 'weight': $field =I3269; $value =$this->_dataGroupedByShippingMethods['weights'][$shippingMethodId]; break; }foreach ($shipping as $key => $row) {if ($key >0 ?$value >= $row[$key -1][$field] && (is_null($row[$field]) ?true :$value <$row[$field]) :$value >= 0 && (is_null($row[$field]) ?true :$value <$row[$field]) ){return $this->cms->Eshop->getTax($priceValue, $row["amount"], $row["type"], $currencyRate); }}return 0; }function checkShippingConflicts(&$db) {if (!$this->_useShippingModule || $this->itemcount() == 0) {return true; }$shippingModuleName =$this->ownerName .I3227; if ($this->cms->Core->GetModOption($shippingModuleName, "shipping_conflicts") != I3270 || $this->cms->Core->GetModOption($shippingModuleName, "on_intersection_emptiness") != "ask_to_change_order" ){return true; }$shippingTypesIds =array ();$aCloneOwners =$this->ownerName == '' ?array_keys($this->cms->Eshop->aCloneOwners) :array($this->ownerName); $this->cms->Eshop->saveCurrentConfig(); foreach ($aCloneOwners as $ownerName) {$this->cms->Eshop->initByOwnerName($ownerName); $inClause =$this->getProductidList($ownerName); if ($inClause == I3200) {continue; }$sql ="SELECT i.id_shipping_type, c.id_shipping_type cat_id_shipping_type " .I3271 .$this->cms->Eshop->dbTablePrefix ."_items` i " ."INNER JOIN `" .$this->cms->Eshop->dbTablePrefix ."_cats` c ON c.id = i.id_category " ."WHERE i.id IN (" .$inClause .I3272; $db->query($sql); while ($db->next_record()) {$shippingTypeId =$db->Record[I3234] ?$db->Record[I3234] :$db->Record["cat_id_shipping_type"]; $shippingTypesIds[$shippingTypeId] =$shippingTypeId; }}$this->cms->Eshop->setSavedConfig(); $shippingTypesIdsQty =count($shippingTypesIds); if ($shippingTypesIdsQty <2) {return true; }$sql ="SELECT m.id, m.name, m.custom_fields, m.comments " .I3271 .$this->cms->Eshop->dbTablePrefix ."_shipping_types_methods` t2m " ."INNER JOIN `" .$this->cms->Eshop->dbTablePrefix ."_shipping_methods` m ON m.id = t2m.id_method " ."WHERE `id_type` IN (" .implode(",", $shippingTypesIds) .") " ."GROUP BY m.id " ."HAVING COUNT(t2m.id_type) = " .$shippingTypesIdsQty ." "; $db->query($sql); return $db->num_rows() >0; }private function groupProductsByDiscounts($index, $numPrice, $qty, array $aRecord){ if($this->_recallMethodMode || !$aRecord['id_discount']){ return; }$this->cms->Eshop->productsGroupedByDiscountIds[$aRecord['id_discount']][I3224][] =$index; $this->cms->Eshop->productsGroupedByDiscountIds[$aRecord['id_discount']]['base_currency_price'][] =$aRecord['price' .$numPrice]; $this->cms->Eshop->productsGroupedByDiscountIds[$aRecord['id_discount']][I3192][] =$qty; }private function applyPriceNumDiscount($index, array $record, $itemPropId){ if( $this->_recallMethodMode && !empty($this->cms->Eshop->productsGroupedByDiscountIds[$record['id_discount']]) && !empty($this->cms->Eshop->_discountsData['others']) && !empty($this->cms->Eshop->_discountsData[I3273][$record['id_discount']]) && in_array($index, $this->cms->Eshop->productsGroupedByDiscountIds[$record['id_discount']][I3224]) ){$aRanges =array(); foreach($this->cms->Eshop->_discountsData[I3273][$record['id_discount']] as $aDiscount){ if( $aDiscount['condition'] === I3274 ){$aRanges[] =array($aDiscount['max_items_count'], $aDiscount['price_num']); }}if(sizeof($aRanges)){ $qty =array_sum($this->cms->Eshop->productsGroupedByDiscountIds[$record['id_discount']][I3192]); $min =0; foreach($aRanges as $aRange){ $max =$aRange[0]; if(($min <= $qty) && (is_null($max) || ($qty <$max))){ if($aRange[1] >0){ $this->items[$this->cms->Eshop->ownerName][$record[I3195]][$itemPropId] =array( $aRange[1] => $this->getQuantity($this->cms->Eshop->ownerName, $record[I3195], $itemPropId) );}break; }$min =$max; }}}}}