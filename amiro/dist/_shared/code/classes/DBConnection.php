<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       43361 xkqwslggytnyygnmpnxkxmmnwwnuglrsxniyuyqkigxunrxilukqmrzqytqzsrpzzwsspnir
 */ ?><?php foreach(array(3955=>'q|sy|whNN|phNqzczb',3956=>'q|sy|NhT|kqbFmjq',3957=>'syw|TRUdTqs|eUqRb',3958=>'syw|pqN|Rqgjzwq',3959=>'OZJt|Hn|Qrr',3960=>'zim|sy|qRRhR',3961=>"SMrQWtHrB",3962=>"PrZnt",3963=>"rQvHKQ",3964=>"DQJQWt",3965=>'uDQ|GWHnnQWt',3966=>'SYZWWQDD',3967=>'Qrr',3968=>'JHPMn',3969=>'SY|nZIQ',3970=>'WOZrDQt',3971=>'dej?}0x',3972=>'DMIGJQ',3973=>"tZYJQ",3974=>'TRUNwzTq?.',3975=>'?',3976=>'iDP|tBGQ',3977=>"\n#Yr@#Y@?*",3978=>'o%M%D',3979=>"&?qnS?EuQrB#~Y@?*",3980=>'zim|sQYuP',3981=>"",3982=>"SZtZ|DMAQ",3983=>"zvP|rHC|JQnPtO",3984=>".",3985=>"ZJJ",3986=>'~;}`[ {}\Y',3987=>"?whjjzTq=",3988=>'IuJtM|uDQr',3989=>"?euQrB%?",3990=>'tBGQ',3991=>'mjJJJJ1',3992=>'utf8',3993=>'DBD',3994=>'mjJJJjJ',3995=>'SQYuP',3996=>'JHP|tx') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .'SQLProcessor.php'; define(I3955, 2006); define('E_DB_CONN_LOST', 2013); define('E_DB_CANNOT_OPEN', 1016); define('E_DB_NOT_FOUND', 1017); define('E_DB_GET_ERRNO', 1030); define(I3956, 1034); define('E_DB_MARKED_AS_CRASHED', 1194); define('E_DB_MARKED_AS_CRASHED2', 1195); define('E_DB_MARKED_AS_CRASHED3', 145); define('E_DB_INCORRECT_KEY_FILE', 126); define(I3957, 0x01); define('DBC_LOW_PRI', 0x02); define('DB_LOW_PRI', 0x02); define('DBC_SYS_QUERY', 0x04); define('DBC_IGNORE_CACHE', 0x08); define(I3958, 0x10); define('DBC_UNBUF_QUERY', 0x20); define('DBC_NO_HALT', 0x40); define('DBC_RAW_QUERY', DBC_TRUSTED_QUERY|DBC_SYS_QUERY|DBC_IGNORE_CACHE); define('MYSQL_MIN_VERSION', 40000); class DBBaseObject {public $ILlI1LI; public $ILlI1Ll; public $ILlI1LL; function DBBaseObject() {$this->ILlI1LI =array(I3959=>true); $this->ILlI1LI['debug'] =false; $this->TT1lTT1(); }function TT1lTT1() {$this->ILlI1Ll =0; $this->ILlI1LL =''; }function TT1lTIT() {$this->ILlI1Ll =mysql_errno(); $this->ILlI1LL =mysql_error(); }function _error($msg='',$ILlI1L1=true,$ILlI11I=false) {$this->TT1lTT1(); if($ILlI1L1) {$this->TT1lTIT(); $this->ILlI1LL ="[$this->ILlI1Ll] [$this->ILlI1LL] $msg"; }else $this->ILlI1LL =$msg; $this->ILlI1LL =mb_substr($this->ILlI1LL,0,$this->attr('errmsg_maxlen')); if(!$this->attr(I3959) || $ILlI11I) return false; define(I3960, TRUE); trigger_error('DB: ' .$this->ILlI1LL, E_USER_ERROR); }function setAttr($attr,$val=true) {if(is_array($attr)) {foreach($attr as $k => $v) {if(isset($this->ILlI1LI[$k])) $this->ILlI1LI[$k] =$v; else $this->_error("Attempt to set unknown ".__CLASS__." attribute '$k'"); }}else {if(isset($this->ILlI1LI[$attr])) $this->ILlI1LI[$attr] =$val; else $this->_error("Attempt to set unknown ".__CLASS__." attribute '$attr'"); }}function attr($name) {return isset($this->ILlI1LI[$name]) ?$this->ILlI1LI[$name] :null; }function errmsg() {return $this->ILlI1LL; }}class DBRecordSet extends DBBaseObject {public $Il11llL; public $Record; public $ILlI11l; function DBRecordSet($resId) {$this->DBBaseObject(); $this->Il11llL =$resId; $this->ILlI1LI['auto_free'] =true; $this->ILlI11l =&$this->Record; }function &nextRecord($ILlI11L=MYSQL_ASSOC) {if(!$this->Il11llL) {$this->_error("nextRecord() called without query",false); return null; }global $allow_ext_debug, $_total_qtime, $_total_fqueries, $_total_ftime; if($allow_ext_debug){ $Il11lLl =microtime(true); }$this->Record =@mysql_fetch_array($this->Il11llL, $ILlI11L); if($allow_ext_debug){ $Il11lLL =microtime(true); if(!isset($_total_ftime)) $_total_ftime =0; $_total_ftime += $Il11lLL-$Il11lLl; if(!isset($_total_qtime)) $_total_qtime =0; $_total_qtime += $Il11lLL-$Il11lLl; if(!isset($_total_fqueries)) $_total_fqueries =0; $_total_fqueries++; }if(!$this->Record) {$this->Record =null; if($this->attr('auto_free')){ $this->free(); }}return $this->Record; }function seek($pos =0) {return @mysql_data_seek($this->Il11llL, $pos); }function numRows() {return intval(@mysql_num_rows($this->Il11llL)); }function free() {@mysql_free_result($this->Il11llL); $this->Il11llL =0; }function next_record($restype=MYSQL_BOTH) {return $this->nextRecord($restype) ?true :false; }function TT1lTII($restype=MYSQL_BOTH){ return $this->next_record($restype); }function num_rows() {return $this->numRows(); }}class DBConnection extends DBRecordSet {public $_dbLink; public $ILlI111; public $ILllIII; public $ILllIIl; public $ILllIIL; public $ILllII1; public $_sqlProc; public $_keepRes; public $ILllIlI =array( "union" => "union", "directory" => I3961, "load" => "load\\s+data", "use" => "use", I3962 => I3962, "create" => "create", "alter" => "alter", I3963 => I3963, "show" => "show table status\\", 'drop' => 'drop' );public $ILllIll =array( I3964=>array("into" => "into") );public $ILllIlL =array(); public $ILllIl1 =array(); function DBConnection($linkId=false) {$this->DBRecordSet(0); $this->_dbLink =$linkId; $this->ILlI1LI['auto_reconnect'] =true; $this->ILlI1LI['auto_repair'] =true; $this->ILlI1LI[I3959] =true; $this->ILlI1LI[I3965] =false; $this->ILlI1LI['sql_safety_check'] =true; $this->ILlI1LI['errmsg_maxlen'] =10000; $this->ILlI1LI['auto_free'] =false; $this->ILlI1LI['debug_logfile'] =false; $this->ILlI111 =false; $this->ILllIII =true; $this->ILllIIL =0; $this->ILllII1 =0; $this->ILllIIl =false; if(!isset($this->_sqlProc)) $this->_sqlProc =new SQLProcessor(); $this->_keepRes =false; }function TT1lTIT() {$this->ILlI1Ll =is_resource($this->_dbLink) || is_object($this->_dbLink) ?mysql_errno($this->_dbLink) :mysql_errno(); $this->ILlI1LL =is_resource($this->_dbLink) || is_object($this->_dbLink) ?mysql_error($this->_dbLink) :mysql_error(); }function connect($host=false,$login=false,$passwd=false) {$this->_dbLink =false; $this->TT1lTT1(); if(!is_array($this->ILlI111) && ($host === false || $login === false || $passwd === false)){ return $this->_error("Cannot connect: connection params not saved", false); }if($host===false) $host =$this->ILlI111['host']; if($login===false) $login =$this->ILlI111['login']; if($passwd===false) $passwd =$this->ILlI111['password']; $this->_dbLink =$this->attr(I3965) ?@mysql_pconnect($host, $login, $passwd, FALSE, $GLOBALS['CONFIG_INI'][I3966]['DB_ClientFlags']) :@mysql_connect($host, $login, $passwd, FALSE, $GLOBALS['CONFIG_INI'][I3966]['DB_ClientFlags']); if (!$this->_dbLink) {$GLOBALS['sys'][I3967]['store'] =TRUE; if (is_object($GLOBALS[I3967])) {AMI_Registry::set('disable_error_mail', true); }return $this->_error(); }$ver =@mysql_get_server_info($this->_dbLink); if(preg_match('/^(\d+)\.(\d+)\.(\d+)/', $ver, $m)) {$this->ILllIIl =intval(sprintf("%d%02d%02d",$m[1],$m[2],$m[3])); if($this->ILllIIl <MYSQL_MIN_VERSION){ define(I3960, TRUE); trigger_error('MySQL version too low: ' .$this->ILllIIl .' < ' .MYSQL_MIN_VERSION, E_USER_ERROR); }}else {define(I3960, TRUE); trigger_error("Cannot detect MySQL version from value '" .$ver ."'", E_USER_ERROR); }if(!is_array($this->ILlI111)){ $this->ILlI111 =array(); }$this->ILlI111['host'] =$host; $this->ILlI111[I3968] =$login; $this->ILlI111['password'] =$passwd; $this->ILlI111['ver'] =$this->ILllIIl; if ($this->ILllIIl >= 50000) {$this->TT1lT1T("SET SQL_MODE=''"); }return true; }function TT1lTIl() {if($this->_dbLink) return true; if(!$this->connect()) return false; if(isset($this->ILlI111['db_name']) && !$this->TT1lTI1($this->ILlI111[I3969])) return false; if(isset($this->ILlI111['charset']) && !$this->setCharset($this->ILlI111['charset'])) return false; }function setCharset($charset,$flags=0) {if($this->TT1lITI()<40100) {$this->ILlI111['charset'] =$charset; return true; }if(!$this->TT1lTIl()) return false; $p =explode(':',$charset); $v =addslashes($p[0]); if(!$this->TT1lT1T("SET NAMES '$v'",$flags)) return false; $this->ILlI111[I3970] =$p[0]; if(isset($p[1])) {if(!$this->TT1lT1T("SET collation_connection='".addslashes($p[1])."'",$flags)) return false; $this->ILlI111[I3970] .= ':'.$p[1]; }return true; }function getCharset($parse=false) {if(!isset($this->ILlI111[I3970])) return false; if(!$parse) return $this->ILlI111[I3970]; return explode(':',$this->ILlI111[I3970]); }function TT1lTI1($dbName) {if(!$this->TT1lTIl()) return false; if(!@mysql_select_db($dbName,$this->_dbLink)) return false; $this->ILlI111[I3969] =$dbName; return true; }function TT1lTlT(){ return $this->ILllII1; }function TT1lTlI($sql) {if(preg_match("/file:\s+'([^.]+)\./",$this->ILlI1LL,$m)) return $m[1]; return false; }function TT1lTll($str) {if($this->attr('debug_logfile') !== FALSE){ file_put_contents($this->attr('debug_logfile'), $str ."\n", FILE_APPEND); }}protected function TT1lTl1($query, $flags){ if(DB_si::globalAttr('log_tx') !== FALSE){ AMI_Tx::log(I3971 .dechex($flags) .'): ' .$query); }}function _d($var) {if(is_array($var) || is_object($var)) var_dump($var); else echo "+ $var\n"; }function TT1lT1T($sql,$flags=0) {if(class_exists('AMI_Registry')){ AMI_Registry::set('amiLastSQLQuery', $sql); }if($this->attr('debug')==I3972){ class_exists('AMI_Debug', false) ?AMI_Debug::write('SQL query: ' .htmlspecialchars($sql)) :$this->_d('SQL query: ' .htmlspecialchars($sql)); }$this->TT1lTll('_query: ' .$sql); if(!$this->TT1lTIl()){ return false; }$res =$flags &DBC_UNBUF_QUERY ?@mysql_unbuffered_query($sql,$this->_dbLink) :@mysql_query($sql,$this->_dbLink); if(!$res) {$errmsg ='MySQL query failed: '; $this->TT1lTIT(); switch($this->ILlI1Ll) {case E_DB_CONN_GONEAWAY: case E_DB_CONN_LOST: if($this->ILllIII && $this->attr('auto_reconnect')) {$this->_dbLink =false; $this->ILllIII =false; $res =$this->TT1lT1T($sql,$flags); $this->ILllIII =true; }break; case E_DB_CANNOT_OPEN: case E_DB_NOT_FOUND: case E_DB_NOT_KEYFILE: case E_DB_MARKED_AS_CRASHED: case E_DB_MARKED_AS_CRASHED2: case E_DB_MARKED_AS_CRASHED3: case E_DB_GET_ERRNO: case E_DB_INCORRECT_KEY_FILE: if($this->ILllIII && $this->attr('auto_repair')) {$errmsg ="Corrupted MySQL table: \"$this->ILlI1LL\". "; $IIlIlll =false; if(in_array($this->ILlI1Ll, array(E_DB_CANNOT_OPEN, E_DB_NOT_FOUND))) {$IIlIlll =$this->TT1lTlI($sql); }elseif($this->ILlI1Ll == E_DB_GET_ERRNO){ $sql =trim($sql); if (preg_match('/^SELECT\s.*?[\s\)]FROM\s+([\S]+)/si', $sql, $matches) || preg_match('/^UPDATE.*?\s([\S]+)\sSET/si', $sql, $matches) || preg_match('/^INSERT\s+INTO\s+([\S]+)\s/si', $sql, $matches) ){$IIlIlll =$matches[1]; }}else{ if(preg_match("/'(.*)';/", $this->ILlI1LL, $m) || preg_match("/^Table '([^']+)'/", $this->ILlI1LL, $m)){ $IIlIlll =$m[1]; $ILllILI =$this->_sqlProc->data(); if(isset($ILllILI["alias"])) {$ILllILl =array_search($IIlIlll, $ILllILI["alias"]); if($ILllILl !== false) {$IIlIlll =$ILllILI[I3973][$ILllILl]; }}}}if($IIlIlll===false) {$errmsg .= "Could not get table name. Query: "; break; }$ILllILL =array('cms_cache', 'cms_cache_blocks', 'cms_cache_content'); if(in_array($IIlIlll, $ILllILL)){ foreach($ILllILL as $table){ @mysql_query(I3974 .$table .'`'); }}if(FALSE !== mb_strpos($IIlIlll, '.') && preg_match('/([a-zA-Z0-9_]+)\..+$/', $IIlIlll, $matches)){ $IIlIlll =$matches[1]; }if($this->TT1lT1I($IIlIlll, $errmsg, $this->ILlI1Ll)){ trigger_error($errmsg.'Repaired ',E_USER_WARNING); $this->ILllIII =false; $res =$this->TT1lT1T($sql,$flags); $this->ILllIII =true; }}break; default: break; }}if(!$res) return $this->_error($errmsg.I3975.$sql,true,$flags &DBC_NO_HALT); return $res; }function TT1lT1I($IIlIlll, &$errmsg, $errCode){ $res =true; $errmsg .= "Table name: `$IIlIlll`. "; $sql ="REPAIR TABLE `$IIlIlll`"; if(E_DB_INCORRECT_KEY_FILE == $errCode){ $sql .= " EXTENDED USE_FRM"; }$ILllIL1 =mysql_query($sql, $this->_dbLink); $rec =mysql_fetch_array($ILllIL1); if(mb_strtolower($rec['Msg_type']) == 'error'){ if(E_DB_INCORRECT_KEY_FILE != $errCode){ $errmsg .= "Using EXTENDED repair option. "; $ILllIL1 =mysql_query("REPAIR TABLE `$IIlIlll` EXTENDED",$this->_dbLink); $rec =mysql_fetch_array($ILllIL1); if(mb_strtolower($rec[I3976]) == 'error'){ $errmsg .= 'Using EXTENDED USE_FRM repair option. '; $ILllIL1 =mysql_query("REPAIR TABLE `$IIlIlll` EXTENDED USE_FRM", $this->_dbLink); $rec =mysql_fetch_array($ILllIL1); if(mb_strtolower($rec[I3976]) == 'error'){ $errmsg .= "Could not repair. Query: "; $res =false; }}}else{ $errmsg .= 'Using EXTENDED USE_FRM repair option. '; $errmsg .= "Could not repair. Query: "; $res =false; }}return $res; }function query($sql,$flags=0){ if(!mb_strlen($sql)){ return 0; }if (!$this->_keepRes && (is_resource($this->Il11llL) || is_object($this->Il11llL) )){$this->free(); }if(!($flags &DBC_TRUSTED_QUERY) && !$this->TT1lIT1($sql)) {return $this->_error("Unsafe SQL: $sql",false,$flags &DBC_NO_HALT); }global $_total_qtime, $_total_queries, $ILllI1I, $_total_fqueries; $Il11lLl =microtime(true); $_d =$this->attr('debug') == 'detail'; if ($_d) {$ILllI1l =date("H:i:s"); $ILllI1I++; $this->ILllIIL++; $txt =I3977.$ILllI1I."=>".$this->ILllIIL."] Start query </b>[".$ILllI1l."]:<br> <font color=blue size=1>\n ".htmlspecialchars($sql)." \n</font><br>\n"; AMI_Debug::write($txt); }$res =$this->TT1lT1T($sql,$flags); if(!$res) return false; if(!$this->_keepRes) $this->Il11llL =$res; $this->_keepRes =false; $Il11lLL =microtime(true); if(!isset($_total_qtime)) $_total_qtime =0; $this->ILllII1 =$Il11lLL-$Il11lLl; $_total_qtime += $this->ILllII1; if(!isset($_total_queries)) $_total_queries =0; $_total_queries++; if($_d){ $ILllI1L =date(I3978); $ILllI11 =number_format($Il11lLL -$Il11lLl, 5); $ILlllII =number_format($_total_qtime, 5); if($Il11lLL-$Il11lLl >0.5) $ILllI11 ='<font color=red>' .$ILllI11 .'</font>'; $txt ="\n<b>[".$ILllI1I."=>".$this->ILllIIL.I3979.$ILllI1L."], <b>Delay</b> = ".$ILllI11." sec (Total = ".$ILlllII." sec, Fetch count = ".$_total_fqueries.")<br>\n"; if(class_exists(I3980, false)){ AMI_Debug::write($txt); }else{ print($txt); }}return $res; }function TT1lT1l($sql,$flags=0){ return $this->query($sql,$flags); }function dbName() {if(isset($this->ILlI111[I3969])) return $this->ILlI111[I3969]; $res =$this->getValue('SELECT DATABASE()',DBC_RAW_QUERY); if(!$res) return false; $this->ILlI111[I3969] =$res; return $res; }function TT1lT11($tables) {if(!sizeof($tables)) return true; $sql ='LOCK TABLES '; foreach($tables as $name=>$ltype) {$sql .= "`$name` $ltype,"; }$sql =rtrim($sql,','); return $this->TT1lT1T($sql,DBC_TRUSTED_QUERY); }function TT1lITT() {return $this->TT1lT1T('UNLOCK TABLES',DBC_TRUSTED_QUERY); }function affectedRows() {return @mysql_affected_rows($this->_dbLink); }function affected_rows() {return $this->affectedRows(); }function TT1lITI() {return $this->ILllIIl; }function getTableInfo($Ill1LI1=I3981) {$res =array(); $filter =I3981; if(!empty($Ill1LI1)){ $filter =" LIKE '$Ill1LI1'"; }$sql ="SHOW TABLE STATUS $filter"; if(!($rs=&$this->select($sql,DBC_RAW_QUERY))) return false; while($rec=&$rs->nextRecord()){ $ILlllIl =array(); $ILlllIl["name"] =$rec["Name"]; $ILlllIl["rows"] =$rec["Rows"]; $ILlllIl[I3982] =$rec["Data_length"]; $ILlllIl["index_size"] =$rec["Index_length"]; $ILlllIl["avg_row_size"] =$rec[I3983]; $ILlllIl["size"] =$ILlllIl[I3982]+$ILlllIl["index_size"]; $res[] =$ILlllIl; }if(count($res)==1){ $res =$res[0]; }return $res; }function rawExecute($sql) {return @mysql_query($sql,$this->_dbLink); }function lastInsertId(){ $res =$this->getValue('SELECT LAST_INSERT_ID()', DBC_RAW_QUERY); return $res ?$res :false; }function genInsertSQL($tableName, $aRecord, $flags =0) {$res =$flags &DBC_GEN_REPLACE ?$this->_sqlProc->TI1lT1T($tableName, $aRecord, ($flags &DBC_LOW_PRI) != 0) :$this->_sqlProc->genInsertSQL($tableName, $aRecord,($flags &DBC_LOW_PRI) != 0); return $res; }function genUpdateSQL($tableName, $aRecord, $where, $flags =0) {return $this->_sqlProc->genUpdateSQL($tableName, $aRecord, $where, ($flags &DBC_LOW_PRI) != 0); }function execute($sql, $flags =0) {$this->_keepRes =true; return (bool)$this->query($sql, $flags); }function &select($sql, $flags =0) {$this->_keepRes =TRUE; $result =false; if ($res =$this->query($sql, $flags)) {$result =new DBRecordSet($res); }return $result; }function getRecord($sql, $flags =0, $ILlI11L =MYSQL_ASSOC){ $rs =$this->select($sql, $flags); if(!$rs){ return false; }$res =$rs->nextRecord($ILlI11L); return is_array($res) ?$res :null; }function getValue($sql, $flags =0){ $rs =$this->select($sql, $flags); if(!$rs){ return false; }$res =$rs->nextRecord(MYSQL_NUM); return is_array($res) ?$res[0] :null; }function TT1lITl($table,$value,$key='id',$flags=0) {$args =func_get_args(); if(sizeof($args)>3) {$args =array_slice($args,3); $what =I3984.implode('`,`',$args).I3984; }else {$what ='*'; }$sql ="SELECT $what FROM `$table` WHERE `$key`='$value'"; return $this->getRecord($sql,$flags); }function insert($tableName, $aRecord, $flags =0) {$this->_keepRes =true; return $this->query($this->genInsertSQL($tableName, $aRecord, $flags), $flags); }function update($tableName, $aRecord, $where, $flags =0) {$this->_keepRes =true; return $this->query($this->genUpdateSQL($tableName, $aRecord, "WHERE $where", $flags), $flags); }function tableList($regexp=false) {$rs =$this->select('SHOW TABLES',DBC_RAW_QUERY); if(!$rs) return false; $list =array(); while($res=&$rs->nextRecord(MYSQL_NUM)) if($regexp===false || preg_match($regexp,$res[0])) $list[] =$res[0]; return $list; }function setSafeSQLOptions($cMask, $ILlllIL ="all"){ $vData =array($cMask => $cMask); if($ILlllIL==I3985) {$this->ILllIlL += $vData; }else {$this->ILllIl1 += $vData; }return true; }function clearSafeSQLOptions(){ $this->ILllIlL =array(); $this->ILllIl1 =array(); }function TT1lIT1($sql) {$res =true; if($this->attr('sql_safety_check')){ $sql =$this->_sqlProc->TI1lTl1($sql); if(preg_match('/^\s*(.*?)\s/m', $sql, $m)) {$type =mb_strtolower($m[1]); if(isset($this->ILllIll[$type]) && !isset($this->ILllIl1[$type])) {foreach($this->ILllIll[$type] as $str => $re) {if(mb_strpos($sql, $str)!==false && preg_match('/\b'.$re.'\b/mi', $sql)) {$res =false; break; }}}if($res) {$ILlllI1 =array_diff_assoc($this->ILllIlI, $this->ILllIlL); foreach($ILlllI1 as $str => $re) {if(mb_strpos($sql, $str)!==false && preg_match(I3986.$re.'\b)(.*?)$/mi', $sql, $m)) {$res =false; break; }}}}}$this->clearSafeSQLOptions(); return $res; }function TT1lIIT($sql,$flags=0) {if(($charset=$this->getCharset(true))===false) {return $this->_error("createTable(): connection charset is not set",false,$flags &DBC_NO_HALT); }if(!preg_match('/^(.*\))([^)]*?)\s*$/',$sql,$m)) {return $this->_error("Wrong CREATE TABLE SQL: $sql",false,$flags &DBC_NO_HALT); }$create =$m[1]; if($this->TT1lITI()>=40100) {$create .= " ENGINE=MyISAM DEFAULT CHARSET=" .$charset[0]; if (isset($charset[1])) {$create .= I3987 .$charset[1]; }}else {$create .= ' TYPE=MyISAM'; }return $this->query($create,$flags); }function TT1lIII($sql, $flags=0) {if (($charset=$this->getCharset(true)) === false) {return $this->_error("createTable(): connection charset is not set", false, $flags &DBC_NO_HALT); }if (!preg_match('/^(.*\))([^)]*?)\s*$/s',$sql,$m)) {return $this->_error("Wrong CREATE TABLE SQL: " .$sql, false, $flags &DBC_NO_HALT); }$create =$m[1]; if ($this->TT1lITI() >= 40100) {$create .= " ENGINE=MyISAM DEFAULT CHARSET=" .$charset[0]; if (isset($charset[1])) {$create .= I3987 .$charset[1]; }}else {$create .= ' TYPE=MyISAM'; }return $this->query($create, $flags); }}class CMSDBConnection extends DBConnection {public $ILllllI; public $ILlllll; function CMSDBConnection($linkId=false) {if(!isset($this->_sqlProc)) $this->_sqlProc =new CMSSQLProcessor(); $this->DBConnection($linkId); $this->ILlI1LI['save_query_log'] =false; $this->ILlI1LI['multi_user'] =false; $this->initCache(); $this->ILlllll =true; }function initCache() {global $Core; if(isset($Core) && is_object($Core)) {$this->ILllllI =&$Core->Cache; }else $this->ILllllI =null; }function TT1lIIl($rec=false) {static $log =''; if($rec===false) return $log; $log .= $rec; }function query($sql, $flags =0) {$this->TT1lTll("query: $sql"); $this->TT1lTl1($sql, $flags); if ($sql == I3981) {return 0; }$ILllllL =($flags &DBC_RAW_QUERY) != DBC_RAW_QUERY; if($ILllllL){ $this->_sqlProc->init($sql); }if(!$this->ILlllll) {$this->setAttr(I3988,DB_si::globalAttr(I3988)); $this->ILlllll =true; }if($this->attr(I3988) && !($flags &DBC_SYS_QUERY)) {if(!$this->_sqlProc->TI1lT1l()) {return false; }$sql =$this->_sqlProc->TI1lT1I(); }if(!($res =parent::query($sql,$flags))) {return false; }if($ILllllL){ $vData =$this->_sqlProc->data(); }if(!($flags &DBC_IGNORE_CACHE) && is_object($this->ILllllI)) {if (isset($vData[I3973][0])) {$this->ILllllI->TT1ITlT($vData["type"],$vData[I3973][0],$vData["attr"]); }}if($this->attr('save_query_log')) {$this->TT1lIIl("Time: ".$this->ILllII1. I3989.$this->_sqlProc->TI1lT11($sql)."\n"); }if($ILllllL && defined("isScanty") && isScanty && $vData['table'][0] == 'cms_pages' && in_array($vData[I3990], array('insert', 'delete', 'replace', 'update'))) {$GLOBALS[I3991] =true; }return $res; }}$GLOBALS['ILlllLI'] =null; $GLOBALS['ILlllLl'] =null; class DB_si extends CMSDBConnection {public static $ILlllLL =FALSE; function DB_si($linkId=false) {$this->CMSDBConnection($linkId); if($linkId===false) {if(empty($GLOBALS['ILlllLI'])){ $this->connect(DB_Host,DB_User,DB_Password); self::$ILlllLL =$this->TT1lTI1(DB_Database); $GLOBALS['ILlllLI'] =&$this->_dbLink; if(!$this->setCharset(I3992,DBC_NO_HALT) && !$this->setCharset('latin1',DBC_NO_HALT)) {$this->_error("Cannot set charset. Tried: utf8, latin1"); }if (!empty($GLOBALS['sys']['time_zone'])) {$Il11lLI =$GLOBALS[I3993]['time_zone']; if ($Il11lLI >0) {$Il11lLI ='+'.$Il11lLI; }$this->TT1lT1T("SET time_zone = '{$Il11lLI}:00'"); }$GLOBALS['ILlllLl'] =&$this->ILlI111; }else{ $this->_dbLink =&$GLOBALS['ILlllLI']; $this->ILlI111 =&$GLOBALS[I3994]; $this->ILllIIl =$this->ILlI111['ver']; }}$this->setAttr(I3988,DB_si::globalAttr(I3988)); $this->setAttr('save_query_log',DB_si::globalAttr('save_query_log')); $this->setAttr('debug',DB_si::globalAttr(I3995)); $this->setAttr('debug_logfile',DB_si::globalAttr('debug_logfile')); }public static function globalAttr($key,$value =NULL){ static $attr =array( I3995 => FALSE, I3988 => FALSE, 'save_query_log' => FALSE, 'debug_logfile' => FALSE, I3996 => FALSE );if(!is_null($value)){ $attr[$key] =$value; }return $attr[$key]; }function &admInstance($domain=false) {static $ILlllL1 =array(); if($domain===false) $domain ='default'; if(!isset($ILlllL1[$domain])) $ILlllL1[$domain] =new DB_si(TlITllI('get',$domain==='default' ?false :$domain)); else TlITllI('check_path'); return $ILlllL1[$domain]; }function &TTI1I1T() {$db =new DB_si($this->_dbLink); $db->setAttr($this->ILlI1LI); return $db; }}