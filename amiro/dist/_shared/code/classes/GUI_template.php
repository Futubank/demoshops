<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    gui 
 * @version    $Id$ 
 * @size       156069 xkqwustwrqmwytpxuiyqstkpqqsyrwrimnngruruxmltupuytutwwktnqklzwusugiyzpnir
 */ ?><?php foreach(array(5450=>'tHlddtrMnP',5451=>"MnWJuSQ|GOG",5452=>"M",5453=>"Mf|QJQIQntD",5454=>"~<<}*;<&`[ _{<<~D",5455=>"vQrDMHn",5456=>"tQIGJZtQ",5457=>"<<Mf",5458=>'ru',5459=>"MfwHuntQr",5460=>'',5461=>'DKMn|GZtO',5462=>'ZutH',5463=>'SY',5464=>"DQJQWt?WHnWZt}GZtO!?nZIQ{?ZD?tQIGJZtQ?frHI?WID|IHSuJQD|tQIGJZtQD?COQrQ?1?",5465=>"DQJQWt?WHnWZt}GZtO!?nZIQ{?ZD?tQIGJZtQ?frHI?WID|IHSuJQD|tQIGJZtQD|JZnPD?COQrQ?1?",5466=>"~",5467=>"?",5468=>'~;}',5469=>'~`[ \`GOG$~M',5470=>"ZJJ",5471=>"JZnPuZPQD",5472=>'ZJJ',5473=>'_ZJJ_',5474=>"",5475=>"=",5476=>'zim',5477=>']|Dv=',5478=>"?ZDBnW=\"ZDBnW\"",5479=>"JZnPuZPQ",5480=>"nZIQ",5481=>"=\"",5482=>"MtQI",5483=>"HutQr",5484=>"@\r\n",5485=>"tQIGHrZrB",5486=>"\r\n",5487=>'SMDK',5488=>"GZrDQS",5489=>"GrHWQDDQSFMJQD",5490=>"WHntQnt",5491=>"?frHI?WID|IHSuJQD|tQIGJZtQD",5492=>"?COQrQ?GZtO='",5493=>"WHntQnt|tBGQ",5494=>"\"",5495=>"DQJQWt?GZrDQS?frHI?WID|IHSuJQD|tQIGJZtQD|JZnPD?COQrQ?WHnWZt}GZtO!nZIQ{='",5496=>"uGSZtQ?WID|IHSuJQD|tQIGJZtQD|JZnPD?DQt?GZrDQS='",5497=>"CrHnP|JZnPuZPQD",5498=>"WHIIQnt",5499=>"nHtgrHWQDDQSTGJD",5500=>"DQJQWt?WHntQnt|tBGQ!?GZrDQS!?WHntQnt!?WHnWZt}GZtO!?nZIQ{?ZD?fMJQ|nZIQ?frHI?WID|IHSuJQD|tQIGJZtQD",5501=>"{?",5502=>'JZnP',5503=>"\\\"",5504=>"fMJQGrH",5505=>"IBDEJ|",5506=>"WOSMr",5507=>"QxQW",5508=>"IKSMr",5509=>"WOPrG",5510=>"JMnK",5511=>"DOHC|DHurWQ",5512=>"\$tOMD",5513=>"rQEuMrQ|HnWQ",5514=>"GrMnt",5515=>"fMJQ|PQt|WHntQntD",5516=>"*\\C\\S&[{",5517=>'T|dTRmNp',5518=>"\\1%%",5519=>'~\$',5520=>"*'\\2'&&",5521=>'DuYdtrMnP',5522=>"\1",5523=>"^?rQturn?1^",5524=>"\2",5525=>"vZr|vZrMZYJQ",5526=>'"',5527=>">",5528=>'vZJuQ',5529=>"?\"'",5530=>"unSQfMnQS",5531=>"||gRmNT|VzRd|gRq||",5532=>"JZnPvZr|nHtfHunS",5533=>"||gRmNT|VzRd||",5534=>"vZrD",5535=>"#Yr@",5536=>'vZrD',5537=>"YQJHnP",5538=>"%?",5539=>"?*Mf&",5540=>"Mf}",5541=>"YHSB%",5542=>"\"?",5543=>"fMJQ",5544=>"\"?Mn?\"",5545=>"ps",5546=>'DQtD%fMJtQrD',5547=>"\\'",5548=>"YHSB%ruJQD",5549=>"WHuntQr",5550=>"<<MnWJuSQ|OtIJ",5551=>'MDmIGHrt',5552=>"MIGHrt|vZrMZYJQ",5553=>'GZDDQSmfVZrMZYJQD',5554=>'|PQtVZr',5555=>'PJHYZJ',5556=>"YJHWK",5557=>"JZnPD",5558=>"uGSZtQ?WID|IHSuJQD|tQIGJZtQD?DQt?GZrDQS='",5559=>"nHtgrHWQDDQSjZnPD",5560=>"Mf|WHnSMtMHnD",5561=>'nZIQ',5562=>'YHSB%vQrDMHn',5563=>"MnWJuSQ|tQIGJZtQ",5564=>"^",5565=>'DQtD%GZrZIQtQrD',5566=>'%',5567=>"DQtD%PJHYZJ",5568=>'DtZrtwHuntQr',5569=>"QJDQMf",5570=>"nQCjZDtwHuntQr",5571=>"{}",5572=>"{<<",5573=>'WHntQnt',5574=>"MS",5575=>"IZMn|YHSB",5576=>"%",5577=>"DQJQWt?WHntQnt?frHI?WID|IHSuJQD|tQIGJZtQD?COQrQ?GZtO='tQIGJZtQD~'?ZnS?nZIQ='GZPQD`tGJ'?",5578=>'ZSSQS',5579=>"|ZSIMn~tQIGJZtQD~",5580=>"RhhT|gzTo",5581=>'tGJ',5582=>"DQJQWt?unMx|tMIQDtZIG}DBnWOrHnMAQS{?ZD?IHSMfMQS|tI?frHI?WID|IHSuJQD|tQIGJZtQD",5583=>"IHSMfMQS|tI",5584=>"fHrWQ",5585=>'UgszTq?.WID|IHSuJQD|tQIGJZtQD',5586=>".WHntQnt.?=?'",5587=>"'!?",5588=>"coqRq?",5589=>'mNdqRT?mNTh?.WID|IHSuJQD|tQIGJZtQD',5590=>'|JZnPD',5591=>".nZIQ.?=?'",5592=>".MS|DMtQ.?=?",5593=>".GZrDQS.?=?''",5594=>"<<++DBDtQI?MnfH%?",5595=>"IHSuJQ|HCnQr",5596=>"!?IHSuJQ|HCnQr='",5597=>"IHSuJQ",5598=>"!?IHSuJQ='",5599=>"DBDtQI",5600=>'fZMJQS',5601=>"dqjqwT?MS!?GZtO!?nZIQ!?IHSuJQ|HCnQr!?IHSuJQ!?WHntQnt!?MD|DBD!?unMx|tMIQDtZIG}DBnWOrHnMAQS{?ZD?IHSMfMQS|tI!?ZJJHCQS?FRhi?WID|IHSuJQD|tQIGJZtQD",5602=>'DBDtQI',5603=>'``',5604=>"\n",5605=>"uGSZtQ?WID|IHSuJQD|tQIGJZtQD",5606=>"'?COQrQ?MS?Mn}'",5607=>'\\[',5608=>'[',5609=>"DQJQWt?MS!?GZtO!?nZIQ!?IHSuJQ?frHI?WID|IHSuJQD|tQIGJZtQD?COQrQ?GZtO='",5610=>"GZtO",5611=>'Qrr',5612=>'tQIGJZtQD~IHSuJQD',5613=>'tQIGJZtQD~JZnP~IHSuJQD',5614=>'ZrPD') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} define("TPL_E_EVAL_FAILED", 2); define("TPL_E_EVAL_FORBIDDEN", 4); class GUI_template{ public $_rxCallbackData; public $rootPath; public $filesMask; public $html; public $langs; public $lang; public $langPath; public $tags; public $title; public $metas; public $headerTags; public $styles; public $headerCode; public $scripts; public $htmlStyles; public $htmlScripts; public $blockName; public $languagePaths; public $debug; public $regExp; public $regExpCaseSensitive; public $regExpRequiredStr; public $globalVars; public $globalVarsOnce; public $globalVarsOnceList; public $foundVarsList; public $usedGlobalVarsList; public $usedGlobalVarsOnceList; public $_pr_matchPos; public $_pr_passedVars; public $_pr_file; public $_pr_type; public $_tmpName; public $_setName; public $_printVars; public $_printVarsCounter; public $_ifCounter; public $_isDebugTemplate; public $langIncludeMaxLevel; public $tplIncludeMaxLevel; public $phpIncludeAllowed; public $_ifStatementConditions; public $_tmpIfStatementProc; public $forceReadFileFromDisk; public $readFileFromDB; public $db; public $dbExistingTpls; public $_readParsedReturned; public $evalPolicyRX; public $isImportRequiredProcessed; public $allowCacheProcessedFiles; public $allowCacheFiles; public $allowCacheLanguages; public $cacheFiles; public $cacheLanguages; public $_cacheReadDBFiles; public $tplProcCachedData; public $currentSkin; public $aAllowedSetFilters =array(I5450); public $importDefaultContent =FALSE; protected $aReadLocalesMode =array(); protected $aSystemCSS =array(); protected $systemStyles =array(); protected $cssJoiner; protected $side; protected $readAdmFromDB =FALSE; protected $asyncScripts =array(); protected $aCallbackTmp =array(); function GUI_template(){ $this->regExpCaseSensitive =true; $this->regExp =Array( "include_html" => "/(##include_html *\")(.*?)(\" *##)([\\r\\n]?)/".(!$this->regExpCaseSensitive ?"i" :""), I5451 => "/(##include_php *\")(.*?)(\" *##)([\\r\\n]?)/".(!$this->regExpCaseSensitive ?"i" :""), "include_template" => "/(%%include_template *\")(.*?)(\" *%%)([\\r\\n]?)/".(!$this->regExpCaseSensitive ?"i" :""), "include_language" => "/(%%include_language *\")(.*?)(\" *%%)([\\r\\n]?)/".(!$this->regExpCaseSensitive ?I5452 :""), "set_statement" => "/(<!--#set +(GS|GD)?var=\")(.+?)\"(\s+filter=\"(.*?)\")?(\s+value=\")(.*?)(\"\\s*-->)([\\r]?[\\n]?)/s".(!$this->regExpCaseSensitive ?I5452 :""), I5453 => "/##[ \\t]*?(?:(if|elseif)[ \\t]*?\\((.*?)\\)|(else|endif))[ \\t]*?##/si", "if_statement" => "/##if\\((\\d+?)\\)##(.*?)##endif\\(\\1\\)##[\\r]?[\\n]?/s", "is_variable_defined_if_statement" => "/##[ \\t]*if\\s*\\(((.*?)([<>!=]{1,2})\\s*\\\"?(.*?)\\\"?\\s*)\\)[ \\t]*##(.*?)((##[ \\t]*else[ \\t]*##(.*?)##[ \\t]*endif[ \\t]*##)|(##[ \\t]*endif[ \\t]*##))[\\r]?[\\n]?/s".(!$this->regExpCaseSensitive ?I5452 :""), "replace_language" => "/%%([^%].*?|)%%/s", "replace_template" => I5454, "var_variable" => "/\\{(\\w+)\\}/s", "is_variable_defined" => I5454, "set_variable" => "/##[ \\t]*set(global)?var[ \\t]*(@?[\\w{}]*)[ \\t]*=[ \\t]*(\"?)(.*?)\\3[ \\t]*##[\\r]?[\\n]?/s".(!$this->regExpCaseSensitive ?I5452 :""), "import_variable" => "/##[ \\t]*import_(global)?var[ \\t]*([\\w]*)[ \\t]*=[ \\t]*(\"?)(.*?)\\3[ \\t]*##[\\r]?[\\n]?/s".(!$this->regExpCaseSensitive ?I5452 :""), "is_variable_defined_set_variable" => "/##[ \\t]*set(global)?var[ \\t]*@?(\\w*)[ \\t]*=[ \\t]*(\")?(.*?)\\3[ \\t]*##[\\r]?[\\n]?/s".(!$this->regExpCaseSensitive ?I5452 :""), "comment" => "/##--.*?--##[\\r]?[\\n]?/s", I5455 => "/^##--!ver=([0-9]{4})( rules=\"(.*)\")?--##/".(!$this->regExpCaseSensitive ?I5452 :"") );$this->cssJoiner =$this->_toStr(array(97, 109, 105, 114, 111, 95, 115, 121, 115, 95, 99, 115, 115, 46, 112, 104, 112)); $this->regExpRequiredStr =Array( "lang" => "%%", I5456 => "##", "comment" => "##--", "if_statement" => I5457, "set_variable" => "##setvar", "import_variable" => "##import", "set_global_variable" => "##setglobalvar", "var_variable" => "{" );$this->langs =array('en', I5458); $this->lang ="en"; $this->tags =Array(); $this->title =""; $this->styles =Array(); $this->headerCode =''; $this->scripts =Array(); $this->htmlStyles =Array(); $this->htmlScripts =Array(); $this->metas =Array(); $this->headerTags =Array(); $this->blockName =1; $this->setDebug("wrong_template_includes|nopened_files|wrong_languages|langvar_notfound|disallowed_files", true); $this->globalVars =Array(); $this->globalVarsOnce =false; $this->globalVarsOnceList =Array(); $this->foundVarsList =Array(); $this->usedGlobalVarsList =Array(); $this->usedGlobalVarsOnceList =Array(); $this->langIncludeMaxLevel =3; $this->tplIncludeMaxLevel =4; $this->_ifStatementConditions =array(); $this->_tmpIfStatementProc =array( I5459 => array(), "newLastCounter" => time() +mt_rand(0, 86400) );$this->_tmpName =""; $this->_setName =""; $this->_printVars =Array(); $this->_printVarsCounter =0; $this->_ifCounter =0; $this->_isDebugTemplate =false; $this->setRootPath(""); $this->setFilesMask("*.tpl *.lng *.htm *.html"); $this->allowPHPIncludes(false); $this->db =NULL; $this->dbExistingTpls =NULL; $this->readFileFromDB =false; $this->setForceReadFromDisk(defined("TEMPLATES_FROM_DISK")); $this->setReadFromDB(); $this->_readParsedReturned =false; $this->evalPolicyRX =null; $this->isImportRequiredProcessed =false; $this->allowCacheProcessedFiles =true; $this->tplProcCachedData =array(); $this->allowCacheFiles =true; $this->allowCacheLanguages =true; $this->cacheFiles =Array(); $this->cacheLanguages =Array(); $this->_cacheReadDBFiles =array( "notProcessedTpls" => array(), "notProcessedLangs" => array(), "processedFiles" => array() );$this->currentSkin =I5460; if(class_exists('AMI_Event')){ AMI_Event::addHandler('on_tpl_var_modifier_striptags', array($this, 'handleModifierStriptags'), AMI_Event::MOD_ANY); AMI_Event::addHandler('on_tpl_var_modifier_jparse', array($this, 'handleModifierJparse'), AMI_Event::MOD_ANY); AMI_Event::addHandler('on_tpl_var_modifier_truncate', array($this, 'handleModifierTruncate'), AMI_Event::MOD_ANY); AMI_Event::addHandler('on_tpl_var_modifier_htmlentities', array($this, 'handleModifierHtmlentities'), AMI_Event::MOD_ANY); }}function setSkinPath($skinPath){ $this->currentSkin =$skinPath; $this->addGlobalVars(array(I5461 => $skinPath)); }function correctFilePath($filePath){ return (strncmp($filePath, 'templates/', 10) == 0 || strncmp($filePath, '_host/', 6) == 0 ?$this->currentSkin :I5460).$filePath; }function procError($errType, $errData){ }function getSqlFilter($forceFront =FALSE){ if($this->side == 'front' || $forceFront){ $res =" AND (`side` IN ('front', 'shared') AND"; }else{ $res =" AND (`side` = 'admin' OR"; }$res .= ' `id_site` = ' .(empty($GLOBALS['MULTI_SITE_ID']) ?0 :(int)$GLOBALS['MULTI_SITE_ID']) .')'; return $res; }function setForceReadFromDisk($isReadFromDisk =true){ $this->forceReadFileFromDisk =$isReadFromDisk; if($this->forceReadFileFromDisk){ $this->setReadFromDB(false); }}function setReadFromDB($isFromDatabase =false){ if($this->readFileFromDB != $isFromDatabase) {if($this->forceReadFileFromDisk){ $this->readFileFromDB =false; }else {$this->readFileFromDB =$isFromDatabase; if($isFromDatabase && is_null($this->db)){ $this->db =new DB_si; }}}}function getReadFromDB(){ return $this->readFileFromDB; }function _isFileLocal($file){ return (strncmp($file, '_local/_admin/templates/', 24) == 0); }function _isFileShared($file){ return (strncmp($file, '_shared/', 8) == 0) || (strncmp($file, '_local/skins', 12) == 0) || (strncmp($file, '_local/plugins', 14) == 0) || (strncmp($file, '_local/eshop/pay_drivers', 24) == 0); }function getFileReadMode($file){ $mode =I5462; $aPathData =pathinfo($file); $dirname =isset($aPathData['dirname']) ?$aPathData['dirname'] :I5460; if(isset($this->aReadLocalesMode[$dirname])){ $mode =$this->aReadLocalesMode[$dirname]; }return $mode; }function isValidFile($file){ $isValidFile =!empty($file); if($isValidFile){ $readMode =$this->getFileReadMode($file); if($this->forceReadFileFromDisk || $readMode == 'disk'){ if($this->_isFileLocal($file)){ $file =$GLOBALS["ROOT_PATH"].$file; }$isValidFile =@is_file($this->correctFilePath($file)); }else if($readMode == I5463 || ($this->readFileFromDB || $this->_isFileLocal($file)) && !$this->_isFileShared($file)){ if(is_null($this->dbExistingTpls)){ $prevTplReadMode =$this->readFileFromDB; $this->setReadFromDB(true); $this->dbExistingTpls =array(); $sql =I5464.$this->getSqlFilter(); $this->db->query($sql); while($this->db->nextRecord()){ $this->dbExistingTpls[$this->db->Record[I5456]] =true; }$sql =I5465.$this->getSqlFilter(); $this->db->query($sql); while($this->db->nextRecord()){ $this->dbExistingTpls[$this->db->Record[I5456]] =true; }$this->setReadFromDB($prevTplReadMode); }$isValidFile =isset($this->dbExistingTpls[$file]); }else if(@is_file($this->correctFilePath($file))){ $isValidFile =true; }else{ $isValidFile =false; }}return $isValidFile; }function setRootPath($cPath){ if(empty($cPath) || ($cPath =realpath($cPath)) === false){ $this->rootPath =""; return false; }$this->rootPath =str_replace("\\", "/", $cPath); if(!empty($this->rootPath) && $this->rootPath[mb_strlen($this->rootPath)-1] != "/") $this->rootPath .= I5466; return true; }function getRootPath(){ return $this->rootPath; }function setFilesMask($cMask){ if($cMask == "" || preg_match('/(^| )\\*( |$)/', $cMask)){ $this->filesMask =""; }else{ $this->filesMask =""; foreach(explode(I5467, $cMask) as $mask){ if(!empty($mask)) {$this->filesMask .= "|(".str_replace("\\*", ".*?", quotemeta($mask)).")"; }}if(mb_strlen($this->filesMask) >0) {$this->filesMask =I5468.mb_substr($this->filesMask, 1).')$/si'; }}return true; }function getFilesMaskRegExp(){ return $this->filesMask; }function allowPHPIncludes($newVal =true){ $this->phpIncludeAllowed =$newVal && empty($GLOBALS['sys']['disable_user_scripts']); }function runPHP($path){ $html_return =""; if($this->phpIncludeAllowed){ $path =trim($path); if(!preg_match(I5469, $path)){ if($this->_isDebug("disallowed_files")) {$this->_outDebug("Unable to open file because of incorrect path: \"".$include_file."\""); }return ""; }if(is_file($path)) {include($path); }}return $html_return; }function cacheState($cState, $cType =I5470){ $state =(bool)$cState; if ($cType == "files") {$this->allowCacheFiles =$state; }elseif ($cType == "languages") {$this->allowCacheLanguages =$state; }elseif ($cType == "processed") {$this->allowCacheProcessedFiles =$state; }else {$this->allowCacheFiles =$state; $this->allowCacheLanguages =$state; $this->allowCacheProcessedFiles =$state; }}function cacheClear($cType =I5470){ if($cType == "files") {$this->cacheFiles =Array(); }elseif ($cType == I5471) {$this->cacheLanguages =Array(); }else {$this->cacheFiles =Array(); $this->cacheLanguages =Array(); }}function setDebug($str, $reset =false){ $options ='|'.mb_strtolower(str_replace(I5467, "", $str)).'|'; if($reset) {$this->debug =Array(); }if(mb_strpos($options, '|all|') !== false) {$this->debug =Array(I5472 => 1); }else {foreach (explode('|', $options) as $key => $val) {$this->debug[$val] =1; }}}function addDebug($str){ $this->setDebug($str, false); }function delDebug($str){ $options ='|'.mb_strtolower(str_replace(I5467, "", $str)).'|'; if(mb_strpos($options, I5473) !== false) {$this->debug =Array(); }else {foreach(explode('|', $options) as $key => $val) {if(isset($this->debug[$val])) {unset($this->debug[$val]); }}}}function _isDebug($str){ $res =(isset($this->debug[I5472]) || isset($this->debug[$str])); return $res; }function _outDebug($str){ if(!AMI_Service::isDebugSkipped()){ AMI_Debug::write('<font color="red">' .$str .'</font><br>'); }}function setLang($lang){ $currentLang =$this->getLang(); $str =mb_strtolower($lang); if($str == "" || !@in_array($str, $this->langs)) {$this->lang =$this->langs[0]; }else {$this->lang =$str; }if($currentLang != $this->getLang()) {$this->cacheClear(I5471); }}function getLang(){ return $this->lang; }function setLangPath($path){ if($path != I5474){ if(mb_strrpos($path, "\\") === false && mb_strrpos($path, I5466) === false) {$path .= I5466; }$this->langPath =$path; }}function setTag($name, $content){ $this->tags[$name] =$content; }function delTag($name =false){ if($name === false) $this->tags =Array(); else unset($this->tags[$name]); }function getTag($name){ if(isset($this->tags[$name]) && $this->tags[$name] != I5474) return "<$name ".$this->tags[$name].">"; else return I5474; }function setTitle($str){ $this->title =$str; }function getTitle(){ return $this->title != I5460 ?'<title>' .$this->title .'</title>' :I5460; }public function addStyle($path, $aTmp =array(), $isSysContext =TRUE){ if($path != I5460){ if(!@in_array($path, $this->styles)){ $this->styles[] =$path; }}}function delStyle($path =false){ if($path === false) $this->styles =Array(); else{ foreach($this->styles as $key => $value) if($value == $path) array_splice($this->styles, $key, 1); }}function getStyles(){ global $CMS_VERSION, $Core; $out =I5474; if(sizeof($this->systemStyles)){ $params =$this->urlVersionParam .I5475 .$CMS_VERSION .'&less_mode=' .$Core->GetModOption('common_settings', 'less_css_mode'); if(($this->side == 'front') && class_exists(I5476)){ if(AMI::issetOption('common_settings', 'css_js_version')){ $versionCssJs =AMI::getOption('common_settings', 'css_js_version'); $params .= (I5477 .$versionCssJs); }}$out .= "<link rel=\"stylesheet\" href=\"" .$this->cssJoiner ."?styles=" .implode('|', $this->systemStyles) ."&" .$params ."\" type=\"text/css\">\r\n"; }for($i =0;$i <count($this->styles);$i++) {if(!in_array($this->styles[$i], $this->aSystemCSS)){ $out .= "<link rel=\"stylesheet\" href=\"".$this->styles[$i]."\" type=\"text/css\">\r\n"; }}return $out; }function addScript($path, $async =false){ if($path != I5460 && !@in_array($path, $this->scripts)){ $this->scripts[] =$path; if($async){ $this->asyncScripts[$path] =true; }}}function delScript($path =false){ if($path === false) $this->scripts =Array(); else{ foreach($this->scripts as $key => $value) {if($value == $path) {array_splice($this->scripts, $key, 1); }}}}function getScripts(){ $out =I5474; for($i =0;$i <count($this->scripts);$i++) {$out .= "<script type=\"text/javascript\" src=\"" .$this->scripts[$i] ."\"" .((isset($this->asyncScripts[$this->scripts[$i]])) ?I5478 :I5474) ."></script>\r\n"; }return $out; }function addHtmlScript($text){ if($text != I5474 && !@in_array($text, $this->htmlScripts)) {$this->htmlScripts[] =$text; }}function delHtmlScript($text =false){ if($text === false) $this->htmlScripts =Array(); else{ foreach($this->htmlScripts as $key => $value) {if($value == $text) {array_splice($this->htmlScripts, $key, 1); }}}}function getHtmlScripts(){ $out =I5474; if (sizeof($this->htmlScripts) >0){ $out ="<script type=\"text/javascript\">\r\n" .implode("\r\n", $this->htmlScripts) ."\r\n</script>\r\n"; }return $out; }function addHtmlStyle($text){ if($text != I5474 && !@in_array($text, $this->htmlStyles)) {$this->htmlStyles[] =$text; }}function delHtmlStyle($text =false){ if($text === false) {$this->htmlStyles =Array(); }else {foreach($this->htmlStyles as $key => $value) {if($value == $text) {array_splice($this->htmlStyles, $key, 1); }}}}function getHtmlStyles(){ $out =I5474; if(count($this->htmlStyles) >0){ $out ="<style type=\"text/css\">\r\n"; for($i =0;$i <count($this->htmlStyles);$i++) {$out .= $this->htmlStyles[$i]."\r\n"; }$out .= "</style>\r\n"; }return $out; }function addMeta($item, $name, $content, $language =I5474){ if($item != I5474 && $name != I5474){ $counter =@count($this->metas); for($i =0; $i <$counter; $i++) if($this->metas[$i]["item"] == $item && $this->metas[$i]["name"] == $name && ($this->metas[$i][I5479] == $language || $language == I5474)){ $this->metas[$i] =Array( "item" => $item, "name" => $name, "content" => $content, I5479 => $language );return; }$this->metas[] =Array( "item" => $item, I5480 => $name, "content" => $content, I5479 => $language );}}function delMeta($cLanguageOrItem =false, $cName =false, $cLanguage =false){ $counter =@count($this->metas); if($cLanguageOrItem === false && $cName === false && $cLanguage === false){ $this->metas =Array(); }else if($cLanguageOrItem !== false && $cName === false && $cLanguage === false){ for($i =0; $i <$counter; $i++) if($this->metas[$i][I5479] == $cLanguageOrItem){ array_splice($this->metas, $i, 1); $i--; $counter--; }}else{ for($i =0; $i <$counter; $i++) if($this->metas[$i]["item"] == $cLanguageOrItem && $this->metas[$i][I5480] == $cName && ($cLanguage === false || $this->metas[$i][I5479] == $cLanguage)){ array_splice($this->metas, $i, 1); $i--; $counter--; }}}function getMetas($selectedMeta =I5460){ $out =I5474; for($i =0; $i <@count($this->metas); $i++){ if( ($this->metas[$i][I5479] == $this->lang || $this->metas[$i][I5479] == I5474) && ($selectedMeta == I5460 || $this->metas[$i][I5480] == I5460) ){$out .= "<meta ".$this->metas[$i]["item"].I5481.$this->metas[$i][I5480]."\" content=\"".$this->metas[$i]["content"]."\">\r\n"; }}return $out; }function getMeta($name) {$out =I5474; for($i =0; $i <@count($this->metas); $i++){ if(($this->metas[$i][I5479] == $this->lang || $this->metas[$i][I5479] == I5474) && $this->metas[$i][I5480] == $name){ $out .= "<meta ".$this->metas[$i][I5482].I5481.$this->metas[$i][I5480]."\" content=\"".$this->metas[$i]["content"]."\">"; break; }}return $out; }function addHeaderTag($cName, $cInnerContent, $cOuterContent =I5474, $cRepeatName =false){ if($cName != I5474){ $counter =@count($this->headerTags); for($i =0; $i <$counter; $i++) if($this->headerTags[$i][I5480] == $cName){ if ($cRepeatName) $this->headerTags[] =Array( I5480 => $cName, "inner" => $cInnerContent, I5483 => $cOuterContent );else $this->headerTags[$i] =Array( I5480 => $cName, "inner" => $cInnerContent, I5483 => $cOuterContent );return; }$this->headerTags[] =Array( I5480 => $cName, "inner" => $cInnerContent, I5483 => $cOuterContent );}}function delHeaderTag($cName =false){ if($cName === false) $this->headerTags =Array(); else{ foreach($this->headerTags as $key => $value) {if($value[I5480] == $cName) {array_splice($this->headerTags, $key, 1); }}}}function getHeaderTags(){ $out =I5474; for($i =0; $i <@count($this->headerTags); $i++){ if($this->headerTags[$i][I5483] == I5474){ $out .= "<".$this->headerTags[$i][I5480].I5467.$this->headerTags[$i]["inner"].I5484; }else{ $out .= "<".$this->headerTags[$i][I5480].I5467.$this->headerTags[$i]["inner"].">".$this->headerTags[$i][I5483]."</".$this->headerTags[$i][I5480].I5484; }}return $out; }function setHeaderCode($code, $replace =true) {if ($replace) {$this->headerCode =(string)$code; }else {$this->headerCode .= (string)$code; }}function header($file =I5474){ $out =I5474; if($this->isValidFile($file)){ $this->addBlock(I5485, $file); $out =$this->getAbs(I5485); }else{ $title =$this->getTitle(); $body =$this->getTag("body"); $base =$this->getTag("base"); $out ="<html>\r\n". "<head>\r\n". ($title == I5474 ?I5474 :$title.I5486). $this->getMetas(). $base.I5486. $this->getHeaderTags(). $this->getHtmlStyles(). $this->getStyles(). $this->getHtmlScripts(). $this->getScripts(). "</head>\r\n". ($body == I5474 ?I5474 :$body.I5486); }return $out; }function footer($file =I5474, $aData =I5474){ $out =I5474; if($this->isValidFile($file)){ $this->addBlock(I5485, $file); $out =$this->getAbs(I5485, $aData); }else{ $out ="</body>\r\n". "</html>"; }return $out; }function getUsedGlobalVars(){ $out =array_keys($this->usedGlobalVarsList); return $out; }function getFoundVars(){ $out =array_keys($this->foundVarsList); return $out; }function removeFoundVars() {$this->foundVarsList =array(); }function _checkFile($file){ if(!empty($this->rootPath) && (($pathPos =mb_strpos($file, $this->rootPath)) === false || $pathPos != 0)){ if($this->_isDebug("disallowed_files")) {$this->_outDebug("Unable to open file because of incorrect path: \"".$filename."\""); }return false; }if(!empty($this->filesMask) && !preg_match($this->filesMask, $file)){ if($this->_isDebug("disallowed_files")) {$this->_outDebug("Unable to open file because of incorrect file mask: \"".$file."\""); }return false; }return true; }function _isReadFileFromDB($file){ $mode =$this->getFileReadMode($file); if($mode != I5462){ return $mode == I5463; }$isFromDB =$this->readFileFromDB; if($this->forceReadFileFromDisk || $this->_isFileShared($file)){ $isFromDB =false; }else if(!$isFromDB && $this->_isFileLocal($file)){ $isFromDB =true; }return $isFromDB; }function _correctReadMode($file) {$mode =$this->getFileReadMode($file); if($mode == I5463){ $this->setReadFromDB(true); }else if($mode == I5487){ $this->setReadFromDB(false); }$filePrefix =I5474; if($this->_isFileLocal($file)) {if($mode == I5462){ $this->setReadFromDB(true); }if($this->forceReadFileFromDisk || $mode == I5487){ $filePrefix =$GLOBALS["ROOT_PATH"]; }}elseif($this->_isFileShared($file) && !(!$this->forceReadFileFromDisk && $mode == I5463)){ $filePrefix =$GLOBALS["FRONT_SHARED_TPL_PREF"]; if($mode == I5462){ $this->setReadFromDB(false); }}return $filePrefix; }function _readFromFile($file, $returnParsedIfPossible =false, $reqParsedContentPostfix ="default"){ $admPrefix =$this->getAdmPrefix($file); $str =I5474; $filename =$file; $fileContent =false; $isContentParsed =false; if($this->allowCacheFiles && isset($this->cacheFiles[$admPrefix .$file])) {if($returnParsedIfPossible){ if(isset($this->cacheFiles[$admPrefix .$file]["parsed"][$reqParsedContentPostfix])){ return array($this->cacheFiles[$admPrefix .$file][I5488][$reqParsedContentPostfix], true); }else if(isset($this->cacheFiles[$admPrefix .$file]["content"])) return array($this->cacheFiles[$admPrefix .$file]["content"], false); }if(isset($this->cacheFiles[$admPrefix .$file]["content"])) return $this->cacheFiles[$admPrefix .$file]["content"]; }if($this->_checkFile($file)) {$oldReadFileFromDB =$this->readFileFromDB; $filePrefix =$this->_correctReadMode($file); if($this->readFileFromDB && (!$this->forceReadFileFromDisk || $admPrefix)){ $plainContent =I5474; if(isset($this->_cacheReadDBFiles[I5489][$admPrefix .$file])){ $plainContent =$this->_cacheReadDBFiles[I5489][$admPrefix .$file]["content"]; if($this->allowCacheProcessedFiles && $returnParsedIfPossible && $this->_cacheReadDBFiles[I5489][$admPrefix .$file]["content_type"] == "1"){ $isContentParsed =true; $fileContent =$this->_cacheReadDBFiles[I5489][$admPrefix .$file][I5488]; }else{ $fileContent =$plainContent; }}else{ $tablePostf =I5474; $resFlds =$this->allowCacheProcessedFiles && $returnParsedIfPossible ?"content, parsed, content_type" :I5490; if(mb_strpos($file, ".lng") !== false){ $tablePostf ="_langs"; }$fileName =mb_substr(strrchr($file, '/'), 1); $filePath =mb_substr($file, 0, -mb_strlen($fileName)); $sql ="select ".$resFlds.I5491.$tablePostf.I5492.mysql_real_escape_string($filePath, $this->db->_dbLink)."' and name='".mysql_real_escape_string($fileName, $this->db->_dbLink)."' ".$this->getSqlFilter(); if($admPrefix){ $sql .= " AND `side` = 'admin'"; }$this->db->query($sql); if($this->db->nextRecord()){ $plainContent =$this->db->Record[I5490]; if(isset($this->db->Record["content_type"]) && $this->db->Record[I5493] == 1){ $isContentParsed =true; $fileContent =unserialize($this->db->Record[I5488]); $this->_cacheReadDBFiles[I5489][$admPrefix .$file] =array( I5493 => "1", I5490 => $plainContent, I5488 => $fileContent );}else{ $fileContent =$plainContent; }}else $file =NULL; }if($isContentParsed && $reqParsedContentPostfix != "default"){ if(isset($fileContent[$reqParsedContentPostfix])){ $fileContent =$fileContent[$reqParsedContentPostfix]; }else{ $isContentParsed =false; $fileContent =$plainContent; }}}else{ if(($fileContent =@file_get_contents($filePrefix.$this->correctFilePath($file))) === false){ $file =NULL; }}$this->setReadFromDB($oldReadFileFromDB); if(is_null($file)){ if($this->_isDebug("nopened_files")){ $this->_outDebug("Unable to open file \"".$filename.I5494); }return false; }else{ if($this->_isDebug("all_files")) $this->_outDebug("Opened file \"".$filename.I5494); }if($this->allowCacheFiles){ if($isContentParsed){ $this->cacheFiles[$admPrefix .$file][I5488][$reqParsedContentPostfix] =$fileContent; }else $this->cacheFiles[$admPrefix .$file][I5490] =$fileContent; }}if($returnParsedIfPossible){ return array($fileContent, $isContentParsed); }else return $fileContent; }function saveProcessedLangs($file, $lang, $data){ if($this->allowCacheProcessedFiles && $this->_isReadFileFromDB($file) && $this->isValidFile($file)){ $procData =null; $admPrefix =$this->getAdmPrefix($file); if(isset($this->_cacheReadDBFiles[I5489][$admPrefix .$file])){ $procData =$this->_cacheReadDBFiles[I5489][$admPrefix .$file][I5488]; }else{ $sql =I5495.$file."' ".$this->getSqlFilter(); if($admPrefix){ $sql .= " AND `side` = 'admin'"; }$this->db->query($sql); if($this->db->nextRecord()){ if(!empty($this->db->Record[I5488])){ $procData =unserialize($this->db->Record[I5488]); }}}if(!is_null($procData)){ if(!is_array($procData)){ $procData =array(); }$procData[$lang] =$data; $sql =I5496.mysql_real_escape_string(serialize($procData), $this->db->_dbLink)."', content_type=1 where concat(path,name)='".$file."' ".$this->getSqlFilter(); if($admPrefix){ $sql .= " AND `side` = 'admin'"; }$this->db->query($sql); }}}public function &parseLocales($file){ return $this->parseLangFile($file); }function &parseLangFile($file){ $out =array(); $this->_cacheReadDBFiles["notProcessedLangs"][] =$file; $this->_prepareDBFiles(true); $admPrefix =$this->getAdmPrefix($file); if(is_array($file)){ $realFile =I5474; $fileCnt =sizeof($file); for($i =0; $i <$fileCnt; $i++){ if($this->isValidFile($realFile)) break; $realFile =I5474; }$file =$realFile; }if( !empty($file) && $this->allowCacheLanguages && !empty($this->cacheLanguages[$admPrefix .$file][$this->lang]) && !empty($this->cacheLanguages[$admPrefix .$file][$this->lang]) ){return $this->cacheLanguages[$admPrefix .$file][$this->lang]; }if(!$this->isValidFile($file)){ if($this->_isDebug("wrong_languages")){ $this->_outDebug("Unable to open language file \"".$file.I5494); }return $out; }list($str, $isParsed) =$this->_readFromFile($file, true, $this->lang); if($isParsed){ return $str; }for($iLevel =0; $iLevel <$this->langIncludeMaxLevel; $iLevel ++){ $matches =array(); preg_match_all($this->regExp["include_language"], $str, $matches); for($i =0; $i <sizeof($matches[0]); $i++){ $content =I5474; $include_file =trim($matches[2][$i]); if($this->isValidFile($include_file)){ if( $this->allowCacheLanguages && !empty($this->cacheLanguages[$include_file]) && !empty($this->cacheLanguages[$include_file][$this->lang]) ){$out =array_merge($out, $this->cacheLanguages[$include_file][$this->lang]); }else {$content =$this->_readFromFile($include_file); if($iLevel == $this->langIncludeMaxLevel -1){ $orgContentLen =mb_strlen($content); $content =preg_replace($this->regExp["include_language"], I5474, $content); if($orgContentLen != mb_strlen($content) && $this->_isDebug("wrong_language_includes")){ $this->_outDebug("Illegal use of language includes in \"".$include_file.I5494); }}}}else if($this->_isDebug(I5497)){ $this->_outDebug('Unable to include language file "' .$include_file .'" in "' .$file .'"'); }$str =str_replace($matches[0][$i], $content, $str); }}$this->parseLangText($str, $out); if($this->allowCacheLanguages) $this->cacheLanguages[$admPrefix .$file][$this->lang] =$out; if($this->allowCacheProcessedFiles){ $this->saveProcessedLangs($admPrefix .$file, $this->lang, $out); }return $out; }function parseLangText(&$cStr, &$vOut){ $lang ="%".$this->lang; $len =mb_strlen($lang); $str =preg_replace($this->regExp[I5498], I5474, $cStr); $arr =mb_split("%%", $str); $num =count($arr); for($i =1;$i <$num;$i+=2){ if(mb_strpos($arr[$i], $lang) === (mb_strlen($arr[$i])-$len)) $vOut[mb_substr($arr[$i], 0, mb_strlen($arr[$i])-$len)] =trim($arr[$i+1]); }}function _prepareDBFiles($isLang =false){ if( $isLang && $this->allowCacheLanguages && ($aSz =sizeof($this->_cacheReadDBFiles["notProcessedLangs"])) >0 || !$isLang && $this->allowCacheFiles && ($aSz =sizeof($this->_cacheReadDBFiles["notProcessedTpls"])) >0 ){$procFiles =array(); $admPrefixes =array(); for($i =0; $i <$aSz; $i++){ $candidateFile =&$this->_cacheReadDBFiles[$isLang ?"notProcessedLangs" :I5499][$i]; $admPrefix =$this->getAdmPrefix($candidateFile); if(isset($this->_cacheReadDBFiles[I5489][$admPrefix .$candidateFile]) || $this->allowCacheFiles && isset($this->cacheFiles[$admPrefix .$candidateFile])) continue; if($this->_isReadFileFromDB($candidateFile) && $this->isValidFile($candidateFile)){ $fileName =mb_substr(strrchr($candidateFile, '/'), 1); $filePath =mb_substr($candidateFile, 0, -mb_strlen($fileName)); $procFiles[] ="(path='".mysql_real_escape_string($filePath, $this->db->_dbLink)."' and name='".mysql_real_escape_string($fileName, $this->db->_dbLink)."'" .($admPrefix ?" AND `side` = 'admin'" :I5460) .")"; $admPrefixes[$candidateFile] =$admPrefix; }}if(sizeof($procFiles) >0){ $sql =I5500.($isLang ?"_langs" :I5474)." where (".implode(" OR ", $procFiles).I5501.$this->getSqlFilter(); $this->db->query($sql); while($this->db->nextRecord()){ $file =$this->db->Record["file_name"]; $this->_cacheReadDBFiles[I5489][$admPrefixes[$file] .$file] =array( I5493 => $this->db->Record[I5493], I5490 => $this->db->Record[I5490], I5488 => ($this->db->Record[I5493] == 1 ?unserialize($this->db->Record[I5488]) :I5474) );}}}$this->_cacheReadDBFiles[$isLang ?"notProcessedLangs" :I5499] =array(); }function _replaceLanguage($str, $html_id =false, $file =I5474){ $aLang =Array(); if(mb_strpos($str, $this->regExpRequiredStr['lang']) === false){ return $str; }if($html_id !== false){ if(isset($this->html[$html_id]['lang'][$this->lang])) {$aLang =&$this->html[$html_id][I5502][$this->lang]; }elseif(@is_array($this->languagePaths[$html_id])){ foreach($this->languagePaths[$html_id] as $key => $value){ $aLang =array_merge($aLang, $this->parseLangFile($value)); }if($this->allowCacheLanguages){ $this->html[$html_id][I5502][$this->lang] =$aLang; }}}$this->_prepareGetVar(1, $aLang, $file, I5479); $str =preg_replace_callback($this->regExp["replace_language"], array($this, '_getVar'), $str); $this->_cleanGetVar(); return $str; }function _myStripSlashes($cStr){ $str =$cStr; $str =strtr($str, Array("\\'" => "'", I5503 => I5494, "\\\\" => "\\")); return $str; }function _checkEvalPolicy($cCode){ if(is_null($this->evalPolicyRX)){ $forbiddenFunctions =array("dbmopen", "dbase_open", I5504, "filepro_rowcount", "filepro_retrieve", "ifx_", "ingres_", I5505, "pg_loimport", "posix_mkfifo", "putenv", "move_uploaded_file", I5506, "dl", "eval", "`", "shell_exec", I5507, "system", "passthru", "popen", "fopen", I5508, "rmdir", "rename", "unlink", "copy", I5509, "chown", "chmod", "touch", "symlink", I5510, "apache_request_headers", "getallheaders", "header", "PHP_AUTH", I5511, "parse_ini_file", "set_time_limit", "php_ini", "mail", I5512, "_d", "include", "include_once", "require", I5513, "require_vars", "_vd", "var_dump", "echo", I5514, "mysqli_", "pdo", "assert", "file_put_contents", I5515, "readfile", "call_user_func", "call_user_func_array", "create_function", "register_shutdown_function", "register_tick_function", "forward_static_call", "forward_static_call_array"); for($i =0; $i <sizeof($forbiddenFunctions); $i++) $forbiddenFunctions[$i] ="(".quotemeta($forbiddenFunctions[$i]).I5516; $this->evalPolicyRX ="/(?:^|[^\\w])(".implode("|", $forbiddenFunctions).")\\s*(->|\(|\[)/s"; }if(preg_match($this->evalPolicyRX, mb_strtolower($cCode))){ return false; }if(!empty($GLOBALS['sys']['disable_user_scripts'])){ $aTokens =token_get_all("<?php \n" .$cCode); for($t =0, $q =sizeof($aTokens); $t <$q; $t++){ $token =$aTokens[$t]; if(is_array($token)){ if(token_name($token[0]) == 'T_STRING' && $aTokens[$t+1] == '('){ if(!function_exists($token[1])){ return FALSE; }}elseif( token_name($token[0]) == 'T_DOUBLE_COLON' && token_name($aTokens[$t-1][0]) == I5517 && token_name($aTokens[$t+1][0]) == I5517 ){if(!method_exists($aTokens[$t-1][0], $aTokens[$t+1][0])){ return FALSE; }}}}}return true; }function _replaceVarsInStr($str, $varName){ $subString =array(); $this->aCallbackTmp['subString'] =array(); $str =preg_replace_callback( '/(["\'])(.*?)\\1/s', array($this, '_cbCollectQuotedStrings'), $str );while(preg_match('/(^|[^"\'A-Za-z\_0-9\[])([0-9A-Za-z\_]*[A-Za-z_]+[0-9A-Za-z\_]*)([^\]"\'A-Za-z\_0-9\(\[]|$)/s', $str, $matches)){ $str =preg_replace('/(^|[^"\'A-Za-z\_0-9\[])([0-9A-Za-z\_]*[A-Za-z_]+[0-9A-Za-z\_]*)([^\]"\'A-Za-z\_0-9\(\[]|$)/s', "\\1\$".$varName."['\\2']\\3", $str, 1); }if(mb_strpos($str, '::') !== false){ $str =preg_replace( array( "/\\$" .$varName ."\['([^']+)'\]\:\:\\$" .$varName ."\['([^']+)'\]/s", "/\\$" .$varName ."\['([^']+)'\]\:\:/s" ),array( "\\1::\\2", I5518 ),$str );}$str =preg_replace('/(\$'.$varName.'\[\'[^\]]*\'\])(\s+\()/si', '\1.\2', $str); if(mb_strpos($str, $this->regExpRequiredStr["var_variable"]) !== false) $str =preg_replace(I5519.$varName.'\[\'([^\']*?)\'\]{\$'.$varName.'\[\'([^\']*?)\'\]}/s', "\$".$varName."['\\1'.\$".$varName.I5520, $str); $str =preg_replace_callback( '/"(\d+)"/', array($this, '_cbGetSubstrings'), $str );unset($this->aCallbackTmp['subString']); return $str; }protected function _cbCollectQuotedStrings(array $aMatches){ return '"' .array_push( $this->aCallbackTmp[I5521], stripslashes($aMatches[1]) .$aMatches[2] .stripslashes($aMatches[1]) ).'"'; }protected function _cbGetSubstrings(array $aMatches){ return $this->aCallbackTmp[I5521][$aMatches[1] -1]; }function _replaceIfBlock(array $aMatches){ list(, $iIfNum, $sContent) =$aMatches; $_vars =$this->aCallbackTmp['passedIfVariables']; if(isset($this->_ifStatementConditions[$iIfNum])){ $value =null; $retVal =false; $code ="\$retVal = ".$this->_ifStatementConditions[$iIfNum][0]."; return 1;"; if($this->_ifStatementConditions[$iIfNum][1]){ $bError =$this->evalPHP($code, $_vars, $retVal, $value) != 1; if($bError){ return $this->procError(TPL_E_EVAL_FAILED, $this->_ifStatementConditions[$iIfNum][0]); }}else{ return $this->procError(TPL_E_EVAL_FORBIDDEN, $this->_ifStatementConditions[$iIfNum][0]); }if($retVal){ $sContent =I5522.$sContent; }else $sContent ="\2".$sContent; }while(preg_match('/##elseif\\('.$iIfNum.'\\)\\((\\d+?)\\)##/si', $sContent, $matches)){ $retVal =false; $value =null; if(isset($this->_ifStatementConditions[$matches[1]])){ $code ="\$retVal = ".$this->_ifStatementConditions[$matches[1]][0].I5523; if($this->_ifStatementConditions[$matches[1]][1]){ $bError =$this->evalPHP($code, $_vars, $retVal, $value) != 1; if($bError){ return $this->procError(TPL_E_EVAL_FAILED, $this->_ifStatementConditions[$matches[1]][0]); }}else{ return $this->procError(TPL_E_EVAL_FORBIDDEN, $this->_ifStatementConditions[$matches[1]][0]); }}if($retVal) $sContent =str_replace($matches[0], I5522, $sContent); else $sContent =str_replace($matches[0], "\2", $sContent); }$sContent =str_replace("##else(".$iIfNum.")##", I5522, $sContent); $sContent .= "\2"; if(($pos =mb_strpos($sContent, I5522)) !== false){ $sContent =mb_substr($sContent, $pos+1); if(($pos =mb_strpos($sContent, I5522)) !== false) $sContent =mb_substr($sContent, 0, $pos); if(($pos =mb_strpos($sContent, I5524)) !== false) $sContent =mb_substr($sContent, 0, $pos); if(mb_strpos($sContent, "##if(") !== false) $sContent =preg_replace_callback( $this->regExp["if_statement"], array($this, '_replaceIfBlock'), $sContent );return $sContent; }else{ return I5474; }}function _setVar($variable, $value, $delimeter, $isGlobal, &$aVars, $isImport =false){ while(mb_strpos($variable, $this->regExpRequiredStr["var_variable"]) !== false) {if(preg_match($this->regExp[I5525], $variable, $res)) {$variable =preg_replace($this->regExp[I5525], $this->_getVar(Array($this->_pr_matchPos => $res[1])), $variable); }else {$variable =str_replace($this->regExpRequiredStr[I5525], I5474, $variable); }}$variable =str_replace("\\'", "'", $variable); if($variable[0] == "@" && !$isImport){ $variable =mb_substr($variable, 1); $_vars =array_merge($this->globalVars, $aVars); if($delimeter == '"') $value =I5526.$value.I5526; $value =$this->_replaceVarsInStr($value, "_vars"); if($value[mb_strlen($value)-1] == ";") $value =mb_substr($value, 0, mb_strlen($value)-1); if($value !== I5460){ $code ="\$value=stripslashes(".$value.");return 1;"; if($this->_checkEvalPolicy($code)){ if($this->evalPHP($code, $_vars, $retVal, $value) != 1){ return $this->procError(TPL_E_EVAL_FAILED, I5527.$variable); }}else{ return $this->procError(TPL_E_EVAL_FORBIDDEN, I5527.$variable); }}}else if($isImport){ $code ="\$value=stripslashes(".stripcslashes($value).");return 1;"; if($this->_checkEvalPolicy($code)){ if($this->evalPHP($code, $_vars, $retVal, $value) != 1) return $this->procError(TPL_E_EVAL_FAILED, $variable); }else return $this->procError(TPL_E_EVAL_FORBIDDEN, $variable); }if($isGlobal) $this->addGlobalVars(Array($variable => $value)); else $aVars[$variable] =$value; return I5474; }function quit(){ exit; }function _prepareGetVar($matchPos, &$passedVars, $file, $type =I5456){ $this->_pr_matchPos =$matchPos; $this->_pr_passedVars =&$passedVars; $this->_pr_file =$file; $this->_pr_type =$type; }function _cleanGetVar(){ unset($this->_pr_matchPos); unset($this->_pr_passedVars); unset($this->_pr_file); unset($this->_pr_type); }function _getVar($variable, $passedVars=array(), $file=I5474, $type =I5456){ $variable =$variable[$this->_pr_matchPos]; $passedVars =$this->_pr_passedVars; $file =$this->_pr_file; $type =$this->_pr_type; $pos =strpos($variable, '|'); if($pos !== false){ $aParts =explode('|', $variable); $variable =$aParts[0]; if(isset($passedVars[$variable])){ unset($aParts[0]); foreach($aParts as $modifier){ $aEvent =array( I5528 => $passedVars[$variable] );if(strpos($modifier, '(') !== false){ $aMatches =array(); if(preg_match_all('/(.*)\((.*)\)/iU', $modifier, $aMatches)){ $modifier =$aMatches[1][0]; if(mb_strpos($aMatches[2][0], ',') !== false){ $aArgs =array(); $aArgsNP =explode(",", $aMatches[2][0]); foreach($aArgsNP as $arg){ $aArgs[] =trim($arg, I5529); }$aEvent['args'] =$aArgs; }else{ $aEvent['args'] =$passedVars[$aMatches[2][0]]; }}}if(class_exists('AMI_Event')){ AMI_Event::fire('on_tpl_var_modifier_' .$modifier, $aEvent, AMI_Event::MOD_ANY); }$passedVars[$variable] =$aEvent[I5528]; }}}while(mb_strpos($variable, $this->regExpRequiredStr[I5525]) !== false) {if(preg_match($this->regExp[I5525], $variable, $res)) {$variable =preg_replace($this->regExp[I5525], $this->_getVar(Array($this->_pr_matchPos => $res[1])), $variable); }else {$variable =str_replace($this->regExpRequiredStr[I5525], I5474, $variable); }}if($type == I5456) $this->foundVarsList[$variable] =true; $out =I5474; $pvScope =I5530; if(isset($passedVars[$variable])){ $pvScope =I5456; $out =$passedVars[$variable]; }elseif(isset($this->globalVars[$variable])){ $pvScope ="global"; $out =$this->globalVars[$variable]; $this->usedGlobalVarsList[$variable] =true; $this->_processGlobalVarsOnce($variable); }else if($variable != "__SET_NAME__" && $variable != "__PRINT_VARS__" && $variable != '__P__' && $variable != I5531){ if($type == I5456 && $this->_isDebug("tmpvar_notfound")){ $this->_outDebug("Template variable \"".$variable."\" from template \"".$file."\" not found in passed array"); }elseif($type == I5479 && $this->_isDebug(I5532)){ $this->_outDebug("Language variable \"".$variable."\" from template \"".$file."\" not found in passed array"); }$out =I5474; }if($variable == "__SET_NAME__"){ $out =$this->_setName; }if($this->_isDebugTemplate && $type == I5456){ if($variable == I5533 || $variable == '__P__' || $variable == I5531){ $out =$this->_printVarsStatsForN($passedVars, $variable == I5531, $this->_printVarsCounter); $this->_printVarsCounter ++; }else if($variable == "__PRINT_SETS__" || $variable == "__PRINT_SETS_PRE__"){ $out =$this->_printSets($variable == "__PRINT_SETS_PRE__"); }else{ $this->_printVars[I5534][$pvScope][] =Array(I5480 => $variable, "value" => $out, "if" => 0, "belong" => -1); }}return $out; }function &getAvailableVars(){ return $this->_pr_passedVars; }function setVariable($name, $value =I5460){ $this->_pr_passedVars[$name] =$value; }function _printVarsStatsForN($notUsedVars, $isPreRequired, $statementCounter =0){ $out =I5474; $notUsedGlobals =$this->globalVars; $NL =$isPreRequired ?"\n" :I5535; $tagS =$isPreRequired ?"<PRE>" :I5474; $tagE =$isPreRequired ?"</PRE>" :I5474; $out .= $NL; $oneAtLeast =false; if(is_array($this->_printVars[I5534][I5530])) foreach($this->_printVars[I5534][I5530] as $key => $value){ if($value["belong"] == -1 || $value["belong"] <= $statementCounter){ $out .= "<b>USED UNDEFINED</b>".($value["if"] == "1" ?" [if]" :I5474).": ".$value[I5480].$NL; $oneAtLeast =true; }}if($oneAtLeast) $out .= $NL; $oneAtLeast =false; if(isset($this->_printVars[I5536]['global']) && is_array($this->_printVars[I5536]['global'])){ foreach($this->_printVars[I5534]["global"] as $key => $value){ if($value["belong"] == -1 || $value[I5537] <= $statementCounter){ unset($notUsedGlobals[$value[I5480]]); $out .= "<b>USED GLOBAL</b>".($value["if"] == "1" ?" [if]" :I5474).I5538.$value[I5480]." = ".$tagS.$value["value"].$tagE.$NL; $oneAtLeast =true; }}}if($oneAtLeast) $out .= $NL; $oneAtLeast =false; if(isset($this->_printVars[I5536]['template']) && is_array($this->_printVars[I5536]['template'])){ foreach($this->_printVars[I5534][I5456] as $key => $value){ if($value[I5537] == -1 || $value[I5537] <= $statementCounter){ unset($notUsedVars[$value[I5480]]); $out .= "<b>USED IN TEMPLATE</b> [".$this->_tmpName." : ".$this->_setName."]".($value["if"] == "1" ?I5539 :I5474).I5538.$value[I5480]." = ".$tagS.$value["value"].$tagE.$NL; $oneAtLeast =true; }}}if($oneAtLeast) $out .= $NL; if(is_array($notUsedGlobals)) foreach($notUsedGlobals as $key => $value){ $out .= "<b>NOT USED GLOBAL</b>: ".$key." = ".$tagS.$value.$tagE.$NL; $oneAtLeast =true; }if($oneAtLeast) $out .= $NL; if(is_array($notUsedVars)) foreach($notUsedVars as $key => $value){ $out .= "<b>NOT USED IN TEMPLATE</b> [".$this->_tmpName." : ".$this->_setName."]: ".$key." = ".$tagS.$value.$tagE.$NL; $oneAtLeast =true; }return $out; }function _rememberForPrintVar($variable){ if(mb_strpos($variable[1], "__PRINT_VARS_") !== false) $this->_printVarsCounter++; if(mb_strpos($variable[1], I5540) !== false) $this->_printVars["ifs"][] =$this->_printVarsCounter; return I5474; }function _printSets($isPreRequired){ $out =I5474; $NL =$isPreRequired ?"\n" :I5535; $tagS =$isPreRequired ?"<PRE>" :I5474; $tagE =$isPreRequired ?"</PRE>" :I5474; $out .= $tagS; $setList =Array(); if(is_array($this->html[$this->_tmpName][I5490])) foreach($this->html[$this->_tmpName][I5490] as $key => $value) if(mb_strpos($key, I5541) !== 0) $setList[$key] =1; $out .= $NL; $oneAtLeast =false; if(is_array($this->html[$this->_tmpName]["counter"])) foreach($this->html[$this->_tmpName]["counter"] as $key => $value){ if(intval($value) >0){ unset($setList[$key]); $out .= "<b>USED SET</b> \"".$this->_tmpName.":".$key.I5542.intval($value)." time(s)".$NL; $oneAtLeast =true; }}if($oneAtLeast) $out .= $NL; if(is_array($setList)) foreach($setList as $key => $value) $out .= "<b>NOT USED SET</b> \"".$this->_tmpName.":".$key.I5494.$NL; $out .= $tagE; return $out; }function _includePHPFiles(&$cContent, $htmlID, $aVars, $doProcessPHP =true){ $content =$cContent; if(mb_strlen($htmlID) >0){ foreach($this->html as $key => $value) if($value["id"] == $htmlID){ $fileName =$value[I5543]; $blockName =$key; break; }while(preg_match(($doProcessPHP ?$this->regExp[I5451] :$this->regExp["include_html"]), $content, $res)){ $allstring =$res[1].$res[2].$res[3].$res[4]; $str =I5474; $include_file =trim($res[2]); $orgFilePath =$include_file; if(@is_file($include_file)){ $isFileAllowed =true; if(!empty($this->rootPath) && (($pathPos =mb_strpos($include_file, $this->rootPath)) === false || $pathPos != 0)){ if($this->_isDebug("disallowed_files")) $this->_outDebug("Unable to open file because of incorrect path: \"".$include_file.I5494); $isFileAllowed =false; }if($isFileAllowed){ if($doProcessPHP) $str =$this->runPHP($include_file); else{ $include_file =trim($include_file); $str =$this->_readFromFile($include_file); }$str =$this->_getLanguageFile($str, $fileName, $htmlID); while(preg_match($this->regExp["include_template"],$str,$res1)){ $str =str_replace($res1[0], I5474, $str); if($this->_isDebug("wrong_template_includes")) $this->_outDebug("Illegal use include variable template file \"".$res1[2]."\" in \"".$include_file.I5494); }}}else if($this->_isDebug("nopened_files")) $this->_outDebug("Unable to include php file \"".$orgFilePath.I5544.$fileName.I5494); $str =preg_replace($this->regExp[I5498], I5474, $str); $content =str_replace($allstring, $str, $content); }while(preg_match($this->regExp["set_statement"],$content,$res)){ $aSets =explode(";", $res[3]); foreach($aSets as $set) {$this->html[$blockName][I5490][trim($set)] =$res[7]; if(mb_strtoupper($res[2]) == "GS"){ $this->addGlobalVars(Array(trim($set) => $res[7])); $this->html[$blockName][I5490]["sets:global"][trim($set)] =1; }else if(mb_strtoupper($res[2]) == I5545) $this->html[$blockName][I5490]["sets:global"][trim($set)] =1; }$content =str_replace($res[0], I5474, $content); }}return $content; }private function _applyTemplateFilters($templateName, $content){ if(is_array($this->html[$templateName]['content']['sets:filters']) && isset($this->html[$templateName]['content'][I5546][$this->_setName])){ foreach($this->html[$templateName]['content'][I5546][$this->_setName] as $filter){ if($filter == I5450){ $content =$this->_applyTemplateFilterToJSString($content); }}}return $content; }private function _applyTemplateFilterToJSString($content){ $content =str_replace( array('\\', "'", I5526), array('\\\\', I5547, '\\"'), $content );$content =preg_replace('/(\r?\n)/s', '\\\\' .'$1', $content); return $content; }function _replaceTemplate($str, &$vars, $html_id, $file =I5474, $bReplaceMode =I5472){ $aVarsBackup =$this->aCallbackTmp; $this->_printVars =Array(); $this->_printVarsCounter =0; $this->_ifCounter =0; $this->_isDebugTemplate =isset($this->html[$html_id][I5490][I5548]["+DEBUG"]) || $this->_isDebug("print_info"); if($this->_isDebugTemplate){ if(!isset($this->html[$html_id]["counter"][$this->_setName])){ $this->html[$html_id]["counter"][$this->_setName] =0; }$this->html[$html_id][I5549][$this->_setName]++; }$passedVariables =$vars; if(!@is_array($passedVariables)) $passedVariables =Array(); $passedVariables['__SET_NAME__'] =$this->_setName; $this->_prepareGetVar(1, $passedVariables, $file); if($bReplaceMode == I5472 || $bReplaceMode == 'variables'){ $this->aCallbackTmp['htmlId'] =$html_id; if($this->phpIncludeAllowed && mb_strpos($str, "##include_php") !== false){ $str =$this->_includePHPFiles($str, $html_id, $vars); }if(mb_strpos($str, I5550) !== false){ $str =$this->_includePHPFiles($str, $html_id, $vars, false); }if(mb_strpos($str, $this->regExpRequiredStr['template']) !== false) {$this->aCallbackTmp['passedVariables'] =&$passedVariables; if(!isset($this->html[$html_id][I5490]['body:rules']['-SETVAR'])){ $this->aCallbackTmp[I5551] =FALSE; $str =preg_replace_callback( $this->regExp["set_variable"], array($this, '_cbSetVariable'), $str );unset($this->aCallbackTmp[I5551]); }if(!isset($this->html[$html_id][I5490]['body:rules']['-IMPORTVAR'])){ $this->aCallbackTmp[I5551] =TRUE; $str =preg_replace_callback( $this->regExp[I5552], array($this, '_cbSetVariable'), $str );unset($this->aCallbackTmp[I5551]); }if(!isset($this->html[$html_id][I5490][I5548]["-IF"])){ if($this->_isDebugTemplate){ preg_replace_callback( $this->regExp["replace_template"], array($this, '_rememberForPrintVar'), $str );}$passedIfVariables =array_merge($this->globalVars, $passedVariables); $this->aCallbackTmp[I5553] =&$passedIfVariables; $str =preg_replace_callback( $this->regExp["if_statement"], array($this, '_replaceIfBlock'), $str );}unset($this->aCallbackTmp['passedVariables'], $this->aCallbackTmp[I5553]); $this->_printVarsCounter =0; $this->_prepareGetVar(1, $passedVariables, $file); $str =preg_replace_callback( $this->regExp["replace_template"], array($this, I5554), $str );}unset($this->aCallbackTmp['htmlId']); }if($bReplaceMode == I5472 || $bReplaceMode == 'language'){ $str =$this->_replaceLanguage($str, $html_id, $file); }$this->_cleanGetVar(); if(isset($this->html[$html_id][I5490]["sets:global"][$this->_setName]) && $this->html[$html_id][I5490]["sets:global"][$this->_setName] == 1){ $this->addGlobalVars(Array($this->_setName => $str)); }$str =$this->_applyTemplateFilters($html_id, $str); $this->aCallbackTmp =$aVarsBackup; return $str; }protected function _cbSetVariable(array $aMatches){ return $this->_setVar( $aMatches[2], $aMatches[4], $aMatches[3], I5555 == $aMatches[1], $this->aCallbackTmp['passedVariables'], $this->aCallbackTmp[I5551] );}function _getLanguageFile($str, $file, $blockName =null){ $this->_rxCallbackData =array( I5543 => $file, "block" => $blockName );return preg_replace_callback( $this->regExp["include_language"], array($this, "_getLanguageFileCB"), $str );}function _getLanguageFileCB($matches){ $langFile =trim($matches[2]); if($this->isValidFile($langFile)){ $this->languagePaths[is_null($this->_rxCallbackData[I5556]) ?$this->blockName :$this->_rxCallbackData[I5556]][] =$langFile; $this->_cacheReadDBFiles["notProcessedLangs"][] =$langFile; }else if($this->_isDebug(I5497)){ $this->_outDebug("Unable to find language file \"".$langFile."\" for \"".$this->_rxCallbackData[I5543].I5494); }return I5474; }function _readTemplate(&$aSetsData, $firstParam, $includeFile, $isFirstParamText =false, $returnParsedIfPossible =false){ if($isFirstParamText){ $content =$returnParsedIfPossible ?array($firstParam, false) :$firstParam; }else $content =$this->_readFromFile($includeFile, $returnParsedIfPossible); if($returnParsedIfPossible){ return array($content[0], $content[1]); }else{ return $content; }}function saveProcessedTpls($file, $setStruct, $globTpls, $ifConditions){ if($this->allowCacheProcessedFiles && $this->_isReadFileFromDB($file) && $this->isValidFile($file)){ $procData =array( "sets" => $setStruct, I5557 => isset($this->languagePaths[$this->blockName]) ?$this->languagePaths[$this->blockName] :array(), "globals" => $globTpls, "if_conditions" => $ifConditions );$sql =I5558.mysql_real_escape_string(serialize($procData), $this->db->_dbLink)."', content_type=1 where concat(path,name)='".$file."' ".$this->getSqlFilter(); $this->db->query($sql); }}function restoreProcessedTpls($file, $content){ if(is_array($content)){ if(isset($content[I5557])){ $this->languagePaths[$this->blockName] =$content[I5557]; if(is_array($content[I5557])){ foreach($content[I5557] as $null => $path){ $this->_cacheReadDBFiles[I5559][] =$path; }}}if(isset($content["globals"]) && is_array($content["globals"])){ foreach($content["globals"] as $key => $value){ $this->addGlobalVars(Array($key => $value)); }}if(isset($content["if_conditions"]) && is_array($content[I5560])){ foreach($content[I5560] as $key => $value) $this->_ifStatementConditions[$key] =$value; }return $content["sets"]; }else{ return $content; }}function getSetParameters($setStr){ $aResult =array( 'name' => trim($setStr), 'parameters' => array() );if(preg_match('/(.*?)\((.*)\)/', $setStr, $aSetParts)){ $aResult[I5561] =trim($aSetParts[1]); $setParamStr =','.$aSetParts[2]; if(preg_match_all('/, *([a-z0-9_]+) *?\=(?: *?(\'|")(.*?)\2|([^,]*))/si', $setParamStr, $aParamParts) >0){ $iFoundCount =sizeof($aParamParts[0]); for($i =0; $i <$iFoundCount; $i++){ if(empty($aParamParts[2][$i])){ $aResult['parameters'][$aParamParts[1][$i]] =trim($aParamParts[4][$i]); }else{ $aResult['parameters'][$aParamParts[1][$i]] =trim($aParamParts[3][$i]); }}}}return $aResult; }function _includeMultiTemplate($str, $isSuperBody =false, $file =I5474){ $variable =Array(); list($str, $isParsed) =$this->_readTemplate($variable, $str, $file, empty($file), true); if($isParsed){ return $this->restoreProcessedTpls($file, $str); }if(preg_match($this->regExp[I5455],$str, $res)){ $variable[I5562] =$res[1]; $variable['body:rules'] =array_flip(explode('|', $res[3])); }else {$variable[I5562] =1; $variable['body:rules'] =Array(); }$str =preg_replace($this->regExp[I5498], I5474, $str); for($iLevel =0; $iLevel <$this->tplIncludeMaxLevel; $iLevel++){ $matches =array(); preg_match_all($this->regExp["include_template"], $str, $matches); if(($szInc =sizeof($matches[0])) >1){ for($i =0; $i <sizeof($matches[0]); $i++){ $this->_cacheReadDBFiles[I5499][] =$matches[2][$i]; }$this->_prepareDBFiles(); }for($i =0; $i <sizeof($matches[0]); $i++){ $content =I5474; $include_file =trim($matches[2][$i]); if($this->isValidFile($include_file)){ $content =$this->_readTemplate($variable, $include_file, $include_file); $content =preg_replace($this->regExp[I5498], I5474, $content); if($iLevel == $this->tplIncludeMaxLevel -1){ $orgContentLen =mb_strlen($content); $content =preg_replace($this->regExp[I5563], I5474, $content); if($orgContentLen != mb_strlen($content) && $this->_isDebug("wrong_template_includes")){ $this->_outDebug("Illegal use of includes in \"".$include_file.I5494); }}}else if($this->_isDebug("nopened_files")){ $this->_outDebug("Unable to include template file \"".$include_file.I5544.$file.I5494); }$str =str_replace($matches[0][$i], $content, $str); }}$str =$this->_getLanguageFile($str, $file); $prevIfConditions =$this->_ifStatementConditions; $variable["body:superbody is applied"] =false; $variable["sets:filters"] =array(); $variable["sets:parameters"] =array(); $variable["sets:priorities"] =array(); $definedGlobalTemplates =array(); while(preg_match($this->regExp["set_statement"],$str,$res)){ $str =str_replace($res[0], I5474, $str); $aFilters =array(); if(!empty($res[5])){ $aTmp =explode(I5564, $res[5]); foreach($aTmp as $setFilter){ if(in_array($setFilter, $this->aAllowedSetFilters)){ $aFilters[] =$setFilter; }}}$aSets =explode(I5564, $res[3]); foreach($aSets as $set) {if(empty($set)){ continue; }$parsedSetName =$this->getSetParameters($set); $set =$parsedSetName[I5561]; $setParameters =&$parsedSetName['parameters']; if(sizeof($setParameters) >0){ $parameterIndex =isset($variable['sets:parameters'][$set]) ?sizeof($variable['sets:parameters'][$set]) :0; if($parameterIndex == 0){ $variable['sets:parameters'][$set] =array(); }else{ foreach($variable[I5565][$set] as $index => $params){ if(!count(array_diff_assoc($params, $setParameters)) && !count(array_diff_assoc($setParameters, $params))){ $parameterIndex =$index; break; }}}$setPriority =0; if(isset($setParameters['priority'])){ $setPriority =intval($setParameters['priority']); unset($setParameters['priority']); }$variable["sets:priorities"][$set][$parameterIndex] =$parameterIndex -$setPriority *1000; $variable[I5565][$set][$parameterIndex] =$setParameters; $set .= I5566.$parameterIndex; }if(sizeof($aFilters) >0){ $variable["sets:filters"][$set] =$aFilters; }if($set == "main_body"){ $variable["body:superbody is applied"] =true; }$this->_processSetContent($variable, $set, $res[7]); if(mb_strtoupper($res[2]) == "GS"){ $definedGlobalTemplates[$set] =$variable[$set]; $this->addGlobalVars(Array($set => $variable[$set])); $variable[I5567][$set] =1; }else if(mb_strtoupper($res[2]) == I5545){ $variable[I5567][$set] =1; }}}if(!$variable["body:superbody is applied"] && !$isSuperBody){ $set ="main_body"; $this->_processSetContent($variable, $set, $str); }if($this->allowCacheProcessedFiles){ $prevIfConditions =self::diffAssoc($this->_ifStatementConditions, $prevIfConditions); $this->saveProcessedTpls($file, $variable, $definedGlobalTemplates, $prevIfConditions); }foreach($variable["sets:priorities"] as $set => $aData){ asort($aData); $variable["sets:priorities"][$set] =$aData; }return $variable; }function _processSetContent(&$aSetData, $setName, $setContent){ $aSetData[$setName] =$setContent; $this->_formatIfStatements($aSetData[$setName]); }function _formatIfStatements(&$sContent){ $this->_tmpIfStatementProc[I5459] =array(); $this->_tmpIfStatementProc[I5568] =time(); $startCounter =time(); $sContent =preg_replace_callback( $this->regExp['if_elements'], array($this, '_formatIfStatementsCB'), $sContent );}function _formatIfStatementsCB(array $aMatches){ @list (,$sType1, $sCondition, $sType2) =$aMatches; $this->_tmpIfStatementProc["newLastCounter"]++; $sType1 =mb_strtolower($sType1); $sType2 =mb_strtolower($sType2); $bIf =$sType1 == "if"; $bElseIf =$sType1 == I5569; $bElse =$sType2 == "else"; $bEnd =$sType2 == "endif"; $sReturn =I5474; if($bIf){ $sCondition =$this->_replaceVarsInStr($sCondition, "_vars"); $this->_ifStatementConditions[$this->_tmpIfStatementProc["newLastCounter"]] =array($sCondition, $this->_checkEvalPolicy($sCondition)); $this->_tmpIfStatementProc[I5459][] =$this->_tmpIfStatementProc[I5570]; $sReturn ="##if(".$this->_tmpIfStatementProc[I5570].")##"; }else if($bElseIf){ $idx =sizeof($this->_tmpIfStatementProc[I5459]); if($idx >0){ $idx =$this->_tmpIfStatementProc[I5459][$idx-1]; $sCondition =$this->_replaceVarsInStr($sCondition, "_vars"); $this->_ifStatementConditions[$this->_tmpIfStatementProc[I5570]] =array($sCondition, $this->_checkEvalPolicy($sCondition)); $sReturn ="##elseif(".$idx.I5571.$this->_tmpIfStatementProc[I5570].")##"; }}else if($bElse){ $idx =sizeof($this->_tmpIfStatementProc[I5459]); if($idx >0){ $idx =$this->_tmpIfStatementProc[I5459][$idx-1]; $sReturn ="##else(".$idx.")##"; }}else if($bEnd){ $idx =array_pop($this->_tmpIfStatementProc[I5459]); if($idx !== NULL) $sReturn ="##endif(".$idx.I5572; }return $sReturn; }public function setLocationReadMode($location, $mode =I5462){ $this->aReadLocalesMode[trim($location, ' /')] =$mode; }protected function getReadMode($path){ }function dropBlock($name){ unset($this->languagePaths[$name]); unset($this->html[$name]); }function addBlock($name, $filename, $override =TRUE){ if(isset($this->html[$name]) && !$override){ return; }$this->dropBlock($name); $this->blockName =$name; $this->html[$name]["id"] =$name; $this->html[$name][I5543] =$filename; $this->html[$name][I5490] =$this->_includeMultiTemplate(I5474, false, $filename); }function mergeBlock($name, $filename, $isDirectMerge =true){ $bExists =isset($this->html[$name]); $this->blockName =$name; $this->html[$name]["id"] =$name; $this->html[$name][I5543] =$filename; if($bExists) {$fileContent =$this->_includeMultiTemplate(I5474, $this->html[$name][I5490]["body:superbody is applied"], $filename); if($isDirectMerge) {foreach($fileContent as $k => $v){ $this->html[$name][I5573][$k] =isset($this->html[$name][I5573][$k]) && is_array($this->html[$name][I5573][$k]) ?array_merge($this->html[$name][I5573][$k], $v) :$v; }}else {unset($this->html[$name][I5502]); $this->html[$name][I5490] += $fileContent; if($fileContent["body:superbody is applied"]) {$this->html[$name][I5490]["body:superbody is applied"] =true; $this->html[$name][I5490]["main_body"] =$fileContent["main_body"]; }}}else {$this->html[$name][I5490] =$this->_includeMultiTemplate(I5474, false, $filename); }}function copyBlock($source, $destination){ $this->dropBlock($destination); if(isset($this->html[$source])) {$this->html[$destination] =$this->html[$source]; }if(isset($this->languagePaths[$source])) {$this->languagePaths[$destination] =$this->languagePaths[$source]; }}function addText($name, $text){ $this->dropBlock($name); $this->blockName =$name; $this->html[$name][I5574] =$name; $this->html[$name][I5543] ="TEXT"; $this->html[$name][I5490] =$this->_includeMultiTemplate($text); }function mergeText($name, $text){ $bExists =isset($this->html[$name]); $this->blockName =$name; $this->html[$name][I5574] =$name; $this->html[$name][I5543] ="TEXT"; if($bExists) $this->html[$name][I5490] =array_merge($this->html[$name][I5490], $this->_includeMultiTemplate($text, $this->html[$name][I5490]["body:superbody is applied"])); else $this->html[$name][I5490] =$this->_includeMultiTemplate($text); }function _getParsedContent($name, $addon, $aVars, $bReplaceMode =I5472){ $this->_tmpName =$name; $this->_setName =$addon; return isset($this->html[$name][I5573][$addon]) ?$this->_replaceTemplate($this->html[$name][I5573][$addon], $aVars, $name, $this->html[$name]['file'], $bReplaceMode) :I5460; }function get($name, &$aVars, $value =I5474, $cLang =false, $bReplaceMode =I5472){ if(!is_array($aVars)){ $arr[$aVars] =$value; $aVars =$arr; }$out =I5474; $addon =I5575; $pos =0; if(($pos =mb_strpos($name, ":")) !== false){ $addon =mb_substr($name, $pos+1); $name =mb_substr($name, 0, $pos); }if(is_array($cLang)) {$this->html[$name][I5502][$this->lang] =$cLang; }if(isset($this->html[$name])){ if(isset($this->html[$name][I5573][I5565][$addon]) && sizeof($this->html[$name][I5573][I5565][$addon]) >0){ $aPrameters =&$this->html[$name][I5573][I5565][$addon]; foreach($this->html[$name][I5573]["sets:priorities"][$addon] as $parametersIndex => $null){ $isAllFound =true; foreach($aPrameters[$parametersIndex] as $varName => $varValue){ if(!isset($aVars[$varName]) || $aVars[$varName] != $varValue){ $isAllFound =false; break; }}if($isAllFound){ $addon .= I5566.$parametersIndex; break; }}}$out =$this->_getParsedContent($name, $addon, $aVars, $bReplaceMode); }return $out; }function issetSet($name) {$addon =I5575; if(($pos =mb_strpos($name, ":")) !== false){ $addon =mb_substr($name, $pos+1); $name =mb_substr($name, 0, $pos); }return isset($this->html[$name][I5490][$addon]); }function getAbs($name, $aVars =Array(), $value =I5474, $cLang =false){ return $this->get($name, $aVars, $value, $cLang); }function getDefPostf($name, $postf, &$aVars, $value =I5474, $cLang =false){ $pos =0; $addon =I5575; $postfAddon =I5474; if(($pos =mb_strpos($name, ":")) !== false){ $addon =mb_substr($name, $pos+1); $postfAddon =$addon; $name =mb_substr($name, 0, $pos); }if(isset($this->html[$name])){ if(!is_array($postf)){ $postf =array($postf); }$isFound =false; for($i =0; $i <sizeof($postf); $i++){ if(isset($this->html[$name][I5490][$postfAddon.$postf[$i]])){ $addon =$postfAddon.$postf[$i]; break; }}}return $this->get($name.I5566.$addon, $aVars, $value, $cLang); }function getAbsDefPostf($name, $postf, $aVars =Array(), $value =I5474, $cLang =false){ return $this->getDefPostf($name, $postf, $aVars, $value, $cLang); }function parse($filename, $aVars =Array(), $value =I5474, $cLang =false){ if(!is_array($aVars)){ $arr[$aVars] =$value; $aVars =$arr; }$this->addBlock(I5485, $filename); return $this->getAbs(I5485, $aVars, $value, $cLang); }function parseText($text, $aVars =Array(), $value =I5474, $cLang =false){ if(!is_array($aVars)){ $arr[$aVars] =$value; $aVars =$arr; }$this->addText(I5485, $text); return $this->getAbs(I5485, $aVars, $value, $cLang); }function isVarDefined($cBlockName, $cVarName){ $addon =I5575; $pos =0; if(($pos =mb_strpos($cBlockName, I5576)) !== false){ $addon =mb_substr($cBlockName, $pos+1); $cBlockName =mb_substr($cBlockName, 0, $pos); }if(isset($this->html[$cBlockName])){ $template =$this->html[$cBlockName][I5490][$addon]; $template =preg_replace($this->regExp[I5498], I5474, $template); while(preg_match($this->regExp["is_variable_defined_if_statement"], $template, $matches)){ if(!strcasecmp(trim($matches[2]), $cVarName)) return 2; for($i =5; $i <= 8; $i += 3){ while(preg_match($this->regExp["is_variable_defined_set_variable"], $matches[$i], $subMatches)){ if(!strcasecmp($subMatches[2], $cVarName)) return 3; $matches[$i] =str_replace($subMatches[0], I5474, $matches[$i]); }}for($i =5; $i <= 8; $i += 3){ while(preg_match($this->regExp["is_variable_defined"], $matches[$i], $subMatches)){ if(!strcasecmp($subMatches[1], $cVarName)) return 1; $matches[$i] =str_replace($subMatches[0], I5474, $matches[$i]); }}$template =str_replace($matches[0], I5474, $template); }while(preg_match($this->regExp["is_variable_defined_set_variable"], $template, $matches)){ if(!strcasecmp($matches[2], $cVarName)) return 3; $template =str_replace($matches[0], I5474, $template); }while(preg_match($this->regExp["is_variable_defined"], $template, $matches)){ if(!strcasecmp($matches[1], $cVarName)) return 1; $template =str_replace($matches[0], I5474, $template); }}return 0; }function addGlobalVars($aVars){ if(is_array($aVars)){ foreach($aVars as $key => $value){ $this->globalVars[$key] =$value; }}}function removeGlobalVars(){ $num_args =func_num_args(); $keys =func_get_args(); if($num_args == 0){ $this->globalVars =array(); }else{ if(is_array($keys[0])){ $keys =$keys[0]; $num_args =sizeof($keys); }for($i =0; $i <$num_args; $i++){ unset($this->globalVars[$keys[$i]]); }}if(!@is_array($this->globalVars)){ $this->globalVars =array(); }}function enableGlobalVarsOnce(){ $this->globalVarsOnce =true; }function disableGlobalVarsOnce(){ $this->globalVarsOnce =false; }function useGlobalVarsOnce(){ $numArgs =func_num_args(); $names =func_get_args(); if($numArgs == 1 && is_array($names[0])){ $miscArr =$names[0]; unset($names); $names =$miscArr; $numArgs =count($names); }if($numArgs == 0) {$this->globalVarsOnceList =Array(); }else {for($i =0; $i <$numArgs; $i++) {$this->globalVarsOnceList[$names[$i]] =true; }}}function usedGlobalVarsOnce(){ $out =array_keys($this->usedGlobalVarsOnceList); return $out; }function _processGlobalVarsOnce($cName){ if($this->globalVarsOnce && $this->isGlobalVarDefined($cName) && !empty($this->globalVarsOnceList[$cName]) && empty($this->usedGlobalVarsOnceList[$cName])){ unset($this->globalVars[$cName]); $this->usedGlobalVarsOnceList[$cName] =true; }}function isGlobalVarDefined($cVarName){ if(isset($this->globalVars[$cVarName])) return true; return false; }function getGlobalVar($cVarName){ return $this->globalVars[$cVarName]; }function getGlobalVars(){ return $this->globalVars; }function doImportIfRequired($force =false){ global $MULTI_SITE_ID; if(defined("REQUIRED_UPDATE_NUM")) return; if($force || ($this->readFileFromDB && !$this->forceReadFileFromDisk && !$this->isImportRequiredProcessed)){ $db =new DB_si; $importRequired =true; $vData =array(); if(is_object($GLOBALS["Core"]) && $GLOBALS["Core"]->ReadOption($vData, "gui_template", "templates_imported_".$MULTI_SITE_ID)){ if($vData["value"]){ $importRequired =false; }}if($importRequired){ $sql =I5577.$this->getSqlFilter(); $db->query($sql); if($db->nextRecord()){ $importRequired =empty($db->Record[I5490]); }if(is_object($GLOBALS["Core"])) $GLOBALS["Core"]->WriteOption("gui_template", "templates_imported_".$MULTI_SITE_ID, true); if($importRequired){ $this->importDefaultContent =$force; $this->importTemplatesFromDisk($db, false, true, true); $this->importTemplatesFromDisk($db, true, true, true); $this->_cacheReadDBFiles =array( I5499 => array(), I5559 => array(), I5489 => array() );}}if(!$importRequired && $GLOBALS['forceRebuildTemplates'] >0){ $this->importTemplatesFromDisk($db, false, false, $GLOBALS['forceRebuildTemplates'] == 2); $this->importTemplatesFromDisk($db, true, false, $GLOBALS['forceRebuildTemplates'] == 2); $this->_cacheReadDBFiles =array( I5499 => array(), I5559 => array(), I5489 => array() );}$this->isImportRequiredProcessed =true; }}function importTemplatesFromDisk(&$db, $isLangs, $isDelete =false, $isRewriteModified =false){ clearstatcache(); $res =array( 'updated' => 0, I5578 => 0, 'ignored' => 0, 'skipped' => 0 );$this->rImportTemplatesFromDisk($db, $res, $isLangs, $isDelete, $isRewriteModified, "templates/"); $this->rImportTemplatesFromDisk($db, $res, $isLangs, $isDelete, $isRewriteModified, $GLOBALS["LOCAL_FILES_REL_PATH"].I5579); return $res; }function rImportTemplatesFromDisk(&$db, &$res, $isLangs, $isDelete, $isRewriteModified, $filesPath){ $aTypesRes =Array("ignored", "added", "updated", "skipped"); if(is_dir($GLOBALS[I5580].$filesPath)){ if($handle =opendir($GLOBALS[I5580].$filesPath)){ while(($file =readdir($handle)) !== false){ if($file == "." || $file == ".."){ continue; }if(is_dir($GLOBALS[I5580].$filesPath.$file)){ $this->rImportTemplatesFromDisk($db, $res, $isLangs, $isDelete, $isRewriteModified, $filesPath.$file.I5466); }else if(preg_match('/\.'.($isLangs ?'lng' :I5581).'$/si', $file, $matches)){ if(is_file($GLOBALS[I5580].$filesPath.$file)){ $fileContent =file_get_contents($GLOBALS[I5580].$filesPath.$file); if(mb_strlen($fileContent) >0){ $fileTimeSt =filemtime($GLOBALS[I5580].$filesPath.$file); $typeRes =$this->_putFileContentToDb( $db, $filesPath, $file, $fileTimeSt, $fileContent, $isLangs, $isRewriteModified, TRUE, FALSE, $this->importDefaultContent );$res[$aTypesRes[$typeRes]]++; if(($typeRes == 1 || $typeRes == 2) && $isDelete) unlink($GLOBALS[I5580].$filesPath.$file); }}}}closedir($handle); }}return $res; }function _putFileContentToDb( &$db, $path, $file, $fileTimeSt, &$fileContent, $isLangs, $isRewriteModified =false, $checkTimeStamp =TRUE, $setAllowedForce =FALSE, $asDefault =FALSE ){$res =0; $sql =I5582.($isLangs ?"_langs" :I5474).I5492.mysql_real_escape_string($path, $db->_dbLink)."' and name='".mysql_real_escape_string($file, $db->_dbLink)."'".$this->getSqlFilter(TRUE); $db->query($sql); $newTpl =true; if($db->nextRecord()){ $newTpl =false; if($checkTimeStamp && $db->Record[I5583] == $fileTimeSt){ return 3; }else if(!$isRewriteModified && $db->Record[I5583] >$fileTimeSt){ return 0; }}$fileTime =date('Y-m-d H:i:s', $fileTimeSt); $aSysInfo =$this->_parseAndRemoveSysInfoStr($fileContent); $side =mb_strpos($path, '_local/_admin/templates/') !== 0 ?'front' :'shared'; if(!$newTpl){ $res =2; $addSql =empty($aSysInfo[I5584]) ?I5460 :$this->addSysInfoToSql($aSysInfo); $allowed =$setAllowedForce ?"`allowed` = 1," :I5460; $sql =I5585 .($isLangs ?'_langs' :I5460) ."` " ."SET " .$allowed ."`side` = '{$side}', " .I5586 .mysql_real_escape_string($fileContent, $db->_dbLink) ."', " .($asDefault ?"`content_default` = '" .mysql_real_escape_string($fileContent, $db->_dbLink) ."', " :I5460) ."`modified` = '" .$fileTime .I5587 ."`synchronized` = '" .$fileTime ."'" .$addSql .", " ."`content_type` = 0, `parsed`='' " .I5588 ."`path` = '" .mysql_real_escape_string($path, $db->_dbLink) ."' AND " ."`name` = '" .mysql_real_escape_string($file, $db->_dbLink) ."' " .$this->getSqlFilter(TRUE); }else{ $res =1; $addSql =$this->addSysInfoToSql($aSysInfo); $sql =I5589 .($isLangs ?I5590 :I5460) ."` " ."SET " ."`side` = '" .$side .I5587 ."`path` = '" .mysql_real_escape_string($path, $db->_dbLink) .I5587 .I5591 .mysql_real_escape_string($file, $db->_dbLink) .I5587 .I5586 .mysql_real_escape_string($fileContent, $db->_dbLink) .I5587 .($asDefault ?"`content_default` = '" .mysql_real_escape_string($fileContent, $db->_dbLink) .I5587 :I5460) ."`modified` = '" .$fileTime .I5587 ."`created` = '" .$fileTime .I5587 ."`synchronized` = '" .$fileTime .I5587 .I5592 .(empty($GLOBALS['MULTI_SITE_ID']) ?0 :(int)$GLOBALS['MULTI_SITE_ID']) .", " ."`content_type` = 0, " .I5593 .$addSql; }$db->query($sql); return $res; }function _getSysInfoStr($aParams) {$res ="##--system info:"; foreach($aParams as $name => $value) {$res .= I5467.$name.I5481.$value.I5494; }$res .= "--##"; return $res; }function _parseAndRemoveSysInfoStr(&$fileContent) {$str =mb_substr($fileContent, 0, mb_strpos($fileContent, "\n")); $aParams =Array(); $str =rtrim($str, " \r"); $bPos =mb_strpos($str, I5594); if($bPos !== false) {$ePos =mb_strpos($str, "--##"); $len =mb_strlen($str); if($ePos == $len -4) {$str =mb_substr($str, 17, $len -21); $aTokens =explode(I5542, $str); foreach($aTokens as $token) {$aTmp =explode(I5475, $token); $aTmp[0] =trim($aTmp[0]); $aTmp[1] =trim($aTmp[1], " \""); if($aTmp[0] != I5474) {$aParams[$aTmp[0]] =$aTmp[1]; }}$fileContent =mb_substr($fileContent, 0, $bPos) .mb_substr($fileContent, $bPos +$len); }}return $aParams; }function addSysInfoToSql(&$aSysInfo) {$res =I5474; $res .= (empty($aSysInfo[I5595]) ?I5474 :I5596.addslashes($aSysInfo[I5595])."'"); $res .= (empty($aSysInfo[I5597]) ?I5474 :I5598.addslashes($aSysInfo[I5597])."'"); $res .= (isset($aSysInfo[I5599]) ?", is_sys='".intval($aSysInfo[I5599])."'" :I5474); return $res; }function exportTemplatesToDisk(&$db, $isLangs, $isRewriteModified =false){ $syncTimes =array(); clearstatcache(); $res =array( 'updated' => 0, I5578 => 0, 'ignored' => 0, I5600 => 0 );$sql =I5601.($isLangs ?"_langs" :I5474). " WHERE `side` IN ('front', 'shared') ".$this->getSqlFilter(); $db->query($sql); while($db->next_record()){ if(!(int)$db->Record["allowed"]){ continue; }$file =$GLOBALS[I5580].$db->Record["path"].$db->Record[I5480]; $sysInfoStr =$this->_getSysInfoStr(array (I5595 => $db->Record[I5595], I5597 => $db->Record[I5597], I5602 => $db->Record['is_sys'])); for($i =0; $i <2; $i++){ if(!is_dir($GLOBALS[I5580].$db->Record["path"])){ $dirs =explode('/', $db->Record["path"]); $curPath =mb_substr($GLOBALS[I5580], 0, -1); for($ii =0; $ii <sizeof($dirs); $ii++){ if(!empty($dirs[$ii]) && $dirs[$ii] != I5603 && $dirs[$ii] != '.'){ $curPath .= '/'.$dirs[$ii]; if(!is_dir($curPath)){ if(!mkdir($curPath, 0777, true)){ continue 3; }else{ chmod($curPath, 0777); }}}}}$fExists =file_exists($file); if($fExists){ $fileTime =filemtime($file); if($db->Record[I5583] == $fileTime){ break; }else if(!$isRewriteModified && $db->Record[I5583] <= $fileTime){ $res['ignored']++; break; }}if($hFile =@fopen($file, "w")){ fwrite($hFile, $sysInfoStr.I5604.$db->Record[I5490]); fclose($hFile); $syncTimes[time()][] =$db->Record[I5574]; $res[$fExists ?'updated' :I5578]++; @chmod($file, 0666); break; }else{ @unlink($file); if($i == 1){ $res[I5600]++; }}}}foreach($syncTimes as $time => $ids){ if(sizeof($ids) >0){ $sql =I5605.($isLangs ?"_langs" :I5474)." set synchronized='".date("Y-m-d H:i:s").I5606.implode("','", $ids)."')".$this->getSqlFilter(); $db->query($sql); }}return $res; }function getTemplatesList(&$db, $path, $filesMask){ $res =array(); if($this->forceReadFileFromDisk){ $templatesPath =$GLOBALS['ROOT_PATH'].$path; $filesMask ='/'.str_replace(I5607, '.*?', quotemeta($filesMask)).'/i'; if(is_dir($templatesPath)){ $dir =dir($templatesPath); while(($fileName =$dir->read()) !== false){ if($fileName != '.' && $fileName != I5603 && preg_match($filesMask, $fileName)){ $res[] =array( "path" => $path, I5480 => $fileName );}}}}else{ $filesMask =str_replace(I5608, '%', mysql_real_escape_string($filesMask, $db->_dbLink)); $sql =I5609.mysql_real_escape_string($path, $db->_dbLink)."' AND name like '".$filesMask."' ".$this->getSqlFilter(); $db->query($sql); while($db->nextRecord()){ $res[] =array( I5574 => $db->Record[I5574], "path" => $db->Record[I5610], I5480 => $db->Record[I5480], I5597 => $db->Record[I5597] );}}return $res; }public function dropFileCache($file){ $admPrefix =$this->getAdmPrefix($file); unset($this->cacheFiles[$admPrefix .$file]); }protected function evalPHP($code, &$_vars, &$retVal, &$value){ global $sys; if( (empty($sys['err']['extdeb']) || $sys['err']['extdeb'] <2) || (isset($sys[I5611]['level']) && ($sys[I5611]['level'] && (E_NOTICE |E_USER_NOTICE))) ){$res =@eval($code); }else{ $res =eval($code); }return $res; }private function getAdmPrefix($file){ $res =I5460; if($this->readAdmFromDB && $this->side == 'admin' && (mb_strpos($file, I5612) === 0 || mb_strpos($file, I5613) === 0)){ $res =$this->currentSkin .'|'; }return $res; }public function handleModifierStriptags($name, array $aEvent, $handlerModId, $srcModId){ $aEvent[I5528] =AMI_Lib_String::stripTags($aEvent[I5528]); return $aEvent; }public function handleModifierJparse($name, array $aEvent, $handlerModId, $srcModId){ $aEvent[I5528] =AMI_Lib_String::jParse($aEvent[I5528]); return $aEvent; }public function handleModifierHtmlentities($name, array $aEvent, $handlerModId, $srcModId){ $aEvent[I5528] =AMI_Lib_String::htmlChars($aEvent[I5528]); return $aEvent; }public function handleModifierTruncate($name, array $aEvent, $handlerModId, $srcModId){ if(isset($aEvent[I5614])){ array_unshift($aEvent[I5614], $aEvent[I5528]); $aEvent[I5528] =call_user_func_array(array('AMI_Lib_String', 'truncate'), $aEvent[I5614]); }return $aEvent; }public static function diffAssoc(array $aFirst, array $aSecond){ $aFirstCopy =$aFirst; $aSecondCopy =$aSecond; $aReplaced =array(); foreach($aFirst as $key => $value){ if(is_array($value)){ $aFirstCopy[$key] =serialize($value); $aReplaced[] =$key; }}foreach($aSecond as $key => $value){ if(is_array($value)){ $aSecondCopy[$key] =serialize($value); }}$aDiff =array_diff_assoc($aFirstCopy, $aSecondCopy); foreach($aReplaced as $key){ if(isset($aDiff[$key])){ $aDiff[$key] =unserialize($aDiff[$key]); }}return $aDiff; }private function _toStr($aChars){ $res =I5460; foreach($aChars as $char){ $res .= chr($char); }return $res; }}