<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       13404 xkqwsrgnwnttzzlslinixiugwpgpqrwyniwlwswsggzqpnmmtrqpxqskiwukkmipmlkwpnir
 */ ?><?php foreach(array(5717=>'osj|q|mNVzjms|URj',5718=>'osj|q|dqNs',5719=>'osj|q|woUNkosR',5720=>'fJHWK|tMIQHut',5721=>'',5722=>"DMAQ",5723=>'rQPQt',5724=>'EuQrB',5725=>'DMAQ|OMnt',5726=>'=',5727=>"wHntQnt+jQnPtO%?") as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} define('HDL_MIN_BUFSIZE', 2048); define('HDL_MAX_HDRSIZE', 8192); define(I5717, 1); define('HDL_E_SOCKOPEN', 2); define('HDL_E_HTTP', 3); define('HDL_E_NOHEADERS', 4); define('HDL_E_FILE', 5); define(I5718, 6); define('HDL_E_CB', 7); define('HDL_E_SIZE', 8); define('HDL_E_FLOCK', 9); define('HDL_E_RECV', 10); define(I5719, 11); define('HDL_E_CHUNKFORMAT', 12); define('HDL_E_POSTDATA', 13); class HttpDownloader {public $I1ILI11; public $opt; public $buffer; public $I1ILlII; public $err; public $ILll1L1; public $I1ILlIl =false; public $contentType; public $I1ILlIL =0; public $I1ILlI1; public $offset; public $I1ILllI; public $timeLimit; public $fd; public $I1ILlll; function HttpDownloader() {$this->I1ILI11 =false; $this->opt =array( 'bufsize' => 100*1024, 'timeout' => 20, I5720 => 20, 'reget' => false, 'size_hint' => false, 'method' => 'get' );$this->buffer =I5721; $this->err =0; $this->I1ILlII =0; $this->I1ILlIl =false; $this->contentType =false; $this->I1ILlI1 =false; $this->offset =0; $this->timeLimit =30; }function TITl1II($err) {$this->err =$err; $this->TITl1l1(); return false; }function error() {return $this->err; }function TITl1Il() {return $this->I1ILlII; }function TITl1I1() {return $this->I1ILlIL; }function TITl1lT(&$obj) {$this->I1ILlI1 =&$obj; }function TITl1lI($opt) {foreach($this->opt as $k=>$v) {if(!isset($opt[$k])) continue; $val =$opt[$k]; if($k=='bufsize' && $val <HDL_MIN_BUFSIZE) $val =HDL_MIN_BUFSIZE; $this->opt[$k] =$val; }}function result() {return $this->buffer; }function TITl1ll() {return $this->I1ILlIl; }function _save(&$I1IlLLl) {if($this->fd) fwrite($this->fd,$I1IlLLl); else $this->buffer .= $I1IlLLl; }function TITl1l1() {@fclose($this->fd); @fclose($this->I1ILI11); }function TITl11T($I1ILllL) {$hp =explode(':',$I1ILllL); if(sizeof($hp)==2) {$host =$hp[0]; $port =$hp[1]; }else {$host =$I1ILllL; $port =80; }$res =Array("host" => $host, "port" => $port); return $res; }function TITl11I($url, &$info) {$info =Array(); $res =false; if($this->TITl11l($url, false, true)) {$info =Array(I5722 => $this->I1ILlIl, "mime_type" => $this->contentType); $res =true; }return $res; }function download($url, $file=false, $I1ILll1=false) {return $this->TITl11l($url, $file, false); }function TITl11l($url, $file, $I1ILll1) {$this->TITl1II(0); $this->buffer =$this->ILll1L1 =I5721; $this->I1ILlIl =false; $this->I1ILllI =false; $u =parse_url($url); $hp =$this->TITl11T($u["host"]); $host =$hp["host"]; $port =$hp["port"]; $this->fd =false; if($file!==false) {if($this->opt[I5723]) {$I1ILlLI ='a'; $this->offset =intval(@filesize($file)); }else {$I1ILlLI ='w'; $this->offset =0; }$this->fd =@fopen($file,$I1ILlLI); if(!$this->fd) return $this->TITl1II(HDL_E_FILE); if(!flock($this->fd,LOCK_EX|LOCK_NB)) return $this->TITl1II(HDL_E_FLOCK); }$this->I1ILI11 =@fsockopen($host,$port,$errno,$errstr,$this->opt['timeout']); if(!$this->I1ILI11) return $this->TITl1II(HDL_E_SOCKOPEN); do {$uri =$u['path']; if(@$u[I5724]!=I5721) $uri .= '?'.$u[I5724]; @set_time_limit($this->timeLimit); if ($this->opt['method'] != 'post') {if(!$this->TIT1TTT($host,$uri)) break; }else {if(!$this->TIT1TTI($host,$uri)) break; }@set_time_limit($this->timeLimit); if(!$this->TIT1TTl() || $I1ILll1) break; $this->I1ILlII =0; if($this->I1ILllI) {do {if(!$this->TIT1TT1($I1IlLLl)) return false; $this->_save($I1IlLLl); $this->I1ILlII += mb_strlen($I1IlLLl); }while($I1IlLLl!=I5721); $this->TITl1l1(); return true; }$bufsize =$this->opt['bufsize']; $ret =true; $len =0; @set_time_limit($this->timeLimit); while(($I1IlLLl=fread($this->I1ILI11,$bufsize))!=I5721) {@set_time_limit($this->timeLimit); if($I1IlLLl===false) {$this->TITl1II(HDL_E_RECV); break 2; }$this->_save($I1IlLLl); $len += mb_strlen($I1IlLLl); $this->I1ILlII += mb_strlen($I1IlLLl); if($this->I1ILlI1!==false && $len>=$bufsize) {$len =0; $I1ILlIl =$this->I1ILlIl!==false ?$this->I1ILlIl :$this->opt[I5725]; $I1ILlIl =intval($I1ILlIl); if($I1ILlIl>0) {$this->I1ILlIL =round(($this->I1ILlII+$this->offset)/($I1ILlIl+$this->offset)*100); if(!$this->I1ILlI1->httpDownloaderCB($this)) {$this->TITl1II(HDL_E_CB); break 2; }}}}}while(false); $this->TITl1l1(); if(!$I1ILll1 && $this->error()==0 && $this->I1ILlIl!==false && $this->I1ILlII!=$this->I1ILlIl) {$this->TITl1II(HDL_E_SIZE); }return $this->error()==0; }function post($url, &$I1ILlLl) {$this->opt['method'] ='post'; $this->I1ILlll =(array)$I1ILlLl; if (count($this->I1ILlll) == 0) {return $this->TITl1II(HDL_E_POSTDATA); }return $this->download($url, false); }function TITl111($url, $I1ILlLl =array ()){return $this->post($url, $I1ILlLl); }function TIT1TTT($host,$uri) {$req ="GET $uri HTTP/1.1\r\n". "Host: $host\r\n". "Connection: close\r\n"; if($this->offset!=0) $req .= "Range: bytes=$this->offset-\r\n"; $req .= "\r\n"; $res =fwrite($this->I1ILI11,$req); if($res===false || mb_strlen($req)!=$res) return $this->TITl1II(HDL_E_SEND); return true; }function TIT1TTI($host, $uri) {$data =I5721; foreach ($this->I1ILlll as $k => $v) {$data .= urlencode($k) .I5726 .urlencode($v) .'&'; }$data =mb_substr($data, 0, -1); $req ="POST $uri HTTP/1.1\r\n". "Host: $host\r\n". "Connection: close\r\n". "Cache-Control: max-age=0\r\n". "Content-Type: application/x-www-form-urlencoded\r\n". I5727 .mb_strlen($data) ."\r\n\r\n" .$data; $res =fwrite($this->I1ILI11,$req); if($res===false || mb_strlen($req)!=$res) return $this->TITl1II(HDL_E_SEND); return true; }function TIT1TTl() {$ILll1L1 =I5721; do {$I1IlLLl =@fread($this->I1ILI11,1); if (mb_strlen($I1IlLLl)==0) return $this->TITl1II(HDL_E_NOHEADERS); $ILll1L1 .= $I1IlLLl; if(mb_strlen($ILll1L1)>HDL_MAX_HDRSIZE) return $this->TITl1II(HDL_E_NOHEADERS); if(preg_match('/\r?\n\r?\n/',$ILll1L1,$m1,PREG_OFFSET_CAPTURE)) break; }while(true); $this->ILll1L1 =mb_substr($ILll1L1,0,$m1[0][1]); if(!preg_match('/^HTTP\/1\.1\s+2/',$this->ILll1L1)) return $this->TITl1II(HDL_E_HTTP); if(preg_match('/Content-Length:\s+(\d+)/',$this->ILll1L1,$m)) $this->I1ILlIl =intval($m[1]); if(preg_match('/Content-Type:\s+([^\s]+)$/',$this->ILll1L1,$m)) $this->contentType =trim($m[1]); if(preg_match('/Transfer-Encoding:\s+chunked/',$this->ILll1L1,$m)) $this->I1ILllI =true; return true; }function TIT1TT1(&$res) {$ILll1L1 =I5721; do {$I1IlLLl =@fread($this->I1ILI11,1); $I1ILlLL =mb_strlen($I1IlLLl); if($I1ILlLL==0) return $this->TITl1II(HDL_E_CHUNKHDR); if($I1IlLLl=="\n") break; $ILll1L1 .= $I1IlLLl; if(mb_strlen($ILll1L1)>HDL_MAX_HDRSIZE) return $this->TITl1II(HDL_E_CHUNKHDR); }while(true); if(!preg_match('/^[0-9a-f]+/',$ILll1L1,$m)) return $this->TITl1II(HDL_E_CHUNKHDR); $I1ILlL1 =hexdec($m[0]); $res =I5721; while($I1ILlL1>0) {@set_time_limit($this->timeLimit); $I1IlLLl =@fread($this->I1ILI11,$I1ILlL1); $I1ILlLL =mb_strlen($I1IlLLl); if($I1ILlLL==0) return $this->TITl1II(HDL_E_RECV); $res .= $I1IlLLl; $I1ILlL1 -= $I1ILlLL; }$I1IlLLl =@fread($this->I1ILI11,2); if($I1IlLLl!="\r\n") return $this->TITl1II(HDL_E_CHUNKFORMAT); return true; }}?>