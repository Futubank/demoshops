<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       10840 xkqwrzigwqywwqkypqtlngpmzglkrtsumtuyutwuypwniyqmsitxqgxllglrxtsgqmtgpnir
 */ ?><?php foreach(array(5806=>'mgw|qRR|mNVzjmshgT',5807=>'mgw|qRR|cRmTq',5808=>'mgw|qRR|jhwk',5809=>'rQZS|YufJQn',5810=>'1',5811=>'C',5812=>'',5813=>'CY') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} define('IPC_ERR_OK', 0); define('IPC_ERR_ERROR', 1); define(I5806, 2); define('IPC_ERR_TIMEOUT', 3); define('IPC_ERR_INVALPACKET', 4); define('IPC_ERR_INCOMPLPACKET', 5); define('IPC_ERR_READ', 6); define(I5807, 7); define('IPC_ERR_NOTCONNECTED', 8); define('IPC_ERR_PROTO', 9); define('IPC_ERR_SYNC', 10); define('IPC_ERR_BUSY', 11); define(I5808, 12); define('IPC_ERR_CONNTIMEOUT', 13); define('_IPC_DEBUG',false); class IPCDriverBase {public $timeout; public $IL11I1l; public $IL11I1L; public $I1lIILL; public $I1lIIL1; public $I1lII1I; public $I1lII1l; function TIT1IlT($d) {if(_IPC_DEBUG===true) {echo "<pre>\n"; print_r($d); echo "</pre>\n"; }}function TIT1IlI() {static $I1lII1l =false; if($I1lII1l===false) {$I1lII1l =new win32(); if(!$I1lII1l->registerfunction("long Sleep (long dwMillisecods) From kernel32.dll")) die("Cannot register Win32:Sleep"); }return $I1lII1l; }function IPCDriverBase($opt=false) {$this->timeout =10; $this->I1lII1I =0.2; $this->readBufLen =8192; $this->IL11I1l =$this->IL11I1L =false; $this->I1lIILL =0; $this->I1lIIL1 =''; $this->request =false; $this->I1lII1l =false; if(mb_strtoupper(mb_substr(PHP_OS,0,3))=='WIN') $this->I1lII1l =IPCDriverBase::TIT1IlI(); if(is_array($opt)) $this->TITl1lI($opt); }function TITl1lI($opt) {if(!is_array($opt)) return IPC_ERR_INVALIDOPT; foreach($opt as $k=>$v) switch($k) {case 'timeout': $this->timeout =intval($v); break; case I5809: $this->readBufLen =intval($v); break; case 'poll_interval': $this->I1lII1I =doubleval($v); break; default: break; }return IPC_ERR_OK; }function TIT1Ill(&$str) {$this->TIT1IlT("\n+++ _iPacket: +++\n$this->I1lIIL1\n---\n"); $parts =explode("\n",$this->I1lIIL1); if(!is_array($parts)) return IPC_ERR_INVALPACKET; $I1lII1L =explode(':',trim($parts[0])); if(sizeof($I1lII1L)!=3) return IPC_ERR_INVALPACKET; if($I1lII1L[0][0]!=1) return IPC_ERR_INCOMPLPACKET; if(intval($I1lII1L[1])!=$this->I1lIILL) return IPC_ERR_SYNC; array_shift($parts); $body =implode('',$parts); $this->I1lIILL++; $len =mb_strlen($body); if(intval($I1lII1L[2])>$len) {return IPC_ERR_INVALPACKET; }if(intval($I1lII1L[2])<$len) return IPC_ERR_INCOMPLPACKET; $str =$body; return IPC_ERR_OK; }function TIT1Il1($str,$I1lII11=true) {$I1lII11 =$I1lII11 ?I5810 :'0'; $this->I1lIIL1 =$I1lII11.':'.$this->I1lIILL.':'.mb_strlen($str)."\r\n$str"; $this->I1lIILL++; return IPC_ERR_OK; }function TIT1I1T() {if(!rewind($this->IL11I1L)) return IPC_ERR_WRITE; if(!fwrite($this->IL11I1L,I5810,1)) return IPC_ERR_WRITE; return IPC_ERR_OK; }function TIT1I1I($str,$I1lII11=true) {if($err=$this->TIT1Il1($str,$I1lII11)) return $err; if(!fwrite($this->IL11I1L,$this->I1lIIL1)) return IPC_ERR_WRITE; return IPC_ERR_OK; }function TIT1I1l(&$str,$timeout=false) {if($timeout==false) $timeout =$this->timeout; $this->I1lIIL1 =''; $I1lIlII =intval($timeout/$this->I1lII1I); if(!$I1lIlII) $I1lIlII =1; for($i=0; $i<$I1lIlII; $i++) {$chunk =fread($this->IL11I1l,$this->readBufLen); if($chunk===false) return IPC_ERR_READ; $this->I1lIIL1 .= $chunk; switch($err=$this->TIT1Ill($in)) {case IPC_ERR_OK: $str =$in; return IPC_ERR_OK; case IPC_ERR_SYNC: return $err; default: break; }$this->TIT1I11($this->I1lII1I*1000); }return IPC_ERR_TIMEOUT; }function TIT1I11($ms) {$this->I1lII1l===false ?usleep($ms*1000) :$this->I1lII1l->Sleep($ms); }}class FileIPCDriver extends IPCDriverBase {public $I1lIlIl; public $I1lIlIL; public $connected; function FileIPCDriver($I1lIlIl,$I1lIlIL,$opt=false) {$this->IPCDriverBase($opt); $this->I1lIlIl =$I1lIlIl; $this->I1lIlIL =$I1lIlIL; $this->connected =false; }function connect($II1lLll=false,$timeout=false) {if($II1lLll) {if(!$fd=@fopen($II1lLll,I5811)) return IPC_ERR_LOCK; chmod($II1lLll,0666); $I1lIlI1 =false; if(!flock($fd,LOCK_EX|LOCK_NB)) $I1lIlI1 =true; fclose($fd); if($I1lIlI1) return IPC_ERR_BUSY; }@unlink($this->I1lIlIl); @unlink($this->I1lIlIL); $err =IPC_ERR_OK; $this->connected =false; do {if($err=$this->_write("SYN")) break; $err=$this->_read($str='',$timeout); if($err==IPC_ERR_TIMEOUT) return IPC_ERR_CONNTIMEOUT; elseif($err) break; if(trim($str)!='ACK') {$err =IPC_ERR_PROTO; break; }$this->connected =true; }while(false); return $err; }function disconnect($timeout=false) {if(!$this->connected) return IPC_ERR_NOTCONNECTED; @unlink($this->I1lIlIl); @unlink($this->I1lIlIL); $err =IPC_ERR_OK; do {if($err=$this->_write("FIN")) break; if($err=$this->_read($str=I5812,$timeout)) break; if(trim($str)!='ACK') {$err =IPC_ERR_PROTO; break; }}while(false); $this->connected =false; @unlink($this->I1lIlIl); @unlink($this->I1lIlIL); }function _read(&$str,$timeout=false) {if($timeout==false) $timeout =$this->timeout; $I1lIlII =intval($timeout/$this->I1lII1I); if(!$I1lIlII) $I1lIlII =1; $err =IPC_ERR_TIMEOUT; for($i=0; $i<$I1lIlII; $i++) {if($this->IL11I1l=@fopen($this->I1lIlIl,'r')) {$err =IPC_ERR_OK; break; }$this->TIT1I11($this->I1lII1I*1000); }if($err) {$this->TIT1IlT("_read() [1]: return $err"); return $err; }$err =$this->TIT1I1l($str,$timeout); fclose($this->IL11I1l); @unlink($this->I1lIlIl); $this->TIT1IlT("_read() [2]: return $err"); return $err; }function TIT1lTT($timeout=false) {if($timeout==false) $timeout =$this->timeout; $I1lIlII =intval($timeout/$this->I1lII1I); if(!$I1lIlII) $I1lIlII =1; for($i=0; $i<$I1lIlII; $i++) {if(!file_exists($this->I1lIlIL)) {$this->TIT1IlT("_canWrite(): return 0"); return IPC_ERR_OK; }$this->TIT1I11($this->I1lII1I*1000); }$this->TIT1IlT("_canWrite(): return ".IPC_ERR_TIMEOUT); return IPC_ERR_TIMEOUT; }function _write($str) {if($err=$this->TIT1lTT()) {$this->TIT1IlT("_write() [1]: return $err"); return $err; }if(!$this->IL11I1L=fopen($this->I1lIlIL,I5813)) return IPC_ERR_WRITE; $err =IPC_ERR_OK; do {if($err =$this->TIT1I1I($str,false)) break; if($err =$this->TIT1I1T()) break; }while(false); fclose($this->IL11I1L); if($err) @unlink($this->I1lIlIL); $this->TIT1IlT("_write() [2]: return $err"); return $err; }function TITIlIl(&$str,$timeout=false) {if(!$this->connected) return IPC_ERR_NOTCONNECTED; if($err=$this->_read($str,$timeout)) return $err; return $this->_write('ACK'); }function send($str) {if(!$this->connected) return IPC_ERR_NOTCONNECTED; if($err=$this->_write($str)) return $err; if($err=$this->_read($str=I5812)) return $err; if(trim($str)!='ACK') return IPC_ERR_PROTO; return IPC_ERR_OK; }}?>