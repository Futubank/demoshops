<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       13264 xkqwxnrmnsxrxzsymnnmzmtyqiitlyzizgyrxxqzrxgywmmzxptuxunqunuwyukxiitipnir
 */ ?><?php foreach(array(7186=>'wjzddqd|gzTo',7187=>'zSIiHSuJQ`GOG',7188=>"",7189=>"WHnfMrI|ZJMZD",7190=>"funW|PuM`GOG",7191=>'rQtrZnD',7192=>'JHWZJ',7193=>'rQS',7194=>'!?',7195=>'zjmzd|jqVqj',7196=>'DOZrQS|OHDtMnP|MG',7197=>'WID|OHDt|uDQrD',7198=>'ZSS',7199=>"WHIGZnB|nZIQ",7200=>'ZWtMHn',7201=>'ZJMZD|SnD|tBGQ',7202=>'!',7203=>'SHIZMn|nZIQ',7204=>'SHIZMn|MD|rQDQrvQS',7205=>'ZJMZD|SHI|QxGMrQD',7206=>'MG',7207=>'SnD|tBGQ') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .'DNSManagerClient.php'; require_once $GLOBALS[I7186] .I7187; require_once $GLOBALS[I7186] .'DNSResolver.php'; require_once $GLOBALS[I7186] .'WZDaemon.php'; require_once($GLOBALS["CLASSES_PATH"]."Mailer.php"); class ModuleDomains extends AdmModule {public $I1LLIl1; public $state; public $I1LLILI; public $I1LLILl; public $I1LLILL; public $I1LLIL1; function ModuleDomains(&$cms, &$db, &$cModule) {parent::AdmModule($cms,$db,$cModule); }function _Init($IIll1l1 =Array(), $IIll1LI =I7188, $IIll1Ll =I7188, $aOptions =Array()) {$IIIIL11["allowed_actions"] =Array("enter_domain","del","dns_type",I7189); $IIIIL11["lang_data"] =false; $IIIIL11["admin_views"] =Array('form'); $aOptions += $IIIIL11; parent::_Init($IIll1l1, $IIll1LI, $IIll1Ll, $aOptions); }function _InitAdmin() {require_once($GLOBALS["FUNC_INCLUDES_PATH"].I7190); $this->I1LLIl1 =$this->TTTTIlT(); $db =&DB_si::admInstance(); list($this->I1LLILl,$this->I1LLILL,$this->I1LLIL1) =$db->getRecord("SELECT `alias_domain`, `alias_dns_type`, `alias_dom_expires` ". "FROM cms_host_users WHERE domain_orig='$this->I1LLIl1'",0,MYSQL_NUM); $this->state =false; $this->I1LLILI =new DNSResolver(array( 'nameservers' => explode(':',$this->TTTTI11('extern_ns')), I7191 => 3, 'retry' => 2 ));parent::_InitAdmin(); }function TTTlIII() {$this->filter->TITI1l1("datefrom"); $this->filter->TITI1l1("dateto"); parent::TTTlIII(); }function _ApplyFilters($prefix =I7188) {$res =parent::_ApplyFilters($prefix); return $res; }function TTTlI1I(&$vData) {if($this->state===false) {if($this->I1LLILl!='') {if($this->I1LLIL1 == '0000-00-00 00:00:00') {$this->state ='ALIAS_EXISTS'; }elseif($this->I1LLILL==0) {$this->state ='DNS_TYPE'; }else {$this->state ='ALIAS_CONFIRM'; $vData['ALIAS_TYPE'] =$this->I1LLILL==1 ?I7192 :'foreign'; if($this->TIIT1IT()) {$vData['OK_TO_PARK'] =1; }else {$vData['OK_TO_PARK'] =0; $this->cms->AddStatusMsg('dns_not_ok',I7193); }}}else {$this->state ='ALIAS_ADD'; }}$vData['FORM_TYPE'] =$this->state; $vData['nameservers'] =str_replace(':',I7194,$this->TTTTI11('our_ns')); $vData['site_ip'] =$this->TTTTI11('shared_hosting_ip'); $vData['alias'] =$this->I1LLILl; $vData[I7195] =$this->TIIT1T1($this->I1LLILl); parent::TTTlI1I($vData); }function TTTlI11(&$vData, &$aCustom) {$this->browser->InitSQL("1",'',''); parent::TTTlI11($vData, $aCustom); }function TIIT1T1($domain) {$p =explode('.',$domain); return sizeof($p); }function TIIT1IT() {$ip =$this->I1LLILI->TT1lII1($this->I1LLILl); return $ip===$this->TTTTI11(I7196); }function TIIT1II($domain,$I1LLI1I=false) {$domain =mb_strtolower($domain); if(!preg_match('/^(www\.)?([a-z0-9\-]+)(\.[a-z0-9\-]+)(\.[a-z0-9\-]+)?$/',$domain,$m)) return false; array_shift($m); if(sizeof($m)==4) array_shift($m); if(sizeof($m)==3 and $m[0] == 'www.') array_shift($m); if(sizeof($m)==2 && $I1LLI1I) array_unshift($m,'www.'); return implode('',$m); }function TIIT1Il($rec) {$db =&DB_si::admInstance(); $sql =$db->genUpdateSQL(I7197,$rec,"WHERE domain_orig='$this->I1LLIl1'"); $db->execute($sql); }function TIIT1I1() {if(!$this->TIIT1IT()) {$this->state =false; return; }$daemon =&WZDaemon::admInstance(); if($GLOBALS['BUILDER_VERSION'] >= 2){ $daemon->TI1l1IT($this->cms->Core); }if($daemon->TlTTT11( array('domain'=>$this->I1LLIl1,'alias'=>$this->I1LLILl,'action'=>I7198))===false) {$this->cms->AddStatusMsg('alias_creation_failed',I7193); trigger_error("Cannot create alias virtualhost: ".$daemon->errorsAsString(),E_USER_WARNING); return; }$this->TIIT1Il(array('alias_dom_expires'=>'0000-00-00 00:00:00')); $this->state =false; $this->I1LLIL1 ='0000-00-00 00:00:00'; $this->cms->AddStatusMsg('alias_creation_ok','blue'); $oMail =new Mailer(); $oMail->RecipientAddress ='builder.staff@locmail.amiro.ru'; $oMail->SenderAddress =$this->cms->Core->GetOption("company_robot_email"); $oMail->SenderName =$this->cms->Core->GetOption(I7199); $oMail->Subject ="Domain $this->I1LLILl parked to $this->I1LLIl1"; $oMail->Body ="Domain $this->I1LLILl parked to $this->I1LLIl1"; $oMail->BodyFormat ="html"; $oMail->Prepare(); $oMail->Send(); }function TIIT1lT() {$daemon =&WZDaemon::admInstance(); if($GLOBALS['BUILDER_VERSION'] >= 2){ $daemon->TI1l1IT($this->cms->Core); }if($daemon->TlTTT11( array('domain'=>$this->I1LLIl1,'alias'=>$this->I1LLILl,I7200=>'del'))===false) {$this->cms->AddStatusMsg('alias_deletion_failed',I7193); trigger_error("Cannot delete alias virtualhost: ".$daemon->errorsAsString(),E_USER_WARNING); return; }if($this->TIIT1T1($this->I1LLILl)==2) {$I1LLI1l =&DNSManagerClient::TT1I1Il($this->I1LLIl1); $I1LLI1l->TI1TllI(true); if($I1LLI1l->deleteZone($this->I1LLILl)===false) {$this->cms->AddStatusMsg('alias_deletion_failed',I7193); trigger_error("Cannot delete DNS zone: ".$I1LLI1l->errorsAsString(),E_USER_WARNING); return; }}$this->I1LLILl =''; $this->I1LLILL =0; $this->I1LLIL1 ='0000-00-00 00:00:00'; $this->TIIT1Il(array( 'alias_domain' => $this->I1LLILl, 'alias_dom_expires'=> $this->I1LLIL1, I7201 => $this->I1LLILL)); $this->cms->AddStatusMsg('alias_deletion_ok','blue'); }function TIIT1lI() {$list =$this->TTTTI11('reserved_domains'); if(empty($list)) return false; list($domains,$subs) =explode(':',$list); if(empty($domains) || empty($subs)) return false; $domains =explode(I7202,$domains); $subs =explode(I7202,$subs); $d =explode('.',$this->I1LLILl); if(sizeof($d)==2) {$domain =$d[0].'.'.$d[1]; if(in_array($domain,$domains)) return true; }else {$domain =$d[1].'.'.$d[2]; $sub =$d[0]; if(in_array($domain,$domains)) return true; foreach($subs as $re) if(preg_match("/$re/",$sub)) return true; }return false; }function TIIT1ll($cId, $cModule) {$this->cms->ClearMessages(); $this->state ='ALIAS_ADD'; $this->I1LLILl =$this->TIIT1II($this->cms->VarsPost[I7203]); if($this->I1LLILl===false) return; $level =$this->TIIT1T1($this->I1LLILl); $db =&DB_si::admInstance(); $cnt =$db->getValue("SELECT COUNT(*) FROM cms_host_users ". "WHERE domain_orig='$this->I1LLILl' OR alias_domain='$this->I1LLILl'"); if(!$cnt) {if($level==2) {$I1LLI1l =&DNSManagerClient::TT1I1Il($this->I1LLIl1); $I1LLI1l->TI1TllI(true); $I1LLI1L =$I1LLI1l->zoneExists($this->I1LLILl); if($I1LLI1L===false) {$this->cms->AddStatusMsg('domain_check_err',I7193); trigger_error("Cannot check DNS zone existence: ".$I1LLI1l->errorsAsString(),E_USER_WARNING); return; }else $free =$I1LLI1L==0; }else $free =true; }else $free =false; if(!$free) {$this->cms->AddStatusMsg('domain_not_free',I7193); return; }if($this->TIIT1lI()) {$this->cms->AddStatusMsg(I7204,I7193); return; }$ttl =$this->TTTTI11('alias_domain_ttl'); if(empty($ttl) || ($ttl=strtotime("$ttl"))==-1) {trigger_error("Invalid alias reserved period in shared options",E_USER_WARNING); $ttl =strtotime("+1 week"); }$ttl =DateTools::toMysqlDate($ttl); $this->I1LLILL =$level==2 ?0 :2; $this->I1LLIL1 =$ttl; $rec =array( 'alias_domain' => $this->I1LLILl, I7201 => $this->I1LLILL, I7205 => $ttl );$this->TIIT1Il($rec); if($this->I1LLILL==0) {$this->state ='DNS_TYPE'; return; }$this->TIIT1I1(); }function TIIT1l1($cId, $cModule) {switch($this->cms->VarsPost['dnstype']) {case I7192: $this->I1LLILL =1; break; case 'foreign': $this->I1LLILL =2; break; default: return; }if($this->I1LLILL==1) {$I1LLI1l =&DNSManagerClient::TT1I1Il($this->I1LLIl1); $I1LLI1l->TI1TllI(true); $I1LLI11 =array('type'=>DNS_ZTYPE_MASTER,I7206=>$this->TTTTI11(I7196),'do_mx'=>true); if($I1LLI1l->addZone($this->I1LLILl,$I1LLI11)===false) {$this->cms->AddStatusMsg('zone_creation_failed',I7193); trigger_error("Cannot create DNS zone '$I1LLILl': ".$I1LLI1l->errorsAsString(),E_USER_WARNING); $this->I1LLILL =0; return; }}$this->TIIT1Il(array(I7201=>$this->I1LLILL)); }function _ActionDel($cId, $cModule) {$this->TIIT1lT(); }function TIIT11T($cId, $cModule) {$this->TIIT1I1(); }function TTTlITT($IIIL11l,$cId,$cModule) {switch($IIIL11l) {case 'enter_domain': $this->TIIT1ll($cId,$cModule); break; case 'confirm_alias': $this->TIIT11T($cId,$cModule); break; case I7207: $this->TIIT1l1($cId,$cModule); break; default: parent::TTTlITT($IIIL11l,$cId,$cModule); }}}?>