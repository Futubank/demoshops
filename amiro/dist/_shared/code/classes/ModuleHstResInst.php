<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    core 
 * @version    $Id$ 
 * @size       84984 xkqwpwimwnmlgslusiguisztprgqrxyktsmixskuwlllzuqrysitmlspxngxypsynlzppnir
 */ ?><?php foreach(array(10877=>'iHSuJQoDt`GOG',10878=>'iHSuJQoDtRQDQJJQrD`GOG',10879=>'tZYJQD',10880=>'LHMnD',10881=>'mNNqR',10882=>"JZnP|SZtZ",10883=>"dqjqwT?MS!?tBGQ?FRhi?WID|ODt|rQD?coqRq?MntQrfZWQ|IHSuJQ='",10884=>'wZnnHt?fMnS?GZWKZPQ?ms?fHr?IHSuJQ?',10885=>'vOHDt',10886=>"SZtQfrHI",10887=>"fJt|DuYDWrMGtMHn",10888=>'QSMt',10889=>'dqjqwT|VohdT',10890=>'VohdT|md|whNdTzNT',10891=>'MS|vOHDt',10892=>"WurrQnt|vOHDt|nZIQ",10893=>"tGJ|rHC|GHDtfMx",10894=>"%vOHDt|DMnPJQ",10895=>'v',10896=>"'?",10897=>"WOQWK|JMIMt|DEJ",10898=>'WID|IQIYQrD',10899=>'v_I',10900=>'t`MS=D`MS|tZrMff',10901=>'D_t',10902=>'t',10903=>"WurrQnt|DuYD|nZIQ",10904=>"%DuYDWrMGtMHn|rHC",10905=>"JZDt|QSMtQS|MS",10906=>'LHMnD|tBGQD',10907=>'I_t',10908=>'D',10909=>'',10910=>"`MS",10911=>'WZJWuJZtQ|QxGr',10912=>'tZYJQ',10913=>'ZJMZD',10914=>'OQZSQr',10915=>'JMDt|nZIQ',10916=>'nZIQ',10917=>'SMDZYJQS',10918=>'vZJuQD',10919=>'WHntrHJ|MWHn',10920=>'OMnt|DtBJQ',10921=>'tQxt',10922=>'MS',10923=>'GZDDCHrS',10924=>'WZGtMHn|ZJMPn',10925=>'rHC|DtZrt',10926=>'MnGut|DGZn',10927=>'MnGut|tS|DtZrt',10928=>'fMQJS',10929=>"nZIQ",10930=>"MS|rQDQJJQr",10931=>"coqRq?1?",10932=>"fMQJSD",10933=>"ZWtMvQ",10934=>"Hff",10935=>"HYLQWt",10936=>"JQP|BQJJHC",10937=>"YuttHnD",10938=>"ZWtMHn|QSMt",10939=>"MS",10940=>"ZWtMHn|SQJ",10941=>"SQJ|MS",10942=>'MS|DuYDWrMGtMHn',10943=>'ZWtMvQ',10944=>"rQS",10945=>"ZWWQDD|vMHJZtMHn",10946=>"rQDQJJQr|fMQJS",10947=>"DrW|DuYDWr|SZtZ",10948=>"IHvQ",10949=>"zGGJB?fZMJQS",10950=>"'",10951=>"IHvQ|SZtZ",10952=>"DtZtuD|IHvQ|fZMJ",10953=>"-1",10954=>'MS|rQDQJJQr',10955=>"ZWtMvZtQ",10956=>"coqRq?MS=",10957=>"?oHDtMnP?QrrHr",10958=>"zWtMvZtQ?fZMJQS",10959=>'Hn|fHrI',10960=>'Hn',10961=>'WHIIQntD',10962=>"YQJHnPD|tH|vOHDt",10963=>'MS|IQIYQr',10964=>'ODt|QrrHr|',10965=>'HJS|',10966=>'SHIZMn',10967=>'HD|uDQr',10968=>'ZWtMvQ|DtZtQ',10969=>'oDtRQD`GOG',10970=>'?+?',10971=>'uGSZtQ',10972=>'GrHW',10973=>'nHnQ',10974=>'WZJJYZWK',10975=>'vZJuQ',10976=>'DtHrQ|tH|SY',10977=>'WHntrHJ|OZnSJQr',10978=>'WHJ|CMStO',10979=>'MnGut|tS|QnS',10980=>'MnGut',10981=>'"^?tZYJQ="',10982=>'ZD?',10983=>"",10984=>'MntQrfZWQ|IHSuJQ',10985=>'YHunS',10986=>'SQJ') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .I10877; require_once $GLOBALS['CLASSES_PATH'] .I10878; class ModuleHstResInst extends ModuleHst {public $fields; public $tables; public $IlL11II; public $lI1IL1L; public $I1ILIII; public $lI1ILLl; public $IIlIIL1; public $IIlIIl1; public $lI1II1L; public $lILILLl; public $lILLL1L; public $res; public $lI1IL11; public $lI1I1II; function ModuleHstResInst(&$cms, &$db, &$cModule) {parent::AdmModule($cms, $db, $cModule); $this->fields =array(); $this->tables =array( I10879=>array('s' => 'cms_hst_subscription', 'r' => 'cms_hst_res_inst'), I10880=>Array('s|r'=>'s.id=r.id_subscription'), 'joins_types'=>Array('s|r'=>I10881) );$this->IlL11II =''; $this->lI1IL1L ='r'; $this->lI1ILLl =0; $this->IIlIIL1 =0; $this->IIlIIl1 =0; $this->lI1II1L =array(); $this->lILILLl =array(); $this->lILLL1L =null; $this->res =null; $this->lI1IL11 =array(); $this->lI1I1II =Array(); }function _Init($IIll1l1 =Array(), $IIll1LI ="", $IIll1Ll ="", $aOptions =Array()) {$IIIIL11 =array(); $IIIIL11[I10882] =false; $IIIIL11["use_modified_date"] =false; $IIIIL11["default_prefix"] ="r"; $IIIIL11["belongs_to_vhost"] =true; $IIIIL11["cannot_change_vhost"] =true; $IIIIL11["reseller_field"] ="s.id_reseller"; $aOptions += $IIIIL11; $sql =I10883.$this->module->GetName()."'"; $this->I1ILIII =$this->db->getValue($sql); if(is_null($this->I1ILIII)) {trigger_error(I10884.$this->module->GetName(), E_USER_ERROR); }parent::_Init($IIll1l1, $IIll1LI, $IIll1Ll, $aOptions); $this->TIlTT11($this->db, $this->langData); }function _InitAdmin() {parent::_InitAdmin(); $this->TIlITT1($this->TIlTlTT()); if($this->options["belongs_to_vhost"]) {$IIlIIL1 =$this->TIlT1T1(); if($IIlIIL1) {$lI1IILl =$this->TIlITIl($IIlIIL1, I10885); if($lI1IILl) {$this->lI1II1L =$this->TIlT1Il($lI1IILl['id_subscription']); $this->lI1II1L['domain'] =$lI1IILl['domain']; }}}else {$this->lI1II1L =$this->TIlT1Il($this->TIlT1IT()); }}function TTTlIII() {parent::TTTlIII(); if($this->filter->issetField("datefrom")) $this->filter->TITI1l1(I10886); if($this->filter->issetField("dateto")) $this->filter->TITI1l1("dateto"); $this->filter->AddField("flt_subscription", "text", stripslashes(unhtmlentities($this->cms->Vars[I10887])), "", " like ", "s.id"); }function TTTlITT($IIIL11l, $cId, $cModule ="") {if($IIIL11l != I10888) {if($cId >0 && empty($this->lILILLl)) {$itemData =$this->itemData; $this->TTTl1Tl($cId, $cModule); $this->IIllIlI =0; $this->lILILLl =$this->itemData; $this->itemData =$itemData; }}switch($IIIL11l) {case "activate": $this->_ActionActivate($cId, $cModule); break; case 'move': $this->_ActionMove($cId, $cModule); break; default: break; }parent::TTTlITT($IIIL11l, $cId, $cModule); }function &TTTlI1I(&$aData) {if($this->action != "edit") {}$vars =array( 'IS_ADMIN' => intval($this->TTTTIIl() || $this->TTTTII1()), );$vars[I10889] =intval($this->options["belongs_to_vhost"]); if($this->action == "edit" && $this->options["cannot_change_vhost"]) {$vars['VHOST_IS_CONSTANT'] =1; }else {$vars[I10890] =0; }$this->cms->Gui->addGlobalVars($vars); if($this->options["belongs_to_vhost"]) {if($this->options["cannot_change_vhost"] && $this->action == "edit") {$lI1I1Il =Array(); $sql ="SELECT v.id, v.domain, m.username, m.firstname, m.lastname, t.name as tariff FROM cms_hst_res_vhost_inst v LEFT JOIN cms_members m ON m.id=v.id_client LEFT JOIN cms_hst_subscription s ON s.id=v.id_subscription LEFT JOIN cms_hst_tariff t ON t.id=s.id_tariff WHERE v.id='".$this->itemData[I10891]."' ".parent::_ApplyFilters(); $this->db->query($sql); if ($this->db->next_record()) {$lI1I1Il =$this->db->Record; }$aData["select_vhost"] .= $this->cms->Gui->get($this->moduleName."_subform:vhost_is_nochange", $lI1I1Il); }else {$aListData =Array( "current_vhost" => $this->IIlIIL1, I10892 => $this->IIlIIL1, );$aCustom =Array( "tpl_block" => $this->moduleName."_subform", "tpl_hidden_field_postfix" => ":vhost_hidden", I10893 => ":vhost_row", "tpl_list_postfix" => ":vhost_list", "tpl_single_item_postfix" => I10894, "last_edited_id" => $this->IIlIIL1, "list_data" => $aListData, );if($this->action != I10888) {$aCustom["last_edited_id"] =0; }$this->module->PushPager($this->browser); $this->browser->InitSQL("count(*) as vhost_cnt ", Array( I10879=>Array(I10895=>'cms_hst_res_vhost_inst', 's'=>'cms_hst_subscription'), I10880=>array('v|s'=>'s.id=v.id_subscription', ),'joins_types'=>array('v|s'=>'LEFT'), ),"WHERE 1 AND s.lang='".$this->langData.I10896.parent::_ApplyFilters() );$this->browser->AddSQLJoinedTables($this->cms->Core, I10895, Array(I10895=>'cms_hst_res_vhost_inst', 's'=>'cms_hst_subscription')); $this->browser->ProcessSQL($this->db); $aCustom["check_limit_sql"] =0; if ($this->db->next_record()) {$aCustom[I10897] =$this->db->Record['vhost_cnt']; }if($aCustom[I10897] <= $this->browser->PageSize) {$this->browser->InitSQL("v.id, v.domain, m.username, m.firstname, m.lastname, t.name as tariff ", Array( I10879=>Array(I10895=>'cms_hst_res_vhost_inst', 'm'=>I10898, 's'=>'cms_hst_subscription', 't'=>'cms_hst_tariff'), I10880=>array(I10899=>'m.id=v.id_client', 'm|s'=>'s.id=v.id_subscription', 's|t'=>I10900 ),'joins_types'=>array(I10899=>'LEFT', 'm|s'=>'LEFT', I10901=>'LEFT'), ),"WHERE 1 AND s.lang='".$this->langData.I10896.parent::_ApplyFilters(), '', 'v.domain' );$this->browser->SetForceRules("order by v.domain asc"); $this->browser->AddSQLJoinedTables($this->cms->Core, I10895, Array(I10895=>'cms_hst_res_vhost_inst', 'm'=>I10898, 's'=>'cms_hst_subscription', I10902=>'cms_hst_tariff')); }$aData["select_vhost"] =$this->TTT1lII($this->db, $this->module->GetOption("list_size"), $aCustom); $this->module->PopPager($this->browser); }}else {$aListData =Array( "current_subs" => $this->IIlIIl1, I10903 => $this->IIlIIl1, );$aCustom =Array( "tpl_block" => $this->moduleName."_subform", "tpl_hidden_field_postfix" => ":subscription_hidden", I10893 => I10904, "tpl_list_postfix" => ":subscription_list", "tpl_single_item_postfix" => ":subscription_single", I10905 => $this->IIlIIl1, "list_data" => $aListData, );if($this->action != I10888) {$aCustom[I10905] =0; }$this->module->PushPager($this->browser); $this->browser->InitSQL("count(s.id) as subs_cnt ", Array( I10879=>Array('s'=>'cms_hst_subscription'), I10880=>array(), I10906=>array(), ),"WHERE 1 AND s.lang='".$this->langData.I10896.parent::_ApplyFilters() );$this->browser->ProcessSQL($this->db); $aCustom[I10897] =0; if ($this->db->next_record()) {$aCustom[I10897] =$this->db->Record['subs_cnt']; }if($aCustom[I10897] <= $this->browser->PageSize) {$this->browser->InitSQL("s.id, m.username, m.firstname, m.lastname, t.name as tariff", Array( I10879=>Array('s'=>'cms_hst_subscription', 'm'=>I10898, I10902=>'cms_hst_tariff'), I10880=>array('s|m'=>'m.id=s.id_member', I10907=>I10900), I10906=>array('s|m'=>I10881, I10907=>I10881), ),"WHERE 1 AND s.lang='".$this->langData.I10896.parent::_ApplyFilters() );$this->browser->SetForceRules("order by m.username asc"); $this->browser->AddSQLJoinedTables($this->cms->Core, 'm', Array(I10908=>'cms_hst_subscription', I10902=>'cms_hst_tariff')); }$aData["select_subscription"] =$this->TTT1lII($this->db, $this->module->GetOption("list_size"), $aCustom); $this->module->PopPager($this->browser); }parent::TTTlI1I($aData); }function _ApplyFilters($prefix =I10909, $bodyType =I10909, $IIlLLl1 =true) {$res =parent::_ApplyFilters($prefix, $bodyType, $IIlLLl1); $res .= " AND r.id_res='".$this->I1ILIII.I10896; return $res; }function TTTlI11(&$vData, &$aCustom) {if(!$this->cms->Gui->getGlobalVar('ACTIONS_WIDTH')) {$this->cms->Gui->addGlobalVars(Array('ACTIONS_WIDTH' => 50)); }$fields ="s.id as id_subscription, r.id as id_res_inst, r.id_res, r.id_subscription, r.id_member, r.id_reseller, r.active_state, r.pkg_flags, r.comments, ".$this->lI1IL1L.I10910; foreach($this->fields as $name => $field) {if(!empty($field['in_list'])) {if($field['get_from_db']) {$fields .= ','; if (isset($field['calculate_expr'])) {$fields .= $field[I10911].' as '.($field['alias']? $field['alias']:$field['name']); }else {$fields .= (mb_strlen($field[I10912]) ?$field[I10912].'.' :I10909).$field['name'].($field['alias']? 'as '.$field[I10913]:I10909); }}if($field['hidden_col'] === false) {$lI1I1IL ='sort_'.(mb_strlen($field[I10912]) ?$field[I10912].'.' :I10909).($field[I10913]? $field[I10913]:$field['name']); $aHeader =array(I10914 => $this->words[$name], 'sort_col' => $aCustom['list_data'][$lI1I1IL], 'col_width' => $field['col_width']); if($field[I10915] != I10909) {$aHeader[I10914] =$this->words[$field[I10915]]; }$aCustom["list_data"]["col_headers"] .= $this->cms->Gui->get($this->moduleName."_list:col_header", $aHeader); }}if(!empty($field['on_form'])) {$lI1I1I1 =array( I10916 => $name, 'value' => $this->itemData[$name], 'readonly' => $field['readonly'], 'disabled' => $field[I10917], 'checked' => $field['checked'], 'type' => $field['type'], I10918 => $field[I10918], 'actions' => $field['actions'], 'control_handler' => $field['control_handler'], I10919 => $field[I10919], 'style' => $field['style'], 'class' => $field['class'], I10920 => $field[I10920], );switch ($field['type']) {case 'select': $lI1I1I1['options'] =I10909; foreach($lI1I1I1[I10918] as $value => $text) {$aOption =Array('value'=>$value, I10921=>$text); if($value == $this->itemData[$name]) {$aOption['selected'] =true; }$lI1I1I1['options'] .= $this->cms->Gui->get($this->moduleName."_subform:option", $aOption); }break; case 'checkbox': if ($this->itemData[I10922]) {$lI1I1I1['checked'] =0; if ($this->itemData[$lI1I1I1[I10916]]) {$lI1I1I1['checked'] =1; }}break; default: break; }$input =$this->cms->Gui->get($this->moduleName."_subform:".$field['input_template'], $lI1I1I1); if(($field[I10916] == I10923 || $field[I10916] == 'confirm_password') && ($this->action !=I10888)) {$field['is_required'] =true; }$aRow =array( I10914 => $this->words[$name], 'input' => $input, 'caption_align' => $field[I10924], 'caption_style' => $field['caption_style'], 'is_required' => $field['is_required'], I10916 => $field[I10916], I10925 => $field[I10925], 'row_end' => $field['row_end'], 'capt_span' => $field['capt_span'], I10926 => $field[I10926], 'capt_td_start' => $field['capt_td_start'], 'capt_td_end' => $field['capt_td_end'], I10927 => $field[I10927], 'input_td_end' => $field['input_td_end'], );if($field['hint_word'] != I10909) {$aRow['input_hint'] =$this->cms->Gui->get($this->moduleName."_subform:input_hint", $field); }$vData['res_fields'] .= $this->cms->Gui->get($this->moduleName."_subform:".$field['row_template'], $aRow); if($field['is_required']) {$lI1I1lI =Array( I10914 => $this->words[$name], I10928 => $field[I10916], );$vData['required_fields_check'] .= $this->cms->Gui->get($this->moduleName."_subform:required_field_check_script", $lI1I1lI); }}}$this->browser->InitSQL("r.id_member, r.id_reseller", $this->tables, "WHERE 1 ".$this->_ApplyFilters().$this->TTTlIl1(), $this->IlL11II, I10929, "r.id desc"); if(sizeof($this->tables[I10879]) >1) {$tables =$this->tables[I10879]; unset($tables['r']); $this->browser->AddSQLJoinedTables($this->cms->Core, 'r', $tables); }$this->browser->ProcessSQL($this->db); $lI1IllI =Array(); while($this->db->next_record()) {$lI1IllI[] =$this->db->Record["id_member"]; if($this->db->Record[I10930] >0 ){$lI1IllI[] =$this->db->Record[I10930]; }}$lI1IllI =array_unique($lI1IllI); $this->lI1I1II =Array(); if (count($lI1IllI) >0 && $lI1IllI[0] != 0) {$sql ="SELECT id, username FROM cms_members WHERE id IN (".implode(",", $lI1IllI).")"; $dbrs =&$this->db->select($sql); while($dbrs->nextRecord()){ $this->lI1I1II[$dbrs->Record[I10922]] =$dbrs->Record['username']; }}$this->browser->InitSQL($fields, $this->tables, I10931.$this->_ApplyFilters().$this->TTTlIl1(), $this->IlL11II, I10929, "r.id desc"); if(sizeof($this->tables[I10879]) >1) {$this->browser->AddSQLJoinedTables($this->cms->Core, 'r', $tables); }$aCustom["fields"] =$this->TIlTI1I($aCustom["fields"]); $aCustom[I10932] += Array( "active_state" => Array("action"=>"flagicon", "value"=>I10933, "id"=>"act_id", "on"=>$this->moduleName."_list:active_on", I10934=>$this->moduleName."_list:active_off"), "res_fields" => Array("action"=>"callback", I10935=>&$this, "method"=>"_ApplyResFieldsCB"), );$aCustom["applied_id"] =$this->lI1IL1L.I10910; $aCustom["legend"] =Array(I10936, "leg_blue", "leg_edit", "leg_del"); $aCustom["form_data"][I10937] =Array("add", "apply", "cancel", "save"); parent::TTTlI11($vData, $aCustom); }function TIlTI1I($aFields) {$aFields += Array(I10938=>Array("action"=>"flagicon", "value"=>"", I10939=>"edit_id", "on"=>$this->moduleName."_list:edit",I10934=>""), I10940=>Array("action"=>"flagicon", "value"=>"", I10939=>I10941, "on"=>$this->moduleName."_list:del",I10934=>""), );return $aFields; }function TTTll11($cId, $cModule) {$res =true; $access =true; if($cId) {$access =$this->TIlTll1($cId); }if($access) {$aSql =$this->TIlT1Tl(); if(!empty($aSql) && $this->TIlT1TI($aSql)) {if($this->TIlIITI($aSql['id_res'], $aSql[I10942])) {if($this->cms->VarsPost['add_mode'] == 'add_exists') {$lI1I1ll =true; }else {$lI1I1ll =$this->TIlT1l1(); if(!$this->TTTTlTI()) {if($lI1I1ll && isset($this->cms->VarsPost['active_state']) && $this->cms->VarsPost['active_state'] != I10943) {$lI1I1ll =$this->TIlITTT(); }}}if($lI1I1ll) {$sql =$this->db->GenInsertSQL('cms_hst_res_inst', $aSql); $this->db->execute($sql); $this->lI1ILLl =$this->db->lastInsertId(); if(!empty($this->fields)) {parent::TTTll11($cId, $cModule); if($this->errno) {}else {}}else {}if(!$this->TIlITlT($aSql[I10942], $aSql['id_res'], "+1")) {$this->cms->AddStatusMsg("hst_status_used_value_update_fail", I10944); $res =false; }if($this->options["belongs_to_vhost"]) {$lI1IILl =$this->TIlITIl($this->TIlT1T1(), I10885); $lI1Il1l =$lI1IILl['id_res_inst']; if(!$this->TIlITll($lI1Il1l, $this->lI1ILLl)) {$this->cms->AddStatusMsg("hst_status_add_dependence_fail", I10944); $res =false; }}if(!$aSql[I10943]) {}}else {$this->cms->AddStatusMsg("hst_status_add_fail", I10944, I10909, I10909, array(I10921=>$this->TIlT1II())); $res =false; }}else {$res =false; }}else {$res =false; }}else {$this->cms->AddStatusMsg(I10945, I10944); $res =false; }if($res) {$this->SetLastError(); $this->cms->AddStatusMsg("status_add"); }else {$this->cms->AddStatusMsg("status_add_fail", I10944); $this->SetLastError(1, "Adding failed"); }return $res; }function TTTl1lI($cId, $cModule) {$res =true; if($this->TIlTll1($cId)) {$aSql =$this->TIlT1Tl(); if(!empty($aSql) && $this->TIlT1TI($aSql)) {$lI1I1lL =($this->IIlIIl1 != $aSql[I10942]); if($lI1I1lL) {if($this->TIlIT1T($this->lI1ILLl)) {$this->cms->AddStatusMsg("hst_status_move_resource_forbidden", I10944); $lI1I1lL =false; }else {$lI1IIIL =array( "id_subscription_from" => $this->IIlIIl1, "id_subscription_to" => $aSql[I10942], );}$aSql[I10942] =$this->IIlIIl1; }if($this->TIlT11I()) {$lI1I1ll =true; if(!$this->TTTTlTI()) {if(isset($this->cms->VarsPost['active_state']) && $this->TIlIIIT($this->lI1ILLl) != $this->cms->VarsPost['active_state']) {$lI1I1ll =$this->TIlITTT(); if(!$lI1I1ll) {$this->cms->AddStatusMsg("hst_status_set_status_fail", I10944, I10909, I10909, array(I10921=>$this->TIlT1II())); $res =false; }}}if($lI1I1ll) {$lI1I1l1 =I10909; if(!empty($this->options['filter_client_table']) && $this->TTTTlTI()){ $lI1I1l1 =$this->options['filter_client_table']; $this->options['filter_client_table'] =I10909; }$lI1I1LI =$this->options["reseller_field"]; $where ="WHERE id=".$this->lI1ILLl.$this->_ApplyFilters(); $this->options[I10946] =$lI1I1LI; $sql =$this->db->GenUpdateSQL('cms_hst_res_inst r', $aSql, $where); echo "upd res inst: ".$sql."<br>"; $this->db->execute($sql); if(!empty($this->fields)) {parent::TTTl1lI($cId, $cModule); }if ($lI1I1l1 != I10909) {$this->options['filter_client_table'] =$lI1I1l1; }}}else {$this->cms->AddStatusMsg("hst_status_apply_fail", I10944, I10909, I10909, array(I10921=>$this->TIlT1II())); $res =false; }}else {$res =false; }}else {$this->cms->AddStatusMsg(I10945, I10944); $res =false; }if($res) {$this->SetLastError(); $this->cms->AddStatusMsg("status_apply"); if($lI1I1lL) {if($this->TIlIITT($aSql['id_res'], $lI1IIIL["id_subscription_from"], $lI1IIIL["id_subscription_to"])) {$lI1IIIL[I10947] =$this->TIlT1Il($lI1IIIL['id_subscription_from']); $lI1IIIL["dst_subscr_data"] =$this->TIlT1Il($lI1IIIL['id_subscription_to']); $this->cms->Vars["move_data"] =$lI1IIIL; $this->ProcessAction(I10948, $cId); if($this->errno == 0) {$this->cms->AddStatusMsg("status_move"); }else {$this->cms->AddStatusMsg("status_move_fail"); }}else {$this->cms->AddStatusMsg("status_cannot_move", I10944); $res =false; }}}else {$this->cms->AddStatusMsg("status_apply_fail", I10944); $this->SetLastError(2, I10949); }return $res; }function TTTl1Tl($cId, $cModule) {if($this->TIlTll1($cId)) {parent::TTTl1Tl($cId, $cModule); $lIL11L1 =$this->TIlITII($cId); if(is_array($lIL11L1)) {$this->itemData =$lIL11L1; $this->lI1ILLl =$this->itemData['id_res_inst']; $this->IIlIIl1 =$this->itemData[I10942]; if($this->itemData[I10891]) {$this->IIlIIL1 =$this->itemData[I10891]; }}return true; }else {return false; }}function _ActionDel($cId, $cModule) {$res =true; $access =true; if($this->TIlTll1($cId)) {if($this->TIlITl1()) {if($this->TIlT11T()) {if(sizeof($this->tables[I10879]) >1) {$tables =$this->tables[I10879]; unset($tables['r']); unset($tables[I10908]); foreach($tables as $alias => $table) {$sql ="DELETE FROM $table WHERE id_res_inst='".$this->lI1ILLl."'"; $this->db->execute($sql); }$sql ="DELETE FROM cms_hst_res_inst WHERE id='".$this->lI1ILLl.I10950; if($this->db->query($sql)) {if($this->TIlITlT($this->IIlIIl1, $this->I1ILIII, "-1")) {if(!$this->TIlIT1l($this->lI1ILLl)) {$this->cms->AddStatusMsg("hst_status_del_dependence_fail", I10944); $res =false; }}else {$this->cms->AddStatusMsg("hst_status_used_value_update_fail", I10944); $res =false; }}else {$res =false; }}else {$res =false; }}else {$this->cms->AddStatusMsg("hst_status_del_fail", I10944, I10909, I10909, array(I10921=>$this->TIlT1II())); $res =false; }}else {$this->cms->AddStatusMsg("hst_status_del_depended_resources_fail", I10944); $res =false; }}else {$this->cms->AddStatusMsg(I10945, I10944); $res =false; }if($res) {$this->SetLastError(); $this->cms->ClearMessages(); $this->cms->AddStatusMsg("status_del"); }else {$this->cms->AddStatusMsg("status_del_fail"); $this->SetLastError(3, "Deleting failed"); }return $res; }function TIlT1TT() {$res =true; if(!isset($this->cms->Vars["move_data"])) {$res =false; }$lI1IIIL =$this->cms->Vars[I10951]; if(!isset($lI1IIIL['id_subscription_from'])) {$res =false; }if(!isset($lI1IIIL['id_subscription_to'])) {$res =false; }if(!(isset($lI1IIIL[I10947]) && is_array($lI1IIIL[I10947]))) {$res =false; }if(!(isset($lI1IIIL["dst_subscr_data"]) && is_array($lI1IIIL["dst_subscr_data"]))) {$res =false; }return $res; }function _ActionMove($cId, $cModule) {if(!$this->TIlT1TT()) {$this->cms->AddStatusMsg(I10952, I10944); $this->SetLastError(4, "Move failed"); return false; }$res =true; $lI1IIIL =$this->cms->Vars[I10951]; if($this->TIlT11l()) {if(!$this->TIlITlT($lI1IIIL['id_subscription_from'], $this->I1ILIII, "-1") || !$this->TIlITlT($lI1IIIL['id_subscription_to'], $this->I1ILIII, I10953)) {$this->cms->AddStatusMsg("hst_status_used_value_update_fail", I10944); $res =false; }else {$lI1I1Ll =Array(I10942 => $aSql[I10942]); $lI1I1Ll['id_member'] =$lI1IIIL['dst_subscr_data']['id_member']; $lI1I1Ll[I10954] =$lI1IIIL['dst_subscr_data'][I10954]; $sql =$this->db->GenUpdateSQL('cms_hst_res_inst r', $lI1I1Ll, "WHERE id=".$this->lI1ILLl.$this->_ApplyFilters()); if($this->db->execute($sql)) {$this->TIlTI1l(); if($this->TIlIT11($cId, $lI1IIIL) === false) {$this->cms->AddStatusMsg("status_move_dependent_fail", I10944); $res =false; }}else {$this->cms->AddStatusMsg("status_base_package_apply_fail", I10944); $res =false; }}}else {$this->cms->AddStatusMsg("hst_status_move_fail", I10944, I10909, I10909, array(I10921=>$this->TIlT1II())); $res =false; }if($res) {}else {$this->cms->AddStatusMsg(I10952, I10944); $this->SetLastError(4, "Move failed"); }return $res; }function TIlTI1l($cId, $lI1IIIL) {}function _ActionActivate($cId, $cModule) {if ($this->TTTTlTI() || ($this->TTTTII1() && !$this->TIlTll1($cId))) {$this->cms->AddStatusMsg(I10945, I10944); $this->cms->AddStatusMsg("status_activate_fail", I10944); $this->SetLastError(5, "Activate failed"); return; }$lI1I1LL =$this->cms->Vars[I10955]; if ($this->TIlIIT1($lI1I1LL)) {$lIL11L1 =$this->TIlITII($cId); if(!is_array($lIL11L1)) {$this->cms->AddStatusMsg("status_activate_fail", I10944); $this->SetLastError(5, "Activate failed"); return; }$lI1IL1l =$this->TIlT1Il($lIL11L1[I10942]); if ($active && $lI1IL1l['active_state'] != I10943) {$this->cms->AddStatusMsg("subscription_is_blocked_warn", I10944); $this->cms->AddStatusMsg("status_activate_fail", I10944); $this->SetLastError(5, "Activate failed"); return; }$lI1I1L1 =$lIL11L1['active_state']; if ($lI1I1LL != $lI1I1L1) {if($this->TIlITTT()) {$aSql =Array('active_state' => $lI1I1LL); $sql =$this->db->GenUpdateSQL("cms_hst_res_inst", $aSql, I10956.$lIL11L1['id_res_inst']); $this->db->query($sql); $this->cms->AddStatusMsg("status_activate"); $this->appliedId =$cId; $this->browser->SetApplied($this->db, $aSql, $this->langData); $this->SetLastError(); }else {$this->cms->AddStatusMsg("status_activate_fail", I10944, "", I10957); $this->SetLastError(5, "Activate failed"); }}else {$this->cms->AddStatusMsg("status_activate_fail", I10944); $this->SetLastError(5, "Activate failed"); }}else {$this->cms->AddStatusMsg("status_activate_fail", I10944); $this->SetLastError(5, I10958); }}function TIlT1TI($aSql) {$lI1I11I =true; if(empty($aSql[I10942])) {$lI1I11I =false; if($this->options["belongs_to_vhost"]) {$this->cms->AddStatusMsg("status_empty_domain", I10944); }else {$this->cms->AddStatusMsg("status_empty_subscription", I10944); }}foreach($this->fields as $name => $field) {if($field['is_required'] && $this->cms->VarsPost[$name] == I10909) {$lI1I11I =false; $this->cms->AddStatusMsg("status_empty_required_field", I10944, I10909, I10909, array(I10921=>$this->words[$name])); }}if(isset($this->fields[I10923]) && isset($this->fields['confirm_password']) && $this->cms->VarsPost[I10923] != $this->cms->VarsPost['confirm_password']) {$lI1I11I =false; $this->cms->AddStatusMsg("different_passwords_inputed", I10944, I10909, I10909, array(I10921=>$this->words[$name])); }return $lI1I11I; }function TTT1IlI($aSql =Array(), $cId =0) {foreach($this->fields as $name => $field) {if($field['store_to_db'] && $field[I10959]) {if(isset($this->cms->VarsPost[$name]) || $field['type'] == 'checkbox') {if($field['type'] == 'checkbox') {if($this->cms->VarsPost[$name] == I10960) {$aSql[$name] =1; }else {$aSql[$name] =0; }}else {$aSql[$name] =trim($this->cms->VarsPost[$name]); }}}}if($this->options["belongs_to_vhost"]) {$aSql[I10891] =$this->TIlT1T1(); }else {$aSql[I10942] =$this->TIlT1IT(); }if($this->IIlIIL1 != $aSql[I10891]) {}$aSql['id_res_inst'] =$this->lI1ILLl; $aSql =parent::TTT1IlI($aSql, $cId); return $aSql; }function TIlT1Tl() {$aSql =array( 'id_res' => $this->I1ILIII, I10942 => $this->TIlT1IT(), 'pkg_flags' => 0, I10961 => $this->cms->VarsPost["comments"], );if(!$this->TTTTlTI()) {if($this->TIlIIT1($this->cms->VarsPost["active_state"])) {$aSql['active_state'] =$this->cms->VarsPost["active_state"]; }}if($this->options[I10962]) {$IIlIIL1 =$this->TIlT1T1(); if($IIlIIL1) {$lI1IILl =$this->TIlITIl($IIlIIL1, I10885); if($lI1IILl) {$aSql[I10942] =$lI1IILl[I10942]; }}}if($this->IIlIIl1 != $aSql[I10942]) {}$sql ="select c.id_member, c.id_reseller from cms_hst_subscription s INNER JOIN cms_hst_clients c ON c.id_member=s.id_member ". "where s.id='".$aSql[I10942].I10950.($this->resellerId >0? " AND c.id_reseller=".$this->resellerId: ""); $row =$this->db->GetRecord($sql); if(is_array($row)) {$aSql[I10954] =$row[I10954]; $aSql[I10963] =$row[I10963]; }else {$aSql =array(); }return $aSql; }function TIlT1T1() {$IIlIIL1 =$this->IIlIIL1; if(isset($this->cms->VarsPost[I10891])) {if($this->action != I10888 || !$this->options["cannot_change_vhost"]) {$IIlIIL1 =intval($this->cms->VarsPost[I10891]); }}if(!$IIlIIL1 && isset($this->cms->VarsGet[I10922])) {$lIL11L1 =$this->TIlITII($this->cms->VarsGet[I10922]); if($lIL11L1[I10891]) {$IIlIIL1 =intval($lIL11L1[I10891]); }}return $IIlIIL1; }function TIlT1IT() {$lI1I11l =(isset($this->cms->VarsPost['new_subs']))? intval($this->cms->VarsPost['new_subs']): $this->IIlIIl1; return $lI1I11l; }function TIlT1II() {$res .= isset($this->words['hst_error_'.$this->errno])? $this->words[I10964.$this->errno] :$this->words['hst_error_unknown']." (".$this->errno.")"; if(count($this->lI1IL11)) {$res .= implode('<br>', $this->lI1IL11); }return $res; }function TIlTI11() {$args =array(); foreach($this->fields as $name => $field) {if(isset($this->cms->Vars[$name])) {$args[$name] =trim($this->cms->Vars[$name]); }if(isset($this->lILILLl[$name])) {$args[I10965.$name] =$this->lILILLl[$name]; }}$lI1IL1l =$this->lI1II1L; if(!empty($lI1IL1l)) {$args['os_user'] =$lI1IL1l['os_user']; $args['os_user'] =$lI1IL1l['os_user']; if($this->options[I10962]) {$args[I10966] =$lI1IL1l[I10966]; }}$lI1I11L =$this->TIlT1Il($this->IIlIIl1); if(is_array($lI1I11L)) {$args['old_os_user'] =$lI1I11L['os_user']; }if(isset($this->cms->Vars[I10951])) {$args['old_os_user'] =$this->cms->Vars[I10951][I10947]["os_user"]; $args[I10967] =$this->cms->Vars[I10951]["dst_subscr_data"]["os_user"]; }if(isset($this->cms->VarsPost['active_state'])) {if($this->TIlIIT1($this->cms->VarsPost["active_state"])) {$args[I10968] =$this->cms->VarsPost["active_state"]; }}if(isset($this->cms->VarsGet['activate'])) {if($this->TIlIIT1($this->cms->VarsGet[I10955])) {$args[I10968] =$this->cms->VarsGet[I10955]; }}return $args; }function TIlT1Il($lI1I111) {$res =false; if($lI1I111) {$sql ="SELECT * FROM cms_hst_subscription WHERE id=".$lI1I111; $res =$this->db->getRecord($sql); }return $res; }function TIlT1I1($lI1lIII =true) {if(!is_object($this->lILLL1L)) {require_once $GLOBALS['CLASSES_PATH'] .I10969; $this->lILLL1L =new HstResFactory($this->db, $this->cms->Core); }if(!is_object($this->res)) {if($lI1lIII) {$id =$this->lI1ILLl; $this->res =$this->lILLL1L->TITl1T1($id); }else {$id =$this->I1ILIII; $this->res =$this->lILLL1L->TITl1Tl($id); }}if(!is_object($this->res)) {trigger_error('Cannot get package '.$id.($lI1lIII? ' by instance ID': ' by package ID'), E_USER_ERROR); }return $this->res; }function TIlT1lT($cmd, $args =null, $lI1lIII =true) {$res =false; $this->res =$this->TIlT1I1($lI1lIII); $this->res->TITllll($this->lI1II1L[I10922]); $batch =$this->res->TITll1I($cmd, is_array($args)? $args: $this->TIlTI11(), $lI1lIII? $this->lI1ILLl: null); if($batch === false) {$this->SetLastError(201, "Wrong hosting response"); $res =false; }else {$res =true; if(is_array($batch) && count($batch)) {foreach($batch as $cmd) {$ret =$cmd->TITllT1(); if(is_null($ret)) {trigger_error('Incomplete hosting response', E_USER_WARNING); $res =false; }elseif($ret >0) {$this->TIlT1lI($cmd); $this->SetLastError(10000 +$ret, $cmd->TITllIT()); $res =false; break; }}}}return $res; }function TIlT1lI($cmd) {$res =I10909; if(is_object($cmd)) {if(!is_null($cmd->TITllT1())) {$lI1lIIl =$this->TIlT1ll($cmd->TITllII()); switch ($cmd->TITllT1()) {case 0: break; case 1: break; case 2: break; case 3: if(is_array($cmd->TITllII())) {$res .= ' - '.implode(', ', $lI1lIIl); }break; case 5: if(is_array($cmd->TITllII())) {$res .= ' - '.implode(', ', $lI1lIIl); }break; case 6: if(is_array($cmd->TITllII())) {$res .= I10970.implode(', ', $lI1lIIl); }break; case 7: if(is_array($cmd->TITllII())) {$res .= I10970.implode(', ', $lI1lIIl); }break; case 8: break; default: break; }}}if($res != I10909) {$this->lI1IL11[] =$res; }}function TIlT1ll($IILlL1l) {$res =Array(); if(is_array($IILlL1l) && count($IILlL1l)) {foreach($IILlL1l as $param) {if($this->words[$param]) {$res []=$this->words[$param]; }else {$res []=$param; }}}return $res; }function TIlT1l1($args =null) {return $this->TIlT1lT('add', $args, false); }function TIlT11T($args =null) {return $this->TIlT1lT('del', $args); }function TIlT11I($args =null) {return $this->TIlT1lT(I10971, $args); }function TIlT11l($args =null) {return $this->TIlT1lT('move', $args); }function TIlT111($args =null) {return $this->TIlT1lT('copy', $args); }function TIlITTT($args =null) {return $this->TIlT1lT('setStatus', $args); }function TIlITTI($type, $command) {if(is_object($this->res) && is_object($this->res->batch)) {$commands =$this->res->batch->TITllI1(); if(is_array($commands)) {$aRet =Array(); foreach ($commands as $cmd) {$lI1lIIL =$cmd->TITllTl(); if($lI1lIIL['type'] == $type && $lI1lIIL[I10972] == $command) {$aRet[] =$cmd->TITllII(); }}if (count($aRet)) {return $aRet; }}}return false; }function TIlITTl($type, $command) {if(is_object($this->res) && is_object($this->res->batch)) {$commands =$this->res->batch->TITllI1(); if(is_array($commands) && count($commands)) {$aRet =Array(); foreach ($commands as $cmd) {$lI1lIIL =$cmd->TITllTl(); if($lI1lIIL['type'] == $type && $lI1lIIL[I10972] == $command) {$aRet[] =$cmd->TITllT1(); }}if (count($aRet)) {return $aRet; }}}return false; }function _ApplyResFieldsCB(&$vItem, &$vData) {$vItem['client_name'] =$this->lI1I1II[$vItem[I10963]]; if($vItem[I10954] >0) {$vItem['reseller_name'] =$this->lI1I1II[$vItem[I10954]]; }else {$vItem['reseller_name'] =$this->words[I10973]; }foreach($this->fields as $name => $field) {if(!empty($field['in_list']) && $field['hidden_col'] === false) {if(!is_null($field['callback'])) {if(method_exists($this, $field['callback'])) {$this->{$field[I10974]}($vItem, $vData); }else {trigger_error(get_class($this)."::".$field[I10974]." doesn't exist", E_USER_ERROR); }}$vItem['cols'] .= $this->cms->Gui->getAbs($this->moduleName."_list:col", array(I10975 => $vItem[$name], 'align' => $field['align'])); }}}function TIlITT1($aTables) {if(is_array($aTables[I10879])) {$this->tables =array_merge_recursive($this->tables, $aTables); $aliases =array_keys($aTables[I10879]); $this->lI1IL1L =$aliases[0]; }}function TIlITIT($aField) {if(isset($aField[I10916])) {if(!isset($aField[I10912])) {$aField[I10912] =$this->lI1IL1L; }$aField += array( 'in_list' => false, 'get_from_db' => true, I10913 => I10909, I10915 => I10909, I10976 => true, I10959 => true, 'is_required' => false, 'readonly' => false, I10917 => false, 'checked' => false, 'hint_word' => I10909, I10977 => I10909, I10919 => 'icons/icon_small_users.gif', 'style' => I10909, I10920 => I10909, 'align' => 'left', I10978 => I10909, I10925 => true, 'row_end' => true, 'capt_span' => 1, I10926 => 1, 'capt_td_start' => true, 'capt_td_end' => true, I10927 => true, I10979 => true, I10974 => null, 'hidden_col' => false, 'row_template' => 'row', 'input_template' => I10980, 'class' => I10928, );if(!isset($aField['type'])) {$aField['type'] =I10921; }if(!isset($aField[I10918])) {$aField[I10918] =Array(); }$this->fields[$aField[I10916]] =$aField; }else {trigger_error('Field cannot be added: required param is missing: name="'.$aField[I10916].I10981.$aField[I10912].'"', E_USER_WARNING); }}function TIlITII($lI1lII1) {$aRes =false; $fields ="r.id as id_res_inst, r.*, ".$this->lI1IL1L.I10910; foreach($this->fields as $name => $field) {if($field[I10976]) {$fields .= ','.$field[I10912].'.'.$field[I10916].($field[I10913]? I10982.$field[I10913]:I10909); }}if($this->options[I10962]) {$fields .= ', '.$this->lI1IL1L.'.id_vhost'; }$this->browser->InitSQL($fields, $this->tables, "WHERE ".$this->lI1IL1L.".id='".$lI1lII1.I10950.$this->_ApplyFilters(), I10983, I10929, "r.id desc" );$this->browser->ProcessSQL($this->db); if($this->db->next_record()) {$aRes =$this->db->Record; }return $aRes; }function TIlITIl($lI1lII1, $ILlI11L) {$aRes =false; $mModule =$this->TIlITI1($ILlI11L); if($mModule) {$aRes =$mModule->Engine->TIlITII($lI1lII1); }return $aRes; }function TIlITI1($ILlI11L) {$sql ="SELECT interface_module FROM cms_hst_res WHERE type='$ILlI11L' "; $this->db->query($sql); if($this->db->next_record()) {$mModule =$this->cms->Core->GetModule($this->db->Record[I10984]); if(is_object($mModule)) {$mModule->InitEngine($this->cms, $this->db); $mModule->Engine->side =$this->side; $mModule->Engine->realSide =$this->realSide; $mModule->Engine->TTTTlIl($this->TTTTlII()); $mModule->Engine->Init(); return $mModule; }}return false; }function TIlITlT($lI1lIlI, $lI1lIll, $lI1lIlL =I10909) {$sql="UPDATE cms_hst_subscription_res SET used_value = used_value$lI1lIlL WHERE id_subscription='$lI1lIlI' AND id_res='$lI1lIll'"; return $this->db->query($sql); }function TIlITlI($lI1lIlI, $lI1lIll) {$res =true; if ($lI1lIlI >0 && $lI1lIll >0) {$sql="select s.bound, s.used_value, r.subtype from cms_hst_subscription_res s left join cms_hst_res r on r.id=s.id_res WHERE id_subscription='$lI1lIlI' AND id_res='$lI1lIll'"; $lI1lIl1 =$this->db->select($sql); if ($lI1lIl1->nextRecord()) {$aRow =$lI1lIl1->Record; if ($aRow['subtype'] == 'on-off') {if ($aRow['bound'] >0) {$res =false; }}else {if (($aRow[I10985] -$aRow['used_value']) >0) {$res =false; }}}}return $res; }function TIlITll($lI1lILI, $lI1lILl) {$res =false; if($lI1lILI != 0 && $lI1lILl != 0) {$aSql =Array('id_res_master' => $lI1lILI, 'id_res_slave' => $lI1lILl); $sql =$this->db->GenInsertSQL('cms_hst_res_inst_dep', $aSql); $this->db->execute($sql); $res =$this->db->lastInsertId(); }return $res; }function TIlITl1() {$res =true; $lI1lILL =$this->TIlIT1I($this->lI1ILLl); if(count($lI1lILL)) {$lI1lIL1 =$this->lI1ILLl; $lI1lI1I =$this->res; foreach($lI1lILL as $lI1ILLl) {$this->lI1ILLl =$lI1ILLl; $this->res =false; $res =$this->TIlT1I1(true); $mModule =$this->TIlITI1($res->type); if($mModule) {$lI1lII1 =$mModule->Engine->TIlTllI($lI1ILLl); $mModule->Engine->lILILLl =false; $mModule->Engine->TTTlITT(I10973, $lI1lII1); if($lI1lII1) {if($mModule->Engine->IIlIIL1) {$lI1IILl =$mModule->Engine->TIlITIl($mModule->Engine->IIlIIL1, I10885); $mModule->Engine->lI1II1L[I10966] =$lI1IILl[I10966]; }$mModule->Engine->SetRedirect(false); $mModule->Engine->ProcessAction(I10986, $lI1lII1); if($mModule->Engine->errno) {$res =false; }}else {$res =false; }}}$this->lI1ILLl =$lI1lIL1; $this->res =$lI1lI1I; }return $res; }function TIlIT1T($lI1lI1l) {$lIL11L1 =Array(); $sql ="SELECT id_res_master FROM cms_hst_res_inst_dep WHERE id_res_slave='$lI1lI1l'"; $lI1Il1l =$this->db->getValue($sql); $res =intval($lI1Il1l); return $res; }function TIlIT1I($lI1lI1L) {$lIL11L1 =Array(); $sql ="SELECT id_res_slave FROM cms_hst_res_inst_dep WHERE id_res_master='$lI1lI1L'"; $this->db->query($sql); while ($this->db->next_record()) {$lIL11L1[] =$this->db->Record['id_res_slave']; }return $lIL11L1; }function TIlTllI($lI1ILLl) {$res =false; $this->browser->InitSQL($this->lI1IL1L.I10910, $this->tables, "WHERE ".$this->lI1IL1L.".id_res_inst='".$lI1ILLl.I10950.$this->_ApplyFilters(), I10983, I10929, "r.id desc" );$this->browser->ProcessSQL($this->db); if($this->db->next_record()) {$res =$this->db->Record[I10922]; }return $res; }function TIlIT1l($lI1lI11) {$sql ="DELETE FROM cms_hst_res_inst_dep WHERE id_res_slave='".$lI1lI11.I10950; $this->db->execute($sql); return true; }function TIlIT11($cId, $lI1IIIL) {$res =true; $lI1lILL =$this->TIlIT1I($this->lI1ILLl); $res =count($lI1lILL); if($res) {$lI1lIL1 =$this->lI1ILLl; $lI1lI1I =$this->res; $lI1IILI =$this->cms->Vars; $lI1IIl1 =$this->cms->VarsGet; $Ill1IlL =$this->cms->VarsPost; foreach($lI1lILL as $lI1ILLl) {$this->lI1ILLl =$lI1ILLl; $this->res =false; $res =$this->TIlT1I1(true); $lI1llII =Array('move_data' => $lI1IIIL); $this->cms->VarsPost =$lI1llII; $this->cms->VarsGet =Array(I10922 => $lI1ILLl); $mModule =$this->TIlITI1($res->type); if($mModule) {$lI1lII1 =$mModule->Engine->TIlTllI($lI1ILLl); if($lI1lII1) {$mModule->Engine->lILILLl =false; $mModule->Engine->TTTlITT(I10973, $lI1lII1); $mModule->Engine->lI1II1L =$this->TIlT1Il($lI1llIl); if($mModule->Engine->options[I10962]) {if($mModule->Engine->IIlIIL1) {$lI1IILl =$this->TIlITIl($mModule->Engine->IIlIIL1, I10885); if($lI1IILl) {$mModule->Engine->lI1II1L[I10966] =$lI1IILl[I10966]; }}}$mModule->Engine->SetRedirect(false); $mModule->Engine->ProcessAction('move', $lI1lII1); if($mModule->Engine->errno) {$this->cms->AddStatusMsg("status_move_depended_fail", I10944, "Engine error ".$mModule->Engine->error); $res =false; }}else {$this->cms->AddStatusMsg("status_move_depended_fail", I10944, "cannot find record (idInst=0)"); $res =false; }}}$this->cms->VarsPost =$Ill1IlL; $this->cms->VarsGet =$lI1IIl1; $this->cms->Vars =$lI1IILI; $this->lI1ILLl =$lI1lIL1; $this->res =$lI1lI1I; }return $res; }function TIlIITT($I1ILIII, $lI1llIL, $lI1llIl) {if ($this->TIlIITl($lI1llIL) && $this->TIlIITI($I1ILIII, $lI1llIl)) {return true; }return false; }function TIlIITI($I1ILIII, $lI1llIl, $lI1ILL1 =true) {if (!$this->TIlIITl($lI1llIl, $lI1ILL1)) {return false; }if($this->TIlITlI($lI1llIl, $I1ILIII)) {if($lI1ILL1) {$this->cms->AddStatusMsg("hst_status_bound_obtain", I10944); }return false; }return true; }function TIlTll1($cId, $lI1ILL1 =true) {if ($this->TTTTIIl()) {return true; }if ($this->TTTTlTI()) {$field ="id_member"; }if ($this->TTTTII1()) {$field =I10930; }$lIL11L1 =$this->TIlITII($cId); if($lIL11L1 == false) {return false; }$sql ="SELECT $field FROM cms_hst_res_inst WHERE id='".$lIL11L1['id_res_inst'].I10950; $idOwner =$this->db->getValue($sql); if($idOwner == $this->TTTTlII()) {return true; }if($lI1ILL1) {$this->cms->AddStatusMsg("status_resource_access_deny", I10944); }return false; }function TIlIITl($IIlIIl1, $lI1ILL1 =true) {if ($this->TTTTIIl()) {return true; }$field ="id_member"; if ($this->TTTTII1()) {$field =I10930; }$sql ="SELECT $field FROM cms_hst_subscription WHERE id='$IIlIIl1'"; $idOwner =$this->db->getValue($sql); if($idOwner == $this->TTTTlII()) {return true; }if($lI1ILL1) {$this->cms->AddStatusMsg("status_subscription_access_deny", I10944, I10983, $lI1llIl); }return false; }function TIlIIT1($state) {$lI1llI1 =array(I10943, 'half_blocked', 'blocked'); if(in_array($state, $lI1llI1)) {return true; }return false; }function TIlIIIT($lI1ILLl) {$sql ="select active_state from cms_hst_res_inst where id=".intval($lI1ILLl); $res =$this->db->getValue($sql); return $res; }function TIlIIII($aTypes =Array()) {$lIL111l =Array(); $types =I10909; if (is_array($aTypes) && count($aTypes)) {foreach ($aTypes as $type) {if ($types != I10909) {$types .= " or "; }$types .= "type='".$type.I10950; }}else {$types ="1"; }$sql ="select id, type from cms_hst_res where $types"; $lIL111l =Array(); $db=&$this->TTTlTIT(); $sel =$db->select($sql); while ($sel->nextRecord()) {$lIL111l[$sel->Record['type']] =$sel->Record[I10922]; }return $lIL111l; }}?>