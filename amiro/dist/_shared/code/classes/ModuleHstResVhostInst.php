<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    core 
 * @version    $Id$ 
 * @size       16656 xkqwmipzzymkswnyszwkmlkykxsirgipmtstxtlsriystrwgnyztxqixlznxgimnmipkpnir
 */ ?><?php foreach(array(11024=>"YQJHnPD|tH|vOHDt",11025=>'rHC|tQIGJZtQ',11026=>'::ZJMZD::',11027=>'Mn|JMDt',11028=>'rQZSHnJB',11029=>'DQJQWt',11030=>'|RQGJZWQTBGQcHrS',11031=>"?JMKQ?",11032=>"",11033=>'tBGQ',11034=>'MS|IQIYQr',11035=>'DuYSHIZMn',11036=>'SHIZMn',11037=>'tZrPQt|SHIZMn',11038=>"~",11039=>"`",11040=>'wjzddqd|gzTo',11041=>'SMDK|EuHtZ',11042=>'WID|ODt|uMS',11043=>'MS|vOHDt',11044=>'fMQJS|rQZSHnJB',11045=>"MS|DuYDWrMGtMHn",11046=>'SDt|DuYDWr|SZtZ',11047=>'r_v',11048=>'') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class ModuleHstResVhostInst extends ModuleHstResInst {public $lI1lll1; public $lI1llLI; function ModuleHstResVhostInst(&$cms, &$db, &$cModule) {$lI1lll1 =Array(); parent::ModuleHstResInst($cms, $db, $cModule); }function _Init($IIll1l1 =Array(), $IIll1LI ="", $IIll1Ll ="", $aOptions =Array()) {$IIIIL11 =array(); $IIIIL11[I11024] =false; $aOptions += $IIIIL11; parent::_Init($IIll1l1, $IIll1LI, $IIll1Ll, $aOptions); }function _InitAdmin() {parent::_InitAdmin(); $lI1llLl =array('name' => 'domain', 'in_list' => true, 'is_required' => true, I11025 => 'row_domain', );$aTypes =Array('common' => '%%common%%', 'alias' => I11026, 'subdomain' => '%%subdomain%%'); $this->lI1llLI =$aTypes; $this->TIlITIT($lI1llLl); $lI1llLL =array('name' => 'target_domain', I11027 => true, 'style' => 'width: 150px;', 'class' => 'field_readonly', I11028 => true, I11025 => 'row_target_domain', );$lI1llL1 =array('name' => 'type', I11027 => true, 'type' => I11029, 'values' => $aTypes, 'actions' => 'onChange="javascript:onTypeChange(this.value);"', 'callback' => I11030, );$this->TIlITIT($lI1llLL); $this->TIlITIT($lI1llL1); }function &TTTlI1I(&$aData) {parent::TTTlI1I($aData); }function TTTlIII() {parent::TTTlIII(); $this->filter->AddField("flt_domain", "text", stripslashes(unhtmlentities($this->cms->Vars["flt_domain"])), "", I11031, "v.domain"); $this->filter->AddField("flt_target_domain", "text", stripslashes(unhtmlentities($this->cms->Vars["flt_target_domain"])), I11032, I11031, "v.target_domain"); }function TTTlI11(&$vData, &$aCustom) {parent::TTTlI11($vData, $aCustom); }function TTT1IlI($aSql =Array(), $cId =0) {$this->cms->VarsPost['type'] =$this->TIlIII1($this->cms->VarsPost['type']); $this->cms->VarsPost['target_domain'] =$this->TIlIIlT($this->cms->VarsPost[I11033], $this->cms->VarsPost['target_domain'], intval($this->cms->VarsPost['new_subs'])); $aSql =parent::TTT1IlI($aSql, $cId); $lI1IL1l =$this->TIlT1Il($aSql['id_subscription']); $aSql['id_client'] =$lI1IL1l[I11034]; $aSql['id_reseller'] =$lI1IL1l['id_reseller']; $aSql['has_dns'] =$this->TIlIIll($aSql['id_subscription']); if (($aSql[I11033] == I11035 || $aSql[I11033] == 'alias') && mb_substr($aSql['domain'], -mb_strlen($aSql['target_domain'])) != $aSql['target_domain']) {if(mb_substr($aSql[I11036], -1) != '.') {$aSql[I11036] .= "."; }$aSql[I11036] .= $aSql['target_domain']; }if ($this->cms->VarsPost['id']) {unset($aSql[I11036]); unset($aSql[I11033]); unset($aSql[I11037]); }$docRoot =''; $lIL11Ll =$this->TIlITTI('Vhost', 'create'); if(is_array($lIL11Ll[0])) {$docRoot =$lIL11Ll[0]['path'].I11038; }$aSql += array('docroot' => $docRoot); return $aSql; }function TIlTI11() {$args =parent::TIlTI11(); $args[I11033] =$this->TIlIII1($args[I11033]); $args[I11037] =$this->TIlIIlT($args[I11033], $args[I11037], intval($this->cms->VarsPost['new_subs'])); if (($args[I11033] == I11035 || $args[I11033] == 'alias') && mb_substr($args[I11036], -mb_strlen($args[I11037])) != $args[I11037]) {if(mb_substr($args[I11036], -1) != '.') {$args[I11036] .= I11039; }$args[I11036] .= $args[I11037]; }if($this->lI1ILLl) {$args[I11036] =$args['old_domain']; $args[I11033] =$args['old_type']; $args[I11037] =$args['old_target_domain']; }if ($this->action == "add") {require_once $GLOBALS[I11040] .'ClanNode.php'; $node =&ClanNode::getBySubscr($this->TIlT1IT()); $args['default_ip'] =$node->defaultIP(); }$args['max_mboxes'] =$this->module->GetOption("default_max_mboxes"); $args[I11041] =$this->module->GetOption("default_mail_domain_disk_quota"); $args['add_footer'] =$this->module->GetOption("add_footer"); return $args; }function TTTll11($cId, $cModule) {$res =parent::TTTll11($cId, $cModule); if($res) {$sql ="SELECT m.uid, m.id FROM cms_members m INNER JOIN cms_hst_res_vhost_inst v ON v.id_client=m.id WHERE v.id = ".$this->appliedId; $rec =$this->db->getRecord($sql); $sql =$this->db->GenInsertSQL(I11042, array('uid' => $rec['uid'], 'id_client' => $rec['id'], I11043 => $this->appliedId)); $this->db->execute($sql); }}function TTTl1Tl($cId, $cModule) {if(parent::TTTl1Tl($cId, $cModule)) {$lIL11L1 =$this->TIlITII($cId); if($this->lI1ILLl) {$this->fields[I11036][I11028] =true; $this->fields[I11036]['class'] ='field_readonly'; $this->fields[I11037][I11033] ='text'; $this->fields[I11037][I11028] =true; $this->fields[I11037]['class'] =I11044; $this->fields[I11037][I11025] ='row'; $this->fields[I11033][I11033] ='text'; $this->fields[I11033][I11028] =true; $this->fields[I11033]['class'] =I11044; $this->fields[I11033][I11025] ='row'; }}}function _ActionDel($cId, $cModule) {$res =parent::_ActionDel($cId, $cModule); if($res) {$sql ="SELECT m.uid, m.id FROM cms_members m INNER JOIN cms_hst_res_vhost_inst v ON v.id_client=m.id WHERE v.id = $cId"; $rec =$this->db->getRecord($sql); $sql ="DELETE FROM cms_hst_uid WHERE id_client='".$rec['id']."' AND uid='".$rec['uid']."'"; $this->db->execute($sql); }}function TIlTI1l($cId, $lI1IIIL) {$aSql =array( I11045 => $lI1IIIL['id_subscription_to'], "id_client" => $lI1IIIL['dst_subscr_data'][I11034], "id_reseller" => $lI1IIIL[I11046]['id_reseller'], );$sql =$this->db->GenUpdateSQL('cms_hst_res_vhost_inst', $aSql, "WHERE id=$cId"); if($this->db->execute($sql)) {$res =true; }else {$res =false; }return $res; }function TIlTlTT() {$lI1IIlL =array( 'tables'=>Array('v' => 'cms_hst_res_vhost_inst'), 'joins'=>Array('r|v'=>'v.id_res_inst=r.id'), 'joins_types'=>Array(I11047=>'INNER') );return $lI1IIlL; }function _ReplaceTypeWord(&$vItem, &$vData) {$vItem[I11033] =$this->words[$vItem[I11033]]; }function TIlIII1($type) {$types =array_keys($this->lI1llLI); if(!in_array($type, $types)) {$type =$types[0]; }return $type; }function TIlIIlT($type, $domain, $IIlIIl1) {if ($type == 'common') {$domain =''; }return $domain; if (!count($this->lI1lll1)) {$sql ="SELECT SQL_CALC_FOUND_ROWS v.domain FROM cms_hst_res_vhost_inst v INNER JOIN cms_hst_res_inst r ON r.id=v.id_res_inst INNER JOIN cms_hst_subscription s ON v.id_subscription=s.id WHERE v.id_subscription=$IIlIIl1 and v.type='common'"; if($dbrs =&$this->db->select($sql)) {while($dbrs->nextRecord()){ $this->lI1lll1[] =$dbrs->Record[I11036]; }}}if (is_array($this->lI1lll1) && count($this->lI1lll1)) {if(!in_array($domain, $this->lI1lll1)) {$domain =''; }}else {$domain =I11048; }}function TIlIIlI(&$db, $lI1I111) {$sql ="select sr.bound from cms_hst_res r INNER JOIN cms_hst_subscription_res sr ON sr.id_res = r.id WHERE r.type='dns' AND sr.id_subscription = '$lI1I111'"; return $db->GetValue($sql); }function TIlIIll($lI1I111) {return $this->TIlIIlI($this->db, $lI1I111); }function TIlIIl1($db, $III111I) {$III1LLI =array(); $sql ="SELECT domain FROM cms_hst_res_vhost_inst where id_subscription=$III111I and type='common' and status = 'active'"; $db->query($sql); while($db->next_record()){ $III1LLI[] =$db->Record[I11036]; }return $III1LLI; }}?>