<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @package    core 
 * @version    $Id$ 
 * @size       12310 xkqwmwmiznwryimqqmnwwuqpqlrkylypnngnuisminwliyrnitzlmgqltiwtlursziulpnir
 */ ?><?php foreach(array(11663=>'zSIiHSuJQ`GOG',11664=>'iYHxwJMQnt`GOG',11665=>"ZJJHCQS|ZWtMHnD",11666=>"JZnP|SZtZ",11667=>"WrQZtMHn|SZtQ",11668=>'ZWtMHn',11669=>'DOHC|fHrI',11670=>'ZJMZD|tBGQ|MtQI',11671=>"FRhi?WID|nH|tZYJQ?",11672=>'HYLQWt',11673=>"JQPQnS",11674=>"fHrI|SZtZ",11675=>'JHC|EuHtZ',11676=>'ZJMZD|',11677=>'WrQZtMHn|SZtQ',11678=>'QIZMJ',11679=>"SMDK|EuHtZ",11680=>'ZJMZD',11681=>'SMDK|EuHtZ',11682=>'SMDZYJQ|QrrHr|IZMJ',11683=>'MS',11684=>'DQJQWtQS',11685=>'YJuQ',11686=>'GZDDCS',11687=>'IYHx|uGSZtQ|fZMJQS') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .I11663; require_once $GLOBALS['CLASSES_PATH'] .I11664; require_once $GLOBALS['CLASSES_PATH'] .'CMS_IteratorArray.php'; class ModuleMailManage extends AdmModule {public $domain; public $lI11l1I; public $lILL11l; function ModuleMailManage(&$cms, &$db, &$cModule) {parent::AdmModule($cms,$db,$cModule); }function _Init($IIll1l1 =Array(), $IIll1LI ="", $IIll1Ll ="", $aOptions =Array()) {$IIIIL11[I11665] =Array("add", "edit", "apply", "del"); $IIIIL11[I11666] =false; $aOptions += $IIIIL11; parent::_Init($IIll1l1, $IIll1LI, $IIll1Ll, $aOptions); }function _InitAdmin() {parent::_InitAdmin(); $this->domain =$this->TTTTIlT(); $this->lI11l1I =true; $this->cms->Gui->addGlobalVars(array('show_size'=>$this->lI11l1I?1:0)); $this->lILL11l =&MboxClient::TT1I1Il($this->domain); if ($this->lILL11l !== null) {$this->lILL11l->TI1TllI(false); $this->lILL11l->useDomain($this->domain); }}function GetHtml(&$aCustom) {$ret =parent::GetHtml($aCustom); $this->lILL11l->TI1Tlll(); return $ret; }function TTlTll1() {parent::TTlTll1(); }function TTTlIII() {parent::TTTlIII(); $this->filter->UpdateFieldDBName("dateto", "creation_date"); $this->filter->UpdateFieldDBName("datefrom", I11667); }function _ApplyFilters($prefix ='', $bodyType ='', $IIlLLl1 =true) {$res =parent::_ApplyFilters($prefix, $bodyType, $IIlLLl1); return $res; }function &TTTlI1T(&$aCustom) {return parent::TTTlI1T($aCustom); }function TIllI1I() {$this->cms->addStatusMsg('server_error','red'); }function TTTlI1I(&$vData) {if($vData[I11668]=='add') {if(!is_array($lILL11L=$this->lILL11l->domainInfo())) {$this->TIllI1I(); trigger_error("Cannot get domain info from mboxd, domain=$this->domain: ". $this->lILL11l->errorsAsString(),E_USER_WARNING); $cnt =1; $max =0; }else {$cnt =$lILL11L['count']; $max =$lILL11L['max_mboxes']; }if($cnt<$max) {$this->words['srv_host_mailmanage_add'] =$this->words['srv_host_mailmanage_add']." $max )"; $vData['show_form'] ='yes'; }else {$this->words['srv_host_mailmanage_add'] =$this->words['mbox_limit_reached']." ($max)"; $vData[I11669] ='no'; }$vData['domain'] =$this->domain; $tmp =array(); $gui =&$this->cms->Gui; $vData['local_part'] =$gui->get("srv_host_mailmanage_subform:local_part_input", $tmp); $vData[I11670] =$gui->get("srv_host_mailmanage_subform:alias_type_selectbox", $tmp); }parent::TTTlI1I($vData); }function &TTTlTIT() {$lI11l1l =$this->lILL11l->listMailboxes($this->lI11l1I); if($lI11l1l===false) {$lI11l1l =array(); $this->TIllI1I(); trigger_error("Cannot get mailboxes list from mboxd, domain=$this->domain: ". $this->lILL11l->errorsAsString(),E_USER_WARNING); }$ia =new CMS_IteratorArray($this->module); $ia->SetArray($lI11l1l); return $ia; }function TTTlI11(&$vData, &$aCustom) {require_once($GLOBALS["FUNC_INCLUDES_PATH"]."func_gui.php"); $this->browser->InitSQL("id", I11671, "WHERE 1 " );$aCustom["fields"] += Array( 'local_part'=>array(I11668=>'callback',I11672=>&$this,'method'=>'CBRow') );$aCustom["applied_id"] ="id"; $aCustom[I11673] =Array("leg_yellow", "leg_blue", "leg_edit", "leg_del"); $aCustom[I11674]["buttons"] =Array("add", "apply", "cancel"); parent::TTTlI11($vData, $aCustom); }function CBRow(&$aItem,&$aData) {$aItem[I11675] =0; if ($aItem['alias_type'] == 'none' and $aItem['disk_quota'] <1024) {$aItem[I11675] =1; }$aItem['alias_type'] =$this->words[I11676.$aItem['alias_type']]; $aItem['email'] =$aItem['local_part'].'@'.$this->domain; $aItem[I11677] =date($this->cms->DFMT["php"],$aItem[I11677]); $tmp["edit_id"] =$tmp["del_id"] =$aItem['id']; $tmp[I11678] =$aItem[I11678]; $actions =$this->cms->Gui->get("srv_host_mailmanage_list:icons_mailmanage", $tmp); $aItem['size'] =getBytesAsText($aItem["size"]*1024, $this->words, 2, 2); $aItem['disk_quota'] =getBytesAsText($aItem[I11679]*1024, $this->words, 2, 2); $aItem['actions'] =$actions; $aItem['alias'] =implode("<br>",explode(",",$aItem[I11680])); }function TTTlITT($IIIL11l, $cId, $cModule ="") {if($IIIL11l=='purge') $this->TIlTl1T($cId); else parent::TTTlITT($IIIL11l, $cId, $cModule); }function TTTll11($cId, $cModule) {parent::TTTll11($cId, $cModule); $this->cms->ClearMessages(); $local =$this->cms->VarsPost['local_part']; $passwd =$this->cms->VarsPost['passwd']; $lI11l1L =$this->cms->VarsPost[I11681]; if ($lI11l1L != '') $lI11l1L =$this->cms->VarsPost[I11681]*1024; $p =array( I11680=>$this->cms->VarsPost[I11680], 'alias_type'=>$this->cms->VarsPost['alias_type'], I11681=>$lI11l1L );if($this->lILL11l->createMailbox($local,$passwd,$p)===false) {AMI_Registry::push('disable_error_mail', true); trigger_error("Cannot create mailbox, $local@$this->domain: ". $this->lILL11l->errorsAsString(), E_USER_WARNING); AMI_Registry::pop(I11682); $this->cms->AddStatusMsg('mbox_creation_failed','red'); }else {$this->cms->AddStatusMsg('mbox_creation_ok','blue'); }}function TTTl1Tl($cId, $cModule) {parent::TTTl1Tl($cId, $cModule); if(($lI11l11=$this->lILL11l->mailboxInfo($cId))===false) trigger_error("Cannot get mailbox info from mboxd, domain=$this->domain, id=$cId: ". $this->lILL11l->errorsAsString(),E_USER_ERROR); $this->itemData[I11683] =$cId; $this->itemData['local_part'] =$lI11l11['local_part']; $this->itemData['domain'] =$this->domain; $this->itemData[I11677] =$lI11l11[I11677]; $tmp[I11676.$lI11l11['alias_type']] =I11684; $this->itemData[I11670] =$this->cms->Gui->get('srv_host_mailmanage_subform:alias_type_selectbox',$tmp); $this->itemData[I11680] =$lI11l11[I11680]; $this->itemData[I11681] =round ($lI11l11[I11681] /1024); }function _ActionDel($cId, $cModule) {$this->cms->ClearMessages(); if($this->lILL11l->deleteMailbox($cId)===false) {$this->cms->AddStatusMsg('mbox_deletion_failed','red'); trigger_error("Cannot delete mailbox, domain=$this->domain, id=$cId: ". $this->lILL11l->errorsAsString(),E_USER_WARNING); }else {$this->cms->AddStatusMsg('mbox_deletion_ok',I11685); }}function TIlTl1T($cId) {$this->cms->ClearMessages(); if($this->lILL11l->purgeMailbox($cId)===false) {$this->cms->AddStatusMsg('mbox_purge_failed','red'); trigger_error("Cannot purge mailbox, domain=$this->domain, id=$cId: ". $this->lILL11l->errorsAsString(),E_USER_WARNING); }else {$this->cms->AddStatusMsg('mbox_purge_ok',I11685); }}function TTTl1lI($cId, $cModule) {parent::TTTl1lI($cId, $cModule); $this->cms->ClearMessages(); $lI11LII =''; if(isset($this->cms->VarsPost[I11686])) $lI11LII =stripslashes($this->cms->VarsPost[I11686]); $lI11l1L =$this->cms->VarsPost[I11681]; if ($lI11l1L != '') $lI11l1L =$this->cms->VarsPost[I11681]*1024; $p =array( 'password'=>$lI11LII, I11680=>$this->cms->VarsPost[I11680], 'alias_type'=>$this->cms->VarsPost['alias_type'], I11681=>$lI11l1L );if($this->lILL11l->updateMailbox($cId,$p)===false) {trigger_error("Cannot update mailbox, domain=$this->domain, id=$cId: ". $this->lILL11l->errorsAsString(),E_USER_WARNING); $this->cms->AddStatusMsg(I11687,'red'); }else {$this->cms->AddStatusMsg('mbox_update_ok',I11685); }}function TTT1IlI($aSql =Array(), $cId =0) {$aSql =parent::TTT1IlI($aSql, $cId); return $aSql; }}?>