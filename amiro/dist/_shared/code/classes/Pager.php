<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       43242 xkqwtqnxlxlttwllglyrpnqrxpkxkgxtxrkkkupywlziwmimtgxgzyswwmpgmiqrwxsypnir
 */ ?><?php foreach(array(13580=>'',13581=>"fMrDt",13582=>"GZPQ|tGJ",13583=>"DGZWQr",13584=>"tZGQ",13585=>"",13586=>"?",13587=>'!?',13588=>"tBGQ",13589=>"GZPQnuI",13590=>"nQxt",13591=>"GZPQ|QnS",13592=>"|DtZrt",13593=>"GZPQ",13594=>"%DGZWQr",13595=>"ZWtMvQ",13596=>"GZPQ|DMAQ",13597=>"DEJ|frHI|tZYJQD",13598=>"HrSQr|fMQJS",13599=>"LHMnQS|tZYJQD",13600=>'fHrWQ|PrHuG|YB',13601=>'?pRhUg?yb?',13602=>'WZJW|HGtMHnD',13603=>"fHrWQ|HrSQr",13604=>"DEJ|frHI",13605=>"`",13606=>"WZJWuJZtMnP",13607=>"PrHuGMnP|fMQJS",13608=>"PrHuGMnP",13609=>"JMIMt",13610=>'FRhi?',13611=>'?',13612=>'DEJ|frHI|tZYJQD',13613=>'LHMnD|tBGQD',13614=>'?lhmN?',13615=>'HrSQr',13616=>'HGtMIMAZtMHn',13617=>'`',13618=>"HrSQr|ZSSHn",13619=>"vZJuQ",13620=>"DEJ|fMQJSD",13621=>"HrSQr|rQGJZWQ",13622=>'#',13623=>'vZJuQ',13624=>"'?",13625=>"PrHuG|YB",13626=>'HrSQr|DEJ',13627=>'v5|Hn|PQt|JMDt|DEJ',13628=>"fHrWQ|JMIMt") as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} define("_DB_NONE", 0x0); define("_DB_STRAIGHT_JOIN", 0x1); class Pager {const DB_NO_CALC_FOUND_ROWS =0x2; public $cms; public $SortCol; public $SortDim; public $Icons; public $lllL11l; public $PageSize; public $lllL11L; public $MaxCount; public $Position; public $TapePosition; public $ShowPageSizeBox; public $lllL111; public $lll1III; public $lll1IIl; public $lll1IIL; public $lll1II1; public $mode; public $currentItemOffset; public $lll1IlI; public $lll1Ill; public $lll1IlL; public $forceViewEndLink; public $blockName; public $SQLData; private $setPostfix =I13580; private $lll1Il1 =0; function Pager(&$oCms) {$this->cms =&$oCms; $this->mode ="page"; $this->lll1III =false; $this->ShowPageSizeBox =false; $this->lllL11l =true; $this->lllL111 ="=5|10|15|25|50|75|100"; $this->SortCol ="date"; $this->SortDim ="desc"; $this->PageSize =10; $this->lllL11L =19; $this->MaxCount =0; $this->Position =0; $this->TapePosition =0; $this->lll1IIl =0; $this->Icons =Array( I13581 => "<a href=\"[LINK]\">|+&laquo;</a>", "last" => "<a href=\"[LINK]\">&raquo;|</a>", "prev" => "<a href=\"[LINK]\">&laquo;</a>", "next" => "<a href=\"[LINK]\">&raquo;</a>", "active" => "<b>[PAGE]</b>", I13582 => "[PAGE]", "page" => "<a href=\"[LINK]\">[PAGE]</a>", "page_size_row" => "<option value=\"[VALUE]\" [ACTIVE]>[CAPTION]</option>", "page_size" => "Items on Page: <select name=limit class=filter>[DATA]</select>", "body" => "[BODY]", I13583 => "&nbsp;"); $this->lll1IIL =false; $this->SQLData =array('sql_fields' => I13580); $this->IsVarApplied =false; $this->InitPageSizeBox($this->lllL111); $this->currentItemOffset =0; $this->lll1IlI =false; $this->lll1Ill =false; $this->lll1IlL =false; $this->forceViewEndLink =false; $this->blockName ="_pager"; }function SetMode($mode) {if ($mode == "tape") {$this->mode =I13584; }else {$this->mode ="page"; }}function TI1TTIl($IIl11Ll ="") {return empty($this->SortCol) ?$IIl11Ll :$this->SortCol; }function TI1TTI1($lll1ILI ="") {return empty($this->SortDim) ?$lll1ILI :$this->SortDim; }function TI1TTlT($IIl11Ll ="", $lll1ILl =I13585) {$sql =I13585; if (!empty($lll1ILl)) $lll1ILl.= "."; $lll1ILL =$this->TI1TTIl($IIl11Ll); $lll1IL1 =$lll1ILL; $aCustomData =array( 'column' => &$lll1ILL, 'direction' => &$this->SortDim );EventApplyVars($this, "prepareSortFieldForSQL", $aCustomData); $sql =($lll1IL1 == $lll1ILL ?$lll1ILl :I13580) .$lll1ILL; if (!(empty($sql) || empty($this->SortDim))) {$sql .= I13586 .$this->SortDim; }return $sql; }function TI1TTlI() {$sql =I13585; if ($this->lll1IIl <= 0) {if ($this->Position >0) {$sql ="limit " .$this->Position; }else {$sql =I13585; }if ($this->PageSize >0) {if (empty($sql)) {$sql ="limit " .$this->PageSize; }else {$sql .= ", " .$this->PageSize; }}}else {$lll1I1I =max(0, $this->Position) -$this->lll1IIl; if ($lll1I1I >= 0) {$PageSize =$this->PageSize; }elseif ($lll1I1I +$this->PageSize >0) {$PageSize =$lll1I1I +$this->PageSize; $lll1I1I =0; }else {$lll1I1I =0; $PageSize =0; }$sql ='limit ' .$lll1I1I .I13587 .$PageSize; }return $sql; }function TI1TTll() {$position =-1; if ($this->lll1IIl <= 0) {if ($this->Position >0) {$position =0; }if ($this->PageSize >0) {if ($position == -1) {$position =0; }else {$position =$this->Position; }}}else {$lll1I1I =max(0, $this->Position) -$this->lll1IIl; if ($lll1I1I <0) {$lll1I1I =0; }$position =$lll1I1I; }return $position +1; }function TI1TTl1() {return max(min($this->TI1TTll() +$this->PageSize -1, $this->MaxCount), 0); }function TI1TT1T($offset) {$offset =(int)preg_replace('/\D/', I13580); if($offset <0){ $offset =0; }$this->lll1IIl =$offset; }function InitPager($lll1I1l, $cPageSize, $lll1I1L =0) {if (isset($cPageSize) && $cPageSize == -1) {$this->lll1III =true; }$lll1I11 =intval($cPageSize); if (!isset($lll1I1l) || $lll1I1l <0) $lll1I1l =0; if (!isset($cPageSize) || $lll1I11 <= 0) $lll1I11 =10; $this->Position =$lll1I1l; $this->PageSize =$lll1I11; $this->MaxCount =$lll1I1L; return true; }function getPagesCount() {$res =1; if ($this->PageSize >0) {$res =ceil($this->MaxCount /$this->PageSize); }return $res; }function getActivePage() {$res =1; if ($this->PageSize >0) {$res =intval(($this->Position )/$this->PageSize); }return $res; }function GetPager() {$lll1lII =Array(); if ($this->MaxCount <= $this->PageSize) return $lll1lII; if ($this->PageSize == 0) return $lll1lII; $pagesCount =$this->getPagesCount(); $activePage =$this->getActivePage(); $visPagesCount =min(ceil($this->MaxCount /$this->PageSize), $this->lllL11L); $visMiddle =ceil($visPagesCount /2); $visStartPage =0; $visEndPage =-1; if ($activePage >= ($visStartPage +$visMiddle)) {$visStartPage =$activePage -$visMiddle +1; }if ($visStartPage +$visPagesCount >$pagesCount) $visStartPage =$pagesCount -$visPagesCount; $tapePosition =0; $forceViewStartLink =false; $forceViewEndLink =$this->forceViewEndLink; if ($this->mode == I13584) {if ($this->TapePosition >0) {$itemPosition =$this->Position %$this->PageSize; if ($this->Position >= $this->TapePosition) {$forceViewStartLink =true; }if (($this->MaxCount -$this->Position) >$this->TapePosition) {$forceViewEndLink =true; $endLinkOffset =$this->MaxCount -1; }if ($this->currentItemOffset <$this->TapePosition -1) {$tapePosition =$this->TapePosition -1; }else {$itemPosition =$this->Position %$this->PageSize; if ($this->Position <$this->PageSize) {$tapePosition =$this->TapePosition -1 +max(0, ($itemPosition -$this->TapePosition +1)); }else {$tapePosition =$itemPosition; }}}else {$tapePosition =$this->currentItemOffset; $endLinkOffset =$this->MaxCount -1; }}else {$endLinkOffset =min($this->MaxCount -1, ($pagesCount -1) *$this->PageSize +$tapePosition); }if ($forceViewStartLink || ($this->lllL11l && $activePage >0 && $visStartPage >0)) {$lll1lII[] =Array("type" => I13581, "pagenum" => 1, "start" => 0); }if (($activePage >0)) $lll1lII[] =Array(I13588 => "prev", "pagenum" => I13585, "start" => (($activePage -1) *$this->PageSize +$tapePosition)); for ($i =$visStartPage; $i <($visStartPage +$visPagesCount); $i++) {$startOffset =min($this->MaxCount -1, $i *$this->PageSize +$tapePosition); if ($i == $activePage) {$lll1lII[] =Array(I13588 => "active", I13589 => ($i +1), "start" => I13585, "_start" => $startOffset); }else {$lll1lII[] =Array(I13588 => "page", I13589 => ($i +1), "start" => $startOffset); }}$visEndPage =$i; if ($activePage != ($pagesCount -1)) {$startOffset =min($this->MaxCount -1, ($activePage +1) *$this->PageSize +$tapePosition); $lll1lII[] =Array(I13588 => I13590, I13589 => I13585, "start" => $startOffset); }if ($forceViewEndLink || ($this->lllL11l && ($activePage <($pagesCount -1)) && ($visEndPage <$pagesCount))) {$lll1lII[] =Array(I13588 => "last", I13589 => $pagesCount, "start" => $endLinkOffset); }if ($this->lll1Ill && $this->mode != I13584) {foreach ($lll1lII as $key => $val) {$lll1lII[$key]["page_start"] =($val[I13589] -1) *$this->PageSize +1; $lll1lII[$key][I13591] =min($val[I13589] *$this->PageSize, $this->MaxCount); }}return $lll1lII; }function TI1TT1I($lll1lIl =true, $correctPosition =true) {if ($this->PageSize == 0) return $this->Position =0; if ($lll1lIl && $this->Position >= $this->MaxCount) $this->Position =$this->MaxCount -1; if ($this->Position <0) $this->Position =0; if ($correctPosition) {$this->Position =floor($this->Position /$this->PageSize) *$this->PageSize; }return $this->Position; }function TI1TT1l(&$lll1lIL, $IIl11Ll, $cId) {$res =0; while ($lll1lIL->next_record()) {if ($lll1lIL->Record[$IIl11Ll] == $cId) break; $res++; }return $res; }function InitPageSizeBox($cOptionsList) {$aList =array(); $lll1lI1 =explode("|", $cOptionsList); foreach ($lll1lI1 as $key => $value) {if (mb_strpos($value, "=") === 0) {$value =intval(mb_substr($value, 1)); if ($this->lll1III) {$this->PageSize =$value; $res =$value; }}$aList[$key] =intval($value); }if ($this->PageSize <0) $this->PageSize =10; $this->lll1III =false; $this->lllL111 =$aList; return $this->PageSize; }public function TI1TT11($postfix) {$this->setPostfix =(string) $postfix; }private function getSet($name, $aVars, $value =I13585, $cLang =false) {return $this->setPostfix === I13580 ?$this->cms->Gui->get($name, $aVars, $value, $cLang) :$this->cms->Gui->getDefPostf($name, $this->setPostfix, $aVars, $value, $cLang); }function GetPagerHtml($III1l11, $cLinkHtml =I13585) {$pager =I13585; $activePageLink =I13585; $aPagerData =Array(); $isAfterActive =false; foreach ($III1l11 as $item) {if ($item[I13588] == "active") {$activePageLink =str_replace("[START]", $item[I13592], $cLinkHtml); $isAfterActive =true; }if (isset($item["page_start"])) {$page =$this->getSet($this->blockName .":page_tpl", $item); }else {$page =$item[I13589]; }$cLinkHtmlReady =str_replace("[START]", $item["start"], $cLinkHtml); $aData =Array(I13593 => $page, "link" => $cLinkHtmlReady, "start" => $item["start"]); $sitem =$this->getSet($this->blockName .":" .$item[I13588], $aData); $spacer =$this->getSet($this->blockName .I13594, $aData); if (!empty($pager)) {$pager .= $spacer; }$pager .= $sitem; if ($item[I13588] == I13593) {$varName =$isAfterActive ?"page_after_active" :"page_before_active"; }else {$varName =$item[I13588]; }if (isset($aPagerData[$varName])) {$aPagerData[$varName] .= $spacer .$sitem; }else {$aPagerData[$varName] =$sitem; }}$lll1llI =I13585; $aEvent =array( 'enabled' => &$this->ShowPageSizeBox, 'aPageSizes' => &$this->lllL111 );AMI_Event::fire('v5_on_show_page_size', $aEvent, AMI_Event::MOD_ANY); sort($this->lllL111); $this->lllL111 =array_unique($this->lllL111); if ($this->ShowPageSizeBox) {$lll1lll =I13585; foreach ($this->lllL111 as $name => $value) {$active =I13585; if ($value == $this->PageSize) {$active ="selected"; }$lll1llL =$this->getSet($this->blockName .":page_size_row", Array("value" => $value, "caption" => $value, I13595 => $active)); $lll1lll .= $lll1llL; }$lll1llI =$this->getSet($this->blockName .":page_size", Array("data" => $lll1lll, "link" => $activePageLink)); }$aPagerData["body"] =$pager; $aPagerData[I13596] =$lll1llI; if ($this->cms->Gui->issetSet($this->blockName .':body') && $this->getPagesCount() >1) {$pager =$this->getSet($this->blockName .':body', $aPagerData); }else {$pager =$this->getSet($this->blockName, $aPagerData); }return $pager; }function InitSQL($cSQLFields, $cSQLFrom, $cSQLFilter, $cGroupBy =I13585, $cOrderField =I13585, $cOrderAddOn =I13585, $cOrderReplace =Array(), $cOptions =_DB_NONE) {if (is_array($cSQLFrom)) {$this->SQLData["sql_from_tables"] =$cSQLFrom; $this->SQLData["sql_from"] =$this->TI1TIT1(array_keys($this->SQLData[I13597]['tables'])); }else {$this->SQLData[I13597] =Array(); $this->SQLData["sql_from"] =$cSQLFrom; }$this->SQLData["sql_fields"] =$cSQLFields; $this->SQLData["sql_filter"] =$cSQLFilter; $this->SQLData[I13598] =$cOrderField; $this->SQLData["order_addon"] =$cOrderAddOn; $this->SQLData["options"] =$cOptions; $this->SQLData["order_replace"] =$cOrderReplace; $this->SQLData["default_prefix"] =I13580; $this->SQLData[I13599] =Array(); $this->SQLData["order_col"] =I13580; $this->SQLData["order_col_pref"] =I13580; $this->SQLData["force_order"] =I13580; $this->SQLData["force_limit"] =I13580; $IlL11Il =empty($this->SQLData[I13600]) ?array() :(array) $this->SQLData[I13600]; if (!empty($cGroupBy)) {$IlL11Il[] =$cGroupBy; }$this->SQLData["group_by"] =implode(",", $IlL11Il); if (!empty($this->SQLData["group_by"])) {$this->SQLData["group_by"] =I13601 .$this->SQLData["group_by"]; }if (empty($this->SQLData['calculating'])) {$this->SQLData['calculating'] =array(); }$this->SQLData["calc_options"] =empty($this->SQLData[I13602]) ?array() :(array) $this->SQLData[I13602]; if (empty($this->SQLData["grouping"])) {$this->SQLData["grouping"] =Array(); }else {$this->SQLData["force_order"] =I13580; foreach ($this->SQLData["grouping"] as $field => $aGrouping) {if ($field !== I13585) {$this->SQLData[I13603] .= $field .I13586 .$aGrouping["sort_order"] .","; }}if ($this->SQLData[I13603] != I13580) {$this->SQLData[I13603] ='ORDER BY ' .mb_substr($this->SQLData[I13603], 0, -1); }}if (!preg_match('/\\bjoin\\b/i', $this->SQLData[I13604])) $this->TI1TIII(); $this->lll1IIL =true; return true; }function TI1TITT($lll1ll1 =Array(), $lll1lLI =Array(), $cGroupBy =I13585, $lll1lLl =Array()) {if (empty($lll1ll1) && empty($lll1lLI)) {return; }$this->SQLData["force_group_by"] =Array($cGroupBy); $this->SQLData["calc_options"] =$lll1lLl +Array("decimal_digits" => 2, "decimal" => I13605, "thousand" => I13585); $this->SQLData["grouping"][I13585] =Array(); $this->SQLData["grouping"] += $lll1lLI; $this->SQLData["calculating"] =Array(); foreach ($lll1ll1 as $lll1lLL) {if (!is_array($this->SQLData[I13606][$lll1lLL["grouping_field"]]["calc"])) {$this->SQLData[I13606][$lll1lLL["grouping_field"]]["calc"] =Array(); }if (array_key_exists($lll1lLL[I13607], $this->SQLData["grouping"])) {$this->SQLData[I13606][$lll1lLL[I13607]]["calc"][$lll1lLL["field"]][$lll1lLL["method"]] =0; }}}function TI1TITI() {$this->SQLData[I13606] =Array(); $this->SQLData[I13608] =Array(); }function TI1TITl($cSQLFields) {if (!empty($cSQLFields)) {$this->SQLData["sql_fields"] .= "," .$cSQLFields; }}function SetForceRules($cOrder =I13580, $cLimit =I13580, $force =false) {if (!empty($this->SQLData[I13608])) {trigger_error("Illegal force ordering in 'grouping' mode", E_USER_ERROR); }$aRes =Array("order" => I13585, I13609 => I13585); if ($force || !empty($cOrder)) {$aRes["order"] =$this->SQLData[I13603]; $this->SQLData[I13603] =$cOrder; }if ($force || !empty($cLimit)) {$aRes['limit'] =empty($this->SQLData['limit']) ?null :$this->SQLData['limit']; if(preg_match('/\s*limit\s+?([^\,\s]+)(?:,\s*([^\,\s]+))?/i', $cLimit, $aMatches)){ $offset =(int)$aMatches[1]; $cLimit =" LIMIT " .$offset; if(isset($aMatches[2])){ $limit =(int)$aMatches[2]; $cLimit .= ", " .$limit; }}$this->SQLData["force_limit"] =$cLimit; }return $aRes; }function AddSQLJoinedTables(&$Core, $cDefTablePrefix, $cTables) {$this->SQLData["default_prefix"] =$cDefTablePrefix; $this->SQLData[I13599] =$cTables; $this->TI1TIII(true); }function TI1TIT1($lll1lL1) {$lll1l1I =I13610; $lll1l1l ='*'; foreach ($lll1lL1 as $prefix) {if (empty($prefix)) {return I13580; }$name =$this->SQLData['sql_from_tables']['tables'][$prefix]; if ($lll1l1l == '*') {$lll1l1I .= $name .I13611 .$prefix .I13611; $first =false; }else {$join =I13580; $joinType ='INNER'; if (isset($this->SQLData['sql_from_tables']['joins'][$lll1l1l .'|' .$prefix])) {$join =$this->SQLData[I13612]['joins'][$lll1l1l .'|' .$prefix]; }else {$join =$this->SQLData[I13612]['joins'][$prefix .'|' .$lll1l1l]; }if (isset($this->SQLData[I13612][I13613][$lll1l1l .'|' .$prefix])) {$joinType =$this->SQLData[I13612][I13613][$lll1l1l .'|' .$prefix]; }elseif (isset($this->SQLData[I13612][I13613][$prefix .'|' .$lll1l1l])) {$joinType =$this->SQLData[I13612][I13613][$prefix .'|' .$lll1l1l]; }$lll1l1I .= $joinType .I13614 .$name .I13611 .$prefix .' ON ' .$join .I13611; }$lll1l1l =$prefix; }if (!empty($this->SQLData[I13612]['post_join'])) {$lll1l1I .= I13611 .$this->SQLData[I13612]['post_join']; }return $lll1l1I; }function TI1TIIT() {$res =false; $numArgs =func_num_args(); for ($i =0; $i <$numArgs && !$res; $i++) {$arg =func_get_arg($i); switch ($arg['type']) {case I13615: $from =$this->TI1TIT1(explode('|', $arg['optimization'][$this->SQLData["order_col_pref"]])); if (!empty($from)) {$this->SQLData[I13604] =$from; }$res =true; break; case 'clause': foreach ($arg[I13616] as $clause => $lll1l1L) {if (mb_strpos($this->SQLData["sql_filter"], $clause) !== false) {$this->SQLData[I13604] =$this->TI1TIT1(explode('|', $lll1l1L)); $res =true; }}break; }}return $res; }function TI1TIII($lll1l11 =false) {$col =$this->TI1TTIl($this->SQLData[I13598]); $aCustomData =array( 'column' => &$col, 'direction' => &$this->SortDim );EventApplyVars($this, "prepareSortFieldForSQL", $aCustomData); $prefix =I13580; $lll1LII =true; if (!empty($this->SQLData["order_replace"][$col])) {$col =$this->SQLData["order_replace"][$col]; if (mb_strpos($col, "=|") !== false) {$lll1LII =false; $col =mb_substr($col, 2); }}if (!$lll1l11) {$this->SQLData["order_col"] =$col; }else {$pos =mb_strpos($col, I13617); if ($pos !== false) {$prefix =mb_substr($col, 0, $pos); if (isset($this->SQLData[I13599][$prefix])) {$col =mb_substr($col, $pos +1); }else {$prefix =I13580; }}else {$prefix =$this->SQLData["default_prefix"]; }$this->SQLData["order_col"] =((empty($prefix) || !$lll1LII) ?I13580 :$prefix .I13617) .$col; }$this->SQLData["order_col_pref"] =$prefix; $sql =I13580; if (!empty($this->SortDim)) {$sql .= $this->SQLData["order_col"] .I13586 .$this->SortDim; }if (!empty($this->SQLData[I13618])) {$sql .= (!empty($sql) ?", " :I13585) .$this->SQLData[I13618]; }if (!empty($sql)) {$sql ="ORDER BY " .$sql; }$this->SQLData["order_sql"] =$sql; if (isset($this->Applied["data"])) {$this->Applied[I13619] =$this->Applied["data"]; }else {unset($this->Applied[I13619]); }}function ArrangePosSQL(&$db, $cId, $lll1LIl ='id') {if (!$this->lll1IIL) {trigger_error("ERROR: SQL is not intialised...", E_USER_ERROR); }if ($this->IsVarApplied) {if (!isset($this->Applied[I13619])) {$sql ="SELECT " .$this->SQLData[I13620] .I13586 .$this->SQLData[I13604] .I13586 .$this->SQLData["sql_filter"] ." AND $lll1LIl='$cId'" .I13586 .$this->SQLData["group_by"] .I13586 .$this->SQLData["order_sql"]; $db->query($sql); if ($db->next_record()) {$col =$this->TI1TTIl(); $this->Applied[I13619] =$db->Record[$col]; }}$this->Position =0; $lll1LIL =$this->SQLData["order_col"]; $lll1LII =true; if (!empty($this->SQLData[I13621][$lll1LIL])) {$lll1LIL =$this->SQLData[I13621][$lll1LIL]; if (mb_strpos($lll1LIL, "=|") !== false) {$lll1LII =false; $lll1LIL =mb_substr($lll1LIL, 2); }}$filter =(isset($this->Applied['value']) ?" AND " .$lll1LIL .($this->SortDim == 'asc' ?I13622 :'>') ."'" .$this->Applied['value'] ."'" :I13580) .I13586; $sql ="SELECT count(*) as _pcount " .I13586 .$this->SQLData[I13604] .I13586 .$this->SQLData["sql_filter"] .I13586 .$filter .I13586 .$this->SQLData["group_by"]; $db->query($sql); if ($db->next_record()) {if (empty($this->SQLData["group_by"])) {$this->Position =$db->Record["_pcount"]; }else {$this->Position =$db->num_rows(); }$pos =mb_strpos($lll1LIl, I13617); if ($pos !== false) {$col =mb_substr($lll1LIl, $pos +1); }else {$col =$lll1LIl; }if (isset($this->Applied[I13623])) {$sql ="SELECT " .$this->SQLData[I13620] .I13611 .$this->SQLData[I13604] .I13611 .$this->SQLData["sql_filter"] ." AND " .$lll1LIL ."='" .$this->Applied[I13623] .I13624 .$this->SQLData["group_by"] .I13611 .$this->SQLData["order_sql"]; $db->query($sql); while ($db->next_record()) {if ($db->Record[$col] == $cId) {break; }$this->Position++; }}$this->TI1TT1I(false); }}return $this->Position; }function TI1TIIl($IILlL1I =I13585, $lll1LI1 =true) {if (!$this->lll1IIL) {trigger_error("ERROR: SQL is not intialised...", E_USER_ERROR); }return $this->SQLData["sql_filter"] .I13586 .$IILlL1I .I13586 .$this->SQLData[I13625] .I13586 .(($lll1LI1) ?$this->SQLData["order_sql"] :I13580); }function TI1TII1($fields) {$lll1LlI =trim($this->SQLData['force_order']); if (empty($lll1LlI)) {$lll1Lll =trim($this->SQLData['order_sql']); if (!empty($lll1Lll)) {$lll1Lll =I13587 .preg_replace('/^ORDER\s+BY\s+/si', I13580, $lll1Lll); }$this->SQLData[I13626] =" ORDER BY " .implode(I13587, $fields) .$lll1Lll .I13611; }else {$this->SQLData['force_order'] =" ORDER BY " .implode(I13587, $fields) .I13587 .preg_replace('/^ORDER\s+BY\s+/si', I13580, $lll1LlI) .I13611; }}function ProcessSQL(&$db, $cFields =I13580, $appliedId =0) {$sql =$this->TI1TIlT($db, $cFields, $appliedId); $db->query($sql); if ($this->lll1Il1) {$this->MaxCount =$this->lll1Il1; $this->lll1Il1 =0; }else {$db2 =&$db->TTI1I1T(); $sql ="SELECT FOUND_ROWS() as _pfr"; $db2->query($sql); $db2->next_record(); $this->MaxCount =$db2->Record["_pfr"]; }return true; }public function setMaxCount($maxCount) {$this->lll1Il1 =(int) $maxCount; }function TI1TIlT(&$db, $cFields =I13580, $appliedId =0) {$this->PageSize =(int)preg_replace('~[^\d]~', I13580, $this->PageSize); if (!$this->lll1IIL) {trigger_error("ERROR: SQL is not intialised...", E_USER_ERROR); }$this->MaxCount =0; $prefix =I13585; $correctPosition =true; if ($this->mode == I13584) {$backupPageSize =$this->PageSize; $this->PageSize =1; $position =$this->ArrangePosSQL($db, $appliedId); if ($this->TapePosition >0) {$numLeftTapeItems =$this->TapePosition -1; $numRightTapeItems =$backupPageSize -$this->TapePosition; $this->Position =max(0, $position -$numRightTapeItems -$numLeftTapeItems); $this->PageSize =$backupPageSize +$numRightTapeItems; $correctPosition =false; }else {$this->Position =$position; $this->PageSize =$backupPageSize; }}$prefix =$this->SQLData['options'] &self::DB_NO_CALC_FOUND_ROWS ?I13580 :'SQL_CALC_FOUND_ROWS '; if ($this->SQLData["options"] &_DB_STRAIGHT_JOIN) {$prefix .= " STRAIGHT_JOIN "; }$this->TI1TT1I(false, $correctPosition); if (empty($cFields)) {$fields =$this->SQLData[I13620]; }else {$fields =$cFields; }if (strpos($fields, 'SQL_CALC_FOUND_ROWS') !== false) {$prefix =str_replace('SQL_CALC_FOUND_ROWS', I13580, $prefix); }if ($this->mode == I13584 && $this->TapePosition == 0) {if ($this->Position >0) {$this->Position--; $this->PageSize += 2; }else {$this->PageSize++; }}AMI_Event::fire(I13627, $this->SQLData, AMI_Event::MOD_ANY); if ($this->lll1IlL && $this->PageSize >0 && empty($this->SQLData['force_limit'])) {$this->lll1IlL =false; $sql ="SELECT count(1) " .$this->SQLData['sql_from'] .I13611 .$this->TI1TIIl(); $qty =$db->getValue($sql); if ($qty >$this->PageSize) {$modulus =$qty %$this->PageSize; $this->Position =$qty -($modulus >0 ?$modulus :$this->PageSize); }}$sql ="SELECT " .$prefix .$fields .I13586 .$this->SQLData[I13604] .I13586 .(empty($this->SQLData[I13603]) ?$this->TI1TIIl() :$this->TI1TIIl(I13580, false) .$this->SQLData[I13603]) .I13586 .(empty($this->SQLData[I13628]) ?$this->TI1TTlI() :$this->SQLData[I13628]); if ($this->mode == I13584) {$this->PageSize =$backupPageSize; $this->Position =$position; }$this->lastSQL =$sql; return $sql; }function SetApplied(&$lll1lIL, &$aSql, $cLang) {$this->IsVarApplied =true; $lll1LlL =$this->TI1TTIl(); if (isset($aSql[$lll1LlL])) {$this->Applied["data"] =$aSql[$lll1LlL]; }else {unset($this->Applied["data"]); }$this->Applied["lang"] =$cLang; }function TI1TIlI(&$lll1lIL, &$aSql, $cLang) {$id =&$lll1lIL->lastInsertId(); $this->SetApplied($lll1lIL, $aSql, $cLang); return $id; }}