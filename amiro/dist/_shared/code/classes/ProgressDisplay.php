<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       10133 xkqwqrgikwskuuirmtslqwprzltrqwupzqpnpknqqxwpxqluniszlqwxkuxgpmzwpplrpnir
 */ ?><?php foreach(array(13656=>'wjzddqd|gzTo',13657=>'GQrWQnt',13658=>'CrMttQn|tH|ZrWOMvQ',13659=>'|QrrHr',13660=>'unGZWKMnP|ZrWOMvQ',13661=>'SY|SuIG|DtZrt',13662=>'tZYJQDsHnQ',13663=>'SZtZ|rQDtHrQS',13664=>'uGSZtQ|run',13665=>'uGSZtQ|DuWWQDD',13666=>'GrHPrQDD',13667=>'IYBtQD|SHCnJHZSQS',13668=>'PHtyBtQD') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .'BaseObject.php'; require_once $GLOBALS[I13656] .'ProgressIndicator.php'; class ProgressDisplay extends BaseObject {public $pi; public $words; function ProgressDisplay(&$pi,&$words) {$this->BaseObject(); $this->pi =&$pi; $this->words =&$words; }function TI1TIll($errmsg=false,$lll1LL1=true) {$this->TI1TIl1($this->words['op_status_err'],$lll1LL1); if($errmsg!==false) trigger_error($errmsg,E_USER_WARNING); if($lll1LL1) exit; }function TI1TIl1($msg=false,$close=true) {if($msg===false) $msg =$this->words['op_status_err']; $this->pi->TI1TlIl($msg); if($close) $this->pi->TI1TlII(); }function setHeader($str) {return $this->pi->setHeader($str); }function TI1TI1T($str) {return $this->pi->TI1TI1T($str); }function TI1TI1I() {$this->pi->TI1TlTI(PIND_ALL,false); }}class SiteArchDisplay extends ProgressDisplay {function SiteArchDisplay(&$pi,&$words) {$this->ProgressDisplay($pi,$words); }function init($op=false) {switch($op) {case 'create': $this->pi->TI1TI1T($this->words['preparing_site_archive']); $this->pi->TI1TlIT(0,true); $this->pi->TI1TlTI(PIND_ALL,false); $this->pi->TI1TlTI(PIND_BAR); break; case 'restore': $this->pi->TI1TI1T($this->words['preparing_restore']); $this->pi->TI1TlTI(PIND_ALL,false); $this->pi->TI1TlTI(PIND_COUNTER); break; }}function TTTIITT($group,$event,&$data) {if($group=='sitearch_create') {switch($event) {case 'files_prepare_start': $this->pi->TI1TI1T($this->words['preparing_file_list']); break; case 'tar_start': $this->pi->TI1TlIT(0,true); $this->pi->TI1TI1T($this->words['archiving_files']); $this->pi->TI1TlT1(0,true,$this->words['written_to_archive']); $this->pi->TI1TlTI(PIND_COUNTER); break; case 'tar_tick': $this->pi->TI1TlIT($data[I13657],$data[I13657]==100); if(isset($data['bytes'])) $this->pi->TI1TlT1(round($data['bytes']/1024/1024,2)); break; case 'db_dump_start': $this->pi->TI1TlIT(0,true); $this->pi->TI1TI1T($this->words['db_dump_start']); $this->pi->TI1TlT1(0,true,$this->words[I13658]); $this->pi->TI1TlTI(PIND_COUNTER); break; case 'db_dump_tick': $this->pi->TI1TlIT($data[I13657],$data[I13657]==100); $this->pi->TI1TlT1(round($data['bytes']/1024/1024,2)); break; case 'done': $this->pi->TI1TI1T($this->words['site_arch_created']); $this->pi->TI1TlTI(PIND_COUNTER,false); break; case I13659: $this->TI1TI1l('create',$data); break; default: break; }}elseif($group=='sitearch_restore') {switch($event) {case 'untar_start': $this->pi->TI1TlT1(0,true,$this->words['files_bytes_restored']); $this->pi->TI1TI1T($this->words[I13660]); break; case 'untar_tick': $p =$data['filesDone'].'/'.round($data['bytes']/1024/1024,2); $this->pi->TI1TlT1($p); break; case I13661: $this->pi->TI1TlT1(0,true,$this->words['tables_bytes_restored']); $this->pi->TI1TI1T($this->words['restoring_dbdump']); break; case 'db_dump_tick': case 'db_dump_end': $p =$data[I13662].'/'.round($data['bytes']/1024/1024,2); $this->pi->TI1TlT1($p,$event=='db_dump_end'); break; case 'done': $this->pi->TI1TI1T($this->words[I13663]); $this->pi->TI1TlTI(PIND_COUNTER,false); break; case I13659: $this->TI1TI1l('restore',$data); break; default: break; }}}function TI1TI1l($op,$data) {$lll1L1I =BaseObject::TTTITIl($data['errors'],'E_SA_WRITE') ?'err_quota_warn' :"err_${op}_archive"; $this->TI1TIl1($this->words[$lll1L1I]); }}class UpdateDisplay extends ProgressDisplay {function UpdateDisplay(&$pi,&$words) {$this->ProgressDisplay($pi,$words); }function init($op=false) {$this->pi->TI1TlTI(PIND_ALL,false); $this->pi->TI1TlTI(PIND_TICK); }function TTTIITT($group,$event,&$data) {if($group==I13664) {switch($event) {case 'http_request': $this->pi->TI1TI1T($this->words['running_update_http']); break; case 'tick': $this->pi->tick(); break; case 'done': $this->pi->TI1TI1T($this->words[I13665]); break; case I13659: $this->TI1TIl1(false,false); break; }}}}class DownloadDisplay extends ProgressDisplay {public $lll1L1l; function DownloadDisplay(&$pi,&$words) {$this->ProgressDisplay($pi,$words); $this->lll1L1l =true; }function init($op=false) {$this->lll1L1l =true; $this->pi->TI1TlTI(PIND_ALL,false); }function TTTIITT($group,$event,&$data) {if($group=='dload_get') {switch($event) {case 'connecting': $this->pi->TI1TI1T($this->words['connecting_to']." update server ..."); break; case I13666: case 'done': $lll1L1L =round($data['gotBytes']/1024/1024,2); if($data['totalBytes']===false) {if($this->lll1L1l) {$this->pi->TI1TI1T($this->words['transferring_data']); $this->pi->TI1TlTI(PIND_COUNTER,true); $this->pi->TI1TlT1($lll1L1L,true,$this->words[I13667]); $this->lll1L1l =false; }$this->pi->TI1TlT1(round($data['gotBytes']/1024/1024,2)); }else {$lll1L11 =round($data['totalBytes']/1024/1024,2); $percent =round($lll1L1L/$lll1L11*100); if($percent>100 || $event=='done') $percent =100; if($this->lll1L1l) {$this->pi->TI1TI1T($this->words['transferring_data']); $this->pi->TI1TlTI(PIND_BAR,true); $this->pi->TI1TlIT($percent,true); $this->lll1L1l =false; }$this->pi->TI1TlT1(round($data[I13668]/1024/1024,2)); $this->pi->TI1TlIT($percent,$event=='done'); }if($event=='done') {$this->pi->TI1TI1T($this->words['download_done']); }break; }}elseif($group==I13659) {switch($event) {case I13659: $this->TI1TIl1(false,false); break; }}}}?>