<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       61231 xkqwrpzsnqrlkkkpqulltrlwrkxytpulguriqpmryiiwwmyyyuymipxkkiikgywltukzpnir
 */ ?><?php foreach(array(13983=>"#",13984=>"]EuHt^",13985=>"",13986=>"vZJMS|GZttQrn",13987=>"_;*;@#&[@_MD",13988=>"#wURRqNwmqd@",13989=>"#wzTqphRbms@",13990=>"#ihsqj@",13991=>"#~whigzNb@",13992=>"#~wzTqphRb@",13993=>"#~gmwTURq@",13994=>"#~VqNshR@",13995=>"SZtZ|DHurWQ",13996=>'Ud+zdwmm',13997=>'"',13998=>"tZP",13999=>"01",14000=>"URj",14001=>"05",14002=>"100105",14003=>"gRmwq",14004=>"04",14005=>"07",14006=>"ihsqj",14007=>"|DtZrtqJQIQnt",14008=>"10013",14009=>"SZtZ|nHt|fHunS",14010=>"SZtQ",14011=>"WurrQnWMQD|JMDt",14012=>"GuYJMW",14013=>"vZrD",14014=>'FrHnt`GOG',14015=>"tMtJQ",14016=>"fMJQIZDK",14017=>"MIGHrt|IHSuJQD",14018=>"MnWJuSQS|MIGHrt|IHSuJQD",14019=>"QDOHG|MtQI",14020=>"|MIGHrt|WrQZtQ|WZt",14021=>"DQJQWt",14022=>"QxGHrt",14023=>'bZnSQxqDOHGsrMvQr',14024=>"MtQI|QxGHrt|fZMJ",14025=>"MS",14026=>"WZtMS|DuYJMnK",14027=>"~",14028=>"fZJDQ",14029=>"urJ",14030=>"GrMWQ",14031=>"WZtQPHrB|fMQJS",14032=>"nZIQ",14033=>"MS|QxtQrnZJ",14034=>'SrMvQrNZIQ',14035=>'GrHSuWt',14036=>"|QxGHrt|fMQJSD",14037=>"%WurrQnWB|rHC",14038=>"%WZtQPHrB|rHC",14039=>"mIPTBGQ",14040=>"MIGHrt|MIP|PQt",14041=>"TMIQTBGQ",14042=>"wZtwrQZtMnP",14043=>"tBGQ",14044=>"WOQWK|ZvZMJZYMJMtB",14045=>"|QxGHrt|tBGQD",14046=>"QxGHrt|tBGQ|QrrHr",14047=>"GZttQrn|JQft",14048=>"JMnQ",14049=>"100104",14050=>"wURRqNwb",14051=>'GrQGZrQ|WZtQPHrMQD',14052=>'ZWtMHn',14053=>"WZJJYZWK|QrrHr",14054=>"10010501",14055=>"zTTR|gzRqNTms",14056=>"SZtZ|GZrDQ|QrrHr",14057=>"hFFqRd",14058=>"zTTR|",14059=>"`",14060=>"SHnQwurrQnWMQD",14061=>"wzTqphRb",14062=>'MIGHrt|',14063=>"ZWtMHn",14064=>"GrHWQDD|MtQID",14065=>"zTTR|ms",14066=>"zTTR|wURRqNwbms",14067=>"zTTR|gRmwq",14068=>'MIGHrt',14069=>"DtZtmIP",14070=>"DWOQIQ",14071=>"fZMJ",14072=>"GrQGZrQ|MIZPQD",14073=>"10012",14074=>"|",14075=>"zTTR|gmwTURq",14076=>"gRmwq|izg",14077=>"WHGB",14078=>"fMQJSD",14079=>"bZnSQx`iZrKQt",14080=>"MS|GZrQnt|QxtQrnZJ",14081=>"kQQGmtQIwZtmS") as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .'RapidExchangeDriver.php'; class RapidYandexEshopDriver extends RapidExchangeDriver {public $aXmlReplaceChars; public $llLI11I; public $llLlLlL; public $_tmp; public $front; public $llLlLl1; public $Il11l1L; public $Il11l11; public $IlLl11L; public $llLlLLI; public $_config; public $llLILlL; public $llLI1Il; public $llLILLL; public $llLI1II; public $llLlLLl; public $llLlLLL; public $llLI1LI; public $llLILLI; public $llLlLL1; public $llLI1lI; public $llLlL1I; public $llLlL1l; public $Il11l1I; public $llLlL1L; public $llLlL11; public $llLl1II; public $llLl1Il; public $llLIL1l; public $llLl1IL; public $llLl1I1; function RapidYandexEshopDriver(&$gui, &$module) {parent::ExchangeDriver($gui, $module); $this->name ="RapidYandexEshopDriver"; $this->optionsSourceName ="YandexEshopDriver"; $this->II1LIIL =0; $this->Il11l11 =1; $this->Il11l1L =0; $this->llLI11I =""; $this->llLlLlL =false; $this->aXmlReplaceChars =array( "&" => "&amp;", I13983 => "&lt;", ">" => "&gt;", "\"" => I13984 );$this->_tmp =""; $this->llLlLl1 =array("type" => "", "category_field" => I13985); $this->front =null; $this->IlLl11L =array(); $this->llLlLLI =array(); $this->_config =I13985; $this->llLILlL =524288; $this->llLI1Il ="0"; $this->llLILLL =array(); $this->llLI1II =I13985; $this->llLlLLl =I13985; $this->llLlLLL =I13985; $this->llLI1LI =0; $this->llLILLI =false; $this->_parseErrorInfo =false; $this->llLlLL1 =false; $this->llLI1lI =array(); $this->llLlL1I =array(); $this->llLlL1l =I13985; $this->Il11l1I =array(); $this->llLlL1L =array("YandexCategory" => false, "KeepItemCatId" => false); $this->llLlL11 ="_yandex_gen"; $this->llLl1II =null; $this->llLl1Il =array( I13986 => array ("|^<YML_CATALOG [^><]*>|si", "|^<CURRENCY [^></]*/>|si", "|^<CATEGORY [^><]*>|si", "|^<OFFER [^><]*>|si", "|^<\?xml[^<>]*\?>|si", "|^<!DOCTYPE[^><]*>|si",), "pattern_left" => "|^[^><]*<|is", "pattern_right" => I13987, "valid_tags" => array ("<URL>", "<NAME>", "<COMPANY>", I13988, "<CATEGORIES>", "<OFFERS>", "<PRICE>", "<CURRENCYID>", I13989, "<PICTURE>", "<TYPEPREFIX>", "<VENDOR>", "<VENDORCODE>", I13990, "<DESCRIPTION>", "</YML_CATALOG>", "</SHOP>", "</URL>", I13991, "</NAME>", "</CURRENCIES>", "</CATEGORIES>", "</OFFERS>", I13992, "</OFFER>", "</PRICE>", "</CURRENCYID>", "</CATEGORYID>", I13993, "</TYPEPREFIX>", "</MODEL>", "</DESCRIPTION>", "<SHOP>", I13994, "</VENDORCODE>"), "replaceTag" => I13985, );$this->llLIL1l ="EncodeStubCB"; }function Init($type) {$res =parent::Init($type); return $res; }function Start($actionType, &$aParams) {$II1LIlI =parent::Start($actionType, $aParams); if ($II1LIlI) {if ($actionType == "import") {$this->TTIIlIl(0, 100); $dataSource =$aParams[I13995]; if (file_exists($dataSource)) {$this->II1LIIL =filesize($dataSource); $II1LIlI =$this->TIT1lTl($actionType); if ($II1LIlI && ($fp =@fopen($dataSource, 'r'))) {$data =fread($fp, $this->llLILlL); if (preg_match('/(<\?xml[^>]+encoding\s*=\s*")([^"]+)"/s', $data, $matches) && !in_array(mb_strtoupper($llLl1lI =$matches[2]), array ('UTF-8', 'ISO-8859-1', I13996)) ){$llLl1ll ='UTF-8'; $this->llLIL1l ="_EncodeMbCB"; $this->llLl1I1 =$llLl1ll; $this->llLl1IL =$llLl1lI; if ($II1LIlI) {$dataSource .= '.enc'; $llLl1lL =fopen($dataSource, 'wb'); $llLl1l1 =1; $data =str_replace($matches[0], $matches[1] .$llLl1ll .I13997, $data); do {$I1ll11l =$this->{$this->llLIL1l}($data); fwrite($llLl1lL, $I1ll11l); $this->TTIIlIl(0, $this->II1LIIL); }while ($data =fread($fp, $this->llLILlL)); fclose($llLl1lL); }}fclose($fp); }if ($II1LIlI && ($fp =@fopen($dataSource, "r"))) {$II1LIlI =$this->TTIIlIT(array("action"=>"common")); if ($II1LIlI) {$this->TI1T1lI($aParams); $this->_config =$this->module->TTII111("fields_map", true); $this->llLILLL =array( I13985 => array(I13998 => array("YML_CATALOG" => "10")), "10" => array(I13998 => array("SHOP" => I13999)), "1001" => array(I13998 => array("NAME" => I13999, "COMPANY" => "02", I14000 => "03", "CURRENCIES" => "04", "CATEGORIES" => I14001, "OFFERS" => "06")), "100104" => array(I13998 => array("CURRENCY" => I13999)), I14002 => array(I13998 => array("CATEGORY" => I13999)), "100106" => array(I13998 => array("OFFER" => I13999)), "10010601" => array(I13998 => array(I14000 => I13999, I14003 => "02", "CURRENCYID" => "03", "CATEGORYID" => I14004, "PICTURE" => I14001, "NAME" => "06", "TYPEPREFIX" => I14005, "VENDOR" => "08", "VENDORCODE" => "09", I14006 => "10", "DESCRIPTION" => "11") ));}if ($this->llLlL1L["ImgType"] == "import_img_download") $this->Il11l11 =2/3; $this->TI1T11l(); $charset =$this->module->db->getCharset(true); $charset =$charset[0]; if (!in_array(mb_strtolower($charset), array ('utf8', 'latin1'))) {$this->_xmlParserTargetEncoding =$charset; $this->llLl1IL ="utf-8"; $this->llLl1I1 =$charset; $this->llLIL1l ="_EncodeMbCB"; }if (!$this->TI1ITI1($fp, I14007, "_endElement", "_characterData")) {$II1LIlI =false; $this->TTIIlT1("10013", "data_parse_error", $this->_parseErrorInfo); }if ($this->llLILLI) {$II1LIlI =false; }fclose($fp); $this->Il11l1L =$this->Il11l11*$this->II1LIIL; $this->TTIIlIl($this->Il11l1L, $this->II1LIIL); if (is_array($this->Il11l1I) && count($this->Il11l1I) >0) {$this->Il11l11 =($this->II1LIIL -$this->Il11l1L) /count($this->Il11l1I); if (!$this->TT1TITT()) {$this->TTIIlT1(I14008, "img_download_error"); }}$this->TTIIlIl($this->II1LIIL, $this->II1LIIL); $this->TI1T11I(false); if (isset($llLl1l1)) {@unlink($dataSource); }}else if ($II1LIlI) {$this->TTIIlT1("10011", "data_open_error"); $II1LIlI =false; }}else {$this->TTIIlT1("10010", I14009); $II1LIlI =false; }}elseif($actionType == "export") {$II1LIlI =$this->TIT1lTl($actionType); if($II1LIlI) {$llLl1LI =I13985; if ($this->module->module->IssetOption($this->optionsSourceName."_export_shop_name")) $llLl1LI =$this->module->module->GetOption($this->optionsSourceName."_export_shop_name"); if ($llLl1LI == I13985) $llLl1LI =$this->module->cms->Core->GetOption("company_name"); $aData =array( I14010 => date("Y-m-d H:i"), "shop_name" => $this->module->cms->htmlchars($llLl1LI), "company_name" => $this->module->cms->htmlchars($this->module->cms->Core->GetOption("company_name")), I14011 => I13985, "categories_list" => I13985, );$II1LIlI =$this->module->oEshop->currencyEnable; if(!$II1LIlI) {$this->TTIIlT1("10020", "rur_currency_is_missing"); }}if($II1LIlI) {$this->llLlLlL =true; $this->module->oEshop->setCallbackObject($this); $this->module->oEshop->setCallbackMethod("getCurrencyList", "_GetCurrenciesListCB"); $this->module->oEshop->getCurrencyList($aData[I14011]); if($this->llLlLlL) {$II1LIlI =false; $this->TTIIlT1("10020", "rur_currency_is_missing"); }}if($II1LIlI) {$this->_tmp =I13985; $this->module->oEshop->tree->setCallbackObject($this); $this->module->oEshop->tree->setCallbackMethod("createChildsArrayFlt", "_createChildsArrayFltCB"); $this->module->oEshop->tree->addFilter(I14012, "c.public=1"); $this->module->oEshop->tree->createChildsArrayFlt("name"); $aData["categories_list"] =$this->_tmp; $this->llLI11I =$this->gui->getAbsDefPostf($this->name.":export_header", $this->II1I1lL, $aParams[I14013] +$aData +array("message_number"=>$this->II1I1ll)); $aParams["driver"]["message_number"] =$this->II1I1ll; require_once $GLOBALS['CLASSES_PATH'] .I14014; $this->front =new Front($this->module->cms->Core, I13985, true); $this->front->constructorPostActions(); }}}return $II1LIlI; }function End($actionType) {$res =parent::End($actionType); if($actionType == "import") {}elseif($actionType == "export") {$res =$this->llLI11I.$this->gui->getAbsDefPostf($this->name.":export_footer", $this->II1I1lL, I13985); }return $res; }function GetInfo() {$aInfo =array( "name"=>$this->name, I14015=>$this->words[I14015], "supported_actions"=>array("import"), "pathtypes"=>array("files"), I14016=>array("*.xml", '*.yml'), I14017 => array(), I14018 => array("eshop_item"), "use_front_filter" => array(I14019), );return $aInfo; }function GetForm($type, &$formData) {parent::GetForm($type, $formData); switch ($type) {case "import": $formData["import_img_error"] =1; if ($this->module->module->IssetProperty($this->optionsSourceName."_import_img_types")) {$aTypes =$this->module->module->GetProperty($this->optionsSourceName."_import_img_types"); if (is_array($aTypes) && sizeof($aTypes) >0) {$formData["import_img_type_rows"] =I13985; $formData["import_img_error"] =0; foreach($aTypes as $key => $value) {$llLl1Ll =array( "type" => $value, "name" => ($this->words[$value]? $this->words[$value] :$value), );$formData["import_img_type_rows"] .= $this->gui->get($this->name.":import_img_type_row", $llLl1Ll); }}}else $formData["import_img_error"] =1; if ($formData["import_img_error"] == 0 && $this->module->module->IssetProperty($this->optionsSourceName."_import_img_gets")) {$aTypes =$this->module->module->GetProperty($this->optionsSourceName."_import_img_gets"); if (is_array($aTypes) && sizeof($aTypes) >0) {$formData["import_img_get_rows"] =I13985; $formData["import_img_error"] =0; foreach($aTypes as $key => $value) {$llLl1Ll =array( "type" => $value, "name" => ($this->words[$value]? $this->words[$value] :$value), );$formData["import_img_get_rows"] .= $this->gui->get($this->name.":import_img_get_row", $llLl1Ll); }}}else $formData["import_img_error"] =1; if ($formData["import_img_error"] == 0 && $this->module->module->IssetProperty($this->optionsSourceName."_import_time_types")) {$aTypes =$this->module->module->GetProperty($this->optionsSourceName."_import_time_types"); if (is_array($aTypes) && sizeof($aTypes) >0) {$formData["import_time_type_rows"] =I13985; $formData["import_img_error"] =0; foreach($aTypes as $key => $value) {$llLl1Ll =array( "type" => $value, "name" => ((isset($this->words[$value]) && $this->words[$value]) ?$this->words[$value] :$value), );$formData["import_time_type_rows"] .= $this->gui->get($this->name.":import_time_type_row", $llLl1Ll); }}}else $formData["import_img_error"] =1; $formData["import_create_cat_arr_error"] =1; if ($this->module->module->IssetProperty($this->optionsSourceName."_import_create_cat_arr")) {$aTypes =$this->module->module->GetProperty($this->optionsSourceName."_import_create_cat_arr"); $llLl1LL =$this->module->module->GetOption($this->optionsSourceName.I14020); if (is_array($aTypes) && sizeof($aTypes) >0) {$formData["import_create_cat_arr_rows"] =I13985; $formData["import_create_cat_arr_error"] =0; foreach($aTypes as $key => $value) {$llLl1Ll =array( "type" => $value, "name" => ($this->words[$value]? $this->words[$value] :$value), I14021 => ($llLl1LL == $value? "selected" :I13985), );$formData["import_create_cat_arr_rows"] .= $this->gui->get($this->name.":import_create_cat_arr_row", $llLl1Ll); }}}else $formData["import_create_cat_arr_error"] =1; break; case I14022: $this->TIT1lTI($formData); break; }$html =$this->gui->get($this->name.":".$type."_form", $formData); return $html; }function TTIIIl1($II1ILLL, $aData, $II1IL1l, $II1IL1L) {$content =$this->llLI11I; $this->llLI11I =I13985; $Il111LI =false; switch ($II1ILLL) {case I14019: if ($aData["id_category"] == $this->module->oEshop->rootCatId) {$this->II1I1IL->{$this->II1I1I1["process_error"]}($this->II1I1IL->II1llIL, I14022, $this->name == I14023 ?"miss_main_cat" :"miss_main_cat_items", I13985, true); $this->II1I1IL->II1llIL->Engine->SetLastError(1, "Item export failed"); $this->TTIIlT1("20010", I14024); break; }$II1LI1I =$aData["id_external"]; for($i=-1; $i<$this->module->oEshop->numPrices; $i++) {$priceNum =$this->module->oEshop->priceFields[$i]; if(doubleval($aData["price".$priceNum]) >0) {$currency =I13985; if($i == -1) {$currency =$this->module->oEshop->baseCurrency; }else {$I1LLLIL =$this->module->oEshop->TT11TlT($aData["cat_price".$priceNum]); $currency =$I1LLLIL["currency"]; }if($currency != I13985) {$aNavData =array(); $aNavData[I14025] =$aData[I14025]; $aNavData["id_sublink"] =$aData["sublink"]; $aNavData["catid"] =$aData["cat_id"]; $aNavData[I14026] =$aData["cat_sublink"]; $aData += $this->front->ApplyNav($aNavData); $llLl1L1 =parse_url($aData["picture_src"]); $picture =ltrim($llLl1L1['path'],'/'); $aPicture =explode(I14027, $picture); foreach ($aPicture as $llLl11I => $llLl11l) $aPicture[$llLl11I] =rawurlencode($llLl11l); $picture =implode(I14027, $aPicture); $availability ="true"; if ($this->llLlLl1["check_availability"]) $availability =($aData["rest"] >0)? "true":I14028; $description =$this->_escapeXmlChars(unhtmlentities($aData["description"], true)); $description =str_replace("http://", I13985, $description); $aItemData =array( "type" => $this->llLlLl1["type"], I14025 => $aData[I14025], I14029 => $GLOBALS["ROOT_PATH_WWW"].$this->module->cms->Core->GetModFrontLink($this->module->oEshop->ownerName."_item").$aData["nav_data"], "price" => $this->module->oEshop->convertCurrency(doubleval($aData[I14030.$priceNum]), $this->module->oEshop->baseCurrency, $currency), "currency_id" => $currency, "category_id" => $aData["id_category"], "category_path" => $aData[$this->llLlLl1[I14031]], "picture" => (empty($picture))? I13985: $GLOBALS["ROOT_PATH_WWW"].$picture, "model" => $this->_escapeXmlChars(unhtmlentities($aData["name"], true)), I14032 => $this->_escapeXmlChars(unhtmlentities($aData[I14032], true)), "description" => $description, "availability" => strval($availability), );$aItemData += $aData; $content .= $this->gui->get($this->TIT1lT1($II1ILLL), $aItemData); break; }}}break; }$res =array(); $res["content"] =$content; $res["is_new_id_external"] =$Il111LI; $res[I14033] =$II1LI1I; return $res; }function TIT1lT1($modId){ $setName ='item_row_' .str_replace('.', '_', $this->llLlLl1['type']); $aEvent =array( I14034 => $this->name, 'exchangeType' => 'export', 'modId' => $modId, 'type' => I14035, 'setName' => &$setName );AMI_Event::fire('on_dataexchange_get_tpl_set_name', $aEvent, AMI_Event::MOD_ANY); return $this->name .':' .$setName; }function TTIIIlT($II1ILLL, &$aParams) {$this->front->InitNavSettings($II1ILLL); $II1ILLL =str_replace("eshop_", I13985, $II1ILLL); $this->_fields =$this->module->TTII111($II1ILLL.I14036); return true; }function _GetCurrenciesListCB(&$result, $code, $currency) {if($code == "RUR") {$this->llLlLlL =false; }$currency["rate"] =$this->module->oEshop->convertCurrency(1, $code, "RUR"); $currency["code"] =$code; $result .= $this->gui->getAbsDefPostf($this->name.I14037, $this->II1I1lL, $currency); }function _createChildsArrayFltCB(&$II11L1l, &$record, &$Il11L1l) {if($this->module->oEshop->rootCatId != $record[I14025]) {$aData =array( I14025 => $record[I14025], I14032 => $this->_escapeXmlChars(unhtmlentities($record[I14032])), "id_parent" => $record["id_parent"], "is_root_parent" => ($this->module->oEshop->rootCatId == $record["id_parent"])? 1: 0, );$this->_tmp .= $this->gui->getAbsDefPostf($this->name.I14038, $this->II1I1lL, $aData); }}function _escapeXmlChars(&$str) {return strtr(TlT1Tl1($str, " "), $this->aXmlReplaceChars); }function TI1ITl1(&$str) {return str_replace($this->aXmlReplaceChars, array_keys($this->aXmlReplaceChars), $str); }function TIT1lTl($type) {$II1LIlI =true; switch ($type) {case "import": $this->llLlL1L["ImgType"] =$this->module->cms->Vars["import_img_type"]; if(!in_array($this->llLlL1L[I14039], $this->module->module->GetProperty($this->optionsSourceName."_import_img_types"))) {$II1LIlI =false; $this->TTIIlT1("10020", "wrong_import_img"); }if ($II1LIlI) {$this->llLlL1L["ImgGet"] =$this->module->cms->Vars[I14040]; if(!in_array($this->llLlL1L["ImgGet"], $this->module->module->GetProperty($this->optionsSourceName."_import_img_gets"))) {$II1LIlI =false; $this->TTIIlT1("10020", "wrong_import_img"); }}if ($II1LIlI) {$this->llLlL1L[I14041] =$this->module->cms->Vars["import_time_type"]; if(!in_array($this->llLlL1L[I14041], $this->module->module->GetProperty($this->optionsSourceName."_import_time_types"))) {$II1LIlI =false; $this->TTIIlT1("10020", "wrong_import_img"); }}if ($II1LIlI) {$this->llLlL1L[I14042] =I13985; if (isset($this->module->cms->Vars["import_create_cat_arr"])) $this->llLlL1L[I14042] =$this->module->cms->Vars["import_create_cat_arr"]; }break; case I14022: if (isset($this->module->cms->Vars["export_type"]) && $this->module->module->IssetOption($this->optionsSourceName."_export_types") )$this->llLlLl1[I14043] =$this->module->cms->Vars["export_type"]; if (!in_array($this->llLlLl1[I14043], $this->module->module->GetAOption($this->optionsSourceName."_export_types"))) {$II1LIlI =false; $this->TTIIlT1("10020", "wrong_export_type"); }$this->llLlLl1[I14044] =false; if ($this->module->module->IssetOption($this->optionsSourceName."_export_check_availability") && ($this->module->module->GetOption($this->optionsSourceName."_export_check_availability") == "check_availability_true") )$this->llLlLl1[I14044] =true; break; }return $II1LIlI; }function TIT1lTI(&$formData) {if ($this->module->module->IssetOption($this->optionsSourceName."_export_types")) {$aTypes =$this->module->module->GetAOption($this->optionsSourceName.I14045); $formData["export_type_rows"] =I13985; $formData["export_type_error"] =0; if(is_array($aTypes) && sizeof($aTypes) >0) {foreach($aTypes as $key => $value) {$llLl1Ll =array( I14043 => $value, I14032 => ($this->words[$value]? $this->words[$value] :$value), );$formData["export_type_rows"] .= $this->gui->get($this->name.":export_type_row", $llLl1Ll); }}else {$formData[I14046] =1; }}else {$formData[I14046] =1; }}function TI1ITI1(&$fp, $llLl11L, $llLl111, $llLLIII, $encode =I13985) {$this->Il11l11 =$this->Il11l11/2; $res =true; $llLlLIl =xml_parser_create($encode); xml_set_object($llLlLIl, $this); xml_set_element_handler($llLlLIl, $llLl11L, $llLl111); xml_set_character_data_handler($llLlLIl, $llLLIII); fseek($fp, 0); $llLLIIl =false; $llLLIIL =I13985; $llLLII1 =I13985; while($data =fread($fp, $this->llLILlL)) {$data =$llLLII1.$data; $llLLIIl =$this->TI1IT1T($data, $llLLIlI, $llLLII1); $this->Il11l1L =$this->Il11l1L +mb_strlen($llLLIlI) *$this->Il11l11; $llLLIIL .= $llLLIlI; if (!$llLLIIl) {if(!xml_parse($llLlLIl, $llLLIIL, feof($fp))) {$errCode =xml_get_error_code($llLlLIl); $llLlLIL =xml_error_string($errCode); if(!$llLlLIL) {$llLlLIL =$errCode; }if(!$this->_parseErrorInfo["text"] =$this->words[$llLlLIL]) {$this->_parseErrorInfo["text"] =$llLlLIL; }$this->_parseErrorInfo["line"] =xml_get_current_line_number($llLlLIl); $this->_parseErrorInfo["char"] =xml_get_current_column_number($llLlLIl); $res =false; break; }$llLLIIL =I13985; }}xml_parser_free($llLlLIl); $this->Il11l11 =$this->Il11l11 *2; return $res; }function TI1IT1T($data, &$llLLIlI, &$llLLII1){ $llLLIlI =I13985; $llLLII1 =I13985; $llLLIIl =false; $process =(mb_strlen($data) >0); while ($process) {set_time_limit($this->module->I11l1l1); $process =true; $llLLIll =I13985; $llLLIlL =I13985; $llLLIl1 =I13985; $tag =I13985; $llLLILI =array(); $llLLILl =array(); $llLLILL =array(); $llLLIL1 =array(); $llLLI1I =array(); $llLLI1l =false; $llLLI1L =false; $llLLI11 =false; $llLLlII =false; $llLLlIl =false; if ($llLLI1l =preg_match($this->llLl1Il[I14047], $data, $llLLILI, PREG_OFFSET_CAPTURE)) {$llLLIll =mb_substr($llLLILI[0][0], 0, -1); $tag =I13983; $llLLIl1 =mb_substr($data, mb_strlen($llLLILI[0][0])); if ($llLLI11 =preg_match($this->llLl1Il["pattern_right"], $llLLIl1, $llLLILL, PREG_OFFSET_CAPTURE)) {$tag .= $llLLILL[0][0]; $llLLIl1 =mb_substr($llLLIl1, mb_strlen($llLLILL[0][0])); if (!$llLLlIl =in_array(mb_strtoupper($tag), $this->llLl1Il["valid_tags"])) {foreach ($this->llLl1Il[I13986] as $key => $pattern) {if ($llLLlIl =preg_match($pattern, $tag, $llLLI1I, PREG_OFFSET_CAPTURE)) {break; }}if (!$llLLlIl) {$tag =$this->llLl1Il["replaceTag"]; }}$llLLIlI .= $llLLIll.$tag; $data =$llLLIl1; }else {if ($llLLI1L =preg_match($this->llLl1Il[I14047], $llLLIl1, $llLLILl, PREG_OFFSET_CAPTURE)) {$data =$llLLIll.$llLLIl1; }else {$process =false; $llLLII1 =$data; $llLLIIl =true; }}}else {if ($llLLlII =preg_match($this->llLl1Il["pattern_right"], $data, $llLLIL1, PREG_OFFSET_CAPTURE)) {$data =mb_substr($data, 0, mb_strlen($llLLIL1[0][0])-1).mb_substr($data, mb_strlen($llLLIL1[0][0])); }else {$llLLIlI .= $data; $process =false; }}$this->TTIIlIl($this->Il11l1L +$this->Il11l11 *mb_strlen($llLLIlI), $this->II1LIIL); }return $llLLIIl; }function TI1ITTI($parser, $errCode, $text, $llLlll1) {$aInfo =array(I14048=>xml_get_current_line_number($parser), "element"=>$llLlll1); if($errCode >1 && $errCode <1001) {$this->llLILLI =true; }}function TI1T11l() {$this->llLI1LI =0; $this->llLI1Ll =I13985; $this->llLILl1 =I13985; $this->IlLl11L =array(); $this->llLlLLI =array();; $this->llLILLI =false; $this->llLI1II =I13985; $this->llLlLLl =I13985; $this->llLlLLL =I13985; $this->llLI1lI =array();; }function TI1ITTl(&$parser, $name, $attrs) {$this->llLI1LI =1; set_time_limit(25); $this->TTIIlIl($this->Il11l1L +$this->llLI1LL *xml_get_current_byte_index($parser), $this->II1LIIL); if (!$this->llLlLL1) {$this->llLlLLl =$name; $llLLlIL=I13985; $this->llLlLL1 =false; if(isset($this->llLILLL[$this->llLILl1])) {if(isset($this->llLILLL[$this->llLILl1][I13998][mb_strtoupper($name)])) {$llLLlIL =$this->llLILLL[$this->llLILl1][I13998][mb_strtoupper($name)]; }else {$llLLlIL =$this->llLI1Il; $this->llLlLL1 =true; }}else {$llLLlIL =$this->llLI1Il; }$this->llLILl1 .= $llLLlIL; }}function TI1ITT1($parser, &$data) {if (isset($this->_xmlParserTargetEncoding)) {$data =$this->{$this->llLIL1l}($data); }switch ($this->llLI1LI) {case "1": $this->llLI1Ll =$data; break; case "2": $this->llLI1Ll .= $data; $data =$this->llLI1Ll; break; case "3": $data =$this->llLI1Ll; break; }}function _startElement($parser, $name, $attrs) {$this->TI1ITTl($parser, $name, $attrs); if (!$this->llLlLL1 && !$this->llLILLI) {switch($this->llLILl1) {case I14049: $this->llLI1II ="CURRENCIES"; $this->llLI1lI[] ="-"; $this->llLlLLL ="startCurrencies"; break; case "10010401": $this->llLI1II =I14050; $this->IlLl11L =array(); foreach ($attrs as $key => $val) $this->IlLl11L["ATTR_".$key] =$val; break; case I14002: if ($this->llLlLLL != "doneCurrencies") {$this->llLILLI =true; $this->TTIIlT1(I14008, "data_parse_error"); }else {if (!$this->TTIIlIT(array ('action' => I14051, 'prefix' => 'import_'))) {$this->llLILLI =true; $this->TTIIlT1("10012", "callback_error"); }if (!$this->llLILLI && !$this->TTIIlIT(array (I14052 => 'process_categories', 'prefix' => 'import_'))) {$this->llLILLI =true; $this->TTIIlT1("10012", I14053); }else {$this->llLI1II ="CATEGORIES"; $this->llLlLLL ="startCategories"; $this->TI1IITT(); }if ($this->llLlL1L["YandexCategory"]) $this->llLlLLL ="doneCategories"; }break; case I14054: if (!$this->llLlL1L["YandexCategory"]) {$this->llLI1II ="CATEGORY"; $this->IlLl11L =array(); foreach ($attrs as $key => $val) $this->IlLl11L["ATTR_".$key] =$this->llLlL11."_".$val; if ($this->IlLl11L[I14055] == $this->llLlL11."_0" || $this->IlLl11L[I14055] == $this->llLlL11."_") $this->IlLl11L[I14055] =I13985; }break; case "100106": if ($this->llLlLLL != "doneCategories") {$this->llLILLI =true; $this->TTIIlT1(I14008, I14056); }else {if (!$this->TTIIlIT(array (I14052 => 'process_items', 'prefix' => 'import_'))) {$this->llLILLI =true; $this->TTIIlT1("10012", I14053); }else {$this->llLI1II =I14057; $this->llLlL1l =array("foundBaseCurrency" => false, "value" => I13985); }}break; case "10010601": $this->llLI1II ="OFFER"; $this->IlLl11L =array(); foreach ($attrs as $key => $val) $this->IlLl11L[I14058.$key] =$val; break; case "100103": $this->llLI1II =I14000; $this->IlLl11L =array(); break; }}}function _characterData($parser, $data) {if ($this->llLI1LI == 3) return; if (!$this->llLILLI && !$this->llLlLL1) {$this->TI1ITT1($parser, $data); switch ($this->llLI1II) {case "OFFER": if ($this->llLI1II != $this->llLlLLl) {$this->IlLl11L[I14058.$this->llLlLLl] =trim($data); }break; case "CATEGORY": $this->IlLl11L["TAG_".$this->llLlLLl] =trim($data); break; case I14000: $data =parse_url(trim($data)); $data =str_replace(I14059, "_", $data["host"]); $this->llLlL11 =$data; break; }}$this->llLI1LI =2; }function _endElement($parser, $name) {$this->llLI1LI =3; if (!$this->llLlLL1 && !$this->llLILLI) {switch($this->llLILl1) {case "10010401": $llLLlI1 =$this->TT1TIT1($this->_config[I14050], $this->IlLl11L); if ($this->module->oEshop->baseCurrency != $this->IlLl11L["ATTR_ID"]) {$this->llLI1lI[] =$this->IlLl11L; }$this->llLlLLL =I14060; break; case I14049: unset($this->llLI1lI[0]); break; case I14054: if (!$this->llLlL1L["YandexCategory"]) {$this->IlLl11L["SET_PRICE"] =array(); if ($this->IlLl11L[I14055] == I13985 && $this->llLlL1L["CAT_ID_PARENT_EXTERNAL"] != I13985) {$this->IlLl11L[I14055] =$this->llLlL1L["CAT_ID_PARENT_EXTERNAL"]; }$aCatData =$this->TT1TIT1($this->_config[I14061], $this->IlLl11L); $aCatData[I14033] =$aCatData["ID_EXTERNAL"]; $aCatData["id_parent_external"] =$aCatData["ID_PARENT_EXTERNAL"]; $aCatData['prefix'] =I14062; $this->II1I1IL->{$this->II1I1I1["prepare_categories"]}($aCatData, true); $this->_rapidImportCategoriesCB($aCatData, $aCatData["ID_EXTERNAL"]); $this->llLlLLL ="doneCategories"; }break; case I14002: if (!$this->llLlL1L["YandexCategory"]) {$this->TTIIlII(array(I14063=>"process_categories")); $this->TTIIlII(array (I14052=>I14051, 'prefix' => I14062)); }break; case "100106": if ($this->llLlLLI["ATTR_ID"] != I13985){ $this->TTTl1TT(); }$this->TTIIlII(array(I14063=>I14064)); break; case "10010601": if ($this->IlLl11L["ATTR_ID"] != I13985 ){if ($this->llLlLLI["ATTR_ID"] != I13985 && $this->llLlLLI["ATTR_ID"] != $this->IlLl11L[I14065]) {$this->TTTl1TT(); $this->llLlL1l =array("foundBaseCurrency" => false, "value" => I13985); }if (!$this->llLlL1l["foundBaseCurrency"]) {if ($this->IlLl11L["ATTR_CURRENCYID"] != $this->module->oEshop->baseCurrency) {foreach ($this->llLI1lI as $key => $llLLllI) {if ($llLLllI[I14065] == $this->IlLl11L[I14066]) {$this->llLlL1l["value"] =floatval($this->IlLl11L["ATTR_PRICE"])*floatval($llLLllI["ATTR_RATE"]); break; }}}else {$this->llLlL1l["value"] =floatval($this->IlLl11L[I14067]); $this->llLlL1l["foundBaseCurrency"] =true; }}$this->llLlLLI =$this->IlLl11L; }break; }}if(!$this->llLILLI) {if ($this->llLlLL1 && $this->llLlLLl == $name) {$this->llLILl1 =intval(intval($this->llLILl1)/10); $this->llLlLL1 =false; }elseif (!$this->llLlLL1) $this->llLILl1 =intval(intval($this->llLILl1)/100); }}function TI1IT1I($fileName) {set_time_limit($this->llLlL1L[I14041]); $II1LIlI =true; $bytes =0; $llLLlll =false; $this->_parseErrorInfo["statImg"] ="none"; $targetName =$this->TTIIll1($fileName); $aEvent =array( 'type' => I14068, 'driver' => $this->name, 'modId' => $this->module->II1llIL->Name, 'sourceURL' => &$fileName, 'targetName' => &$targetName );AMI_Event::fire( 'v5_on_dataexchange_download_image', $aEvent, AMI_Event::MOD_ANY );$targetName =$this->module->cms->TTITI11($targetName); $targetName =$GLOBALS["CUSTOM_PICTURES_PATH"].$this->module->I11lLl1.I14027. $targetName; $fileName =$this->TI1ITl1($fileName); $fileName =str_replace($this->llLlL11."_", I13985, $fileName); switch ($this->llLlL1L["ImgGet"]) {case "import_img_get_all": $llLLlll =true; if (file_exists($targetName)) $this->_parseErrorInfo[I14069] ="apply"; else $this->_parseErrorInfo[I14069] ="add"; break; case "import_img_get_new": if (!file_exists($targetName)) {$llLLlll =true; $this->_parseErrorInfo[I14069] ="add"; }break; }if ($llLLlll) {$llLLllL =parse_url($fileName); if (($llLLllL[I14070] != "http") || (empty($llLLllL["host"])) || (empty($llLLllL["path"]))) {$II1LIlI =false; $this->_parseErrorInfo[I14069] ="fail"; }if (!$this->llLl1II->download($fileName, $targetName)) {$II1LIlI =false; $this->_parseErrorInfo[I14069] =I14071; }}return $II1LIlI; }function TT1TITT() {$II1LIlI =$this->TTIIlIT(array (I14052 => 'process_items', 'prefix' => I14062)); if ($II1LIlI) {require_once $GLOBALS['CLASSES_PATH'] .'HttpDownloader.php'; $this->llLl1II =new HttpDownloader(); $llLLll1 =0; foreach($this->Il11l1I as $fileName => $llLLlLI ){$llLLll1++; if ($this->TI1IT1I ($fileName)) {$this->II1I1IL->{$this->II1I1I1[I14072]}(array("file_name"=>$fileName)); }for ($i =1; $i <= $llLLlLI; $i++) $this->II1I1IL->{$this->II1I1I1["process_error"]}($this->II1I1IL->II1llIL, $this->_parseErrorInfo[I14069], "images", $aData["file_name"]); $this->TTIIlIl($this->Il11l1L +$this->Il11l11 *$llLLll1, $this->II1LIIL); }}else {$this->TTIIlT1(I14073, I14053); $II1LIlI =false; }$this->TTIIlII(array(I14063=>I14064)); return $II1LIlI; }function TTTl1TT() {$this->llLlLLI["SET_PRICE"] =array(); if ($this->llLlL1l["value"] != I13985) $this->llLlLLI["ATTR_MAIN_PRICE"] =$this->llLlL1l["value"]; $this->llLlLLI[I14065] =$this->llLlL11.I14074.$this->llLlLLI[I14065]; $this->llLlLLI["ATTR_CATEGORYID"] =$this->llLlL11.I14074.$this->llLlLLI["ATTR_CATEGORYID"]; $this->llLlLLI["ATTR_PICTURE"] =str_replace(basename($this->llLlLLI["ATTR_PICTURE"]), $this->llLlL11.I14074.basename($this->llLlLLI[I14075]), $this->llLlLLI[I14075]); if ($this->llLlL1L["ITEM_ID_PARENT_EXTERNAL"] != I13985) $this->llLlLLI["ATTR_CATEGORYID"] =$this->llLlL1L["ITEM_ID_PARENT_EXTERNAL"]; $aItemData =$this->TT1TIT1($this->_config["OFFER"], $this->llLlLLI); $this->_rapidImportItemsCB($aItemData); $this->llLlLLI =array(); }function TI1IT1l($aMap, &$aData) {$aPriceData =$this->TT1TIT1($aMap[I14076], $aData); return $aPriceData; }function TT1TITl($aMap, &$aData) {$prices =array(); foreach((array)$aData as $numPrice=>$aPriceData) {$prices[$numPrice] =$this->TT1TIT1($aMap, $aPriceData); }return $prices; }function TI1IT11($llLLlLl) {$llLLlLL =I13985; if ($llLLlLl != I13985 && $this->llLlL1L[I14039] != "import_img_omit" ){$llLLlLL =$GLOBALS["CUSTOM_PICTURES_HTTP_PATH"].$this->module->I11lLl1.I14027. $this->module->cms->TTITI11($this->TTIIll1($llLLlLl)); if ($this->llLlL1L[I14039] == "import_img_download") {if (!array_key_exists($llLLlLl, $this->Il11l1I)) {$this->Il11l1I[$llLLlLl] =1; }else {$this->Il11l1I[$llLLlLl]++; }}}return $llLLlLL; }function TT1TIT1($aMap, &$aData) {$aRowData =array(); foreach ((array) $aMap as $mappedField => $aRule) {switch ($aRule["operation"]) {case I14077 :$aRowData[$mappedField] =(isset($aData[$aRule["fields"]])? $aData[$aRule["fields"]] :$aRule["default"]); break; case "value" :$aRowData[$mappedField] =$aRule[I14078]; break; case I14021 :foreach ((array) $aRule["set"] as $value => $llLLlL1) {if ($aData[$aRule[I14078]] == $value) {$aRowData[$mappedField] =$aData[$llLLlL1]; break; }}if ($aRowData[$mappedField] == I13985 )$aRowData[$mappedField] =$aData[$aRule["default"]]; break; case "picture" :$aRowData[$mappedField] =$this->TI1IT11($aData[$aRule[I14078]]); break; case "picture_copy" :$aRowData[$mappedField] =$aRowData[$aRule[I14078]]; break; }}return $aRowData; }function TI1IITT() {if ($this->llLlL1L[I14042] == "yandex_import_item_yandex" || $this->llLlL1L[I14042] == "yandex_import_cat_yandex" ){$aCatData =array(); $aCatData["SET_PRICE"] =array(); $aCatData[I14065] ="__YANDEX_".$this->module->langData; $aCatData["TAG_CATEGORY"] =I14079; $aCatData["IS_DELETED"] ="true"; $aCatData =$this->TT1TIT1($this->_config[I14061], $aCatData); $aCatData["ID_PARENT_EXTERNAL"] =I13985; $aCatData[I14033] =$aCatData["ID_EXTERNAL"]; $aCatData[I14080] =$aCatData["ID_PARENT_EXTERNAL"]; $this->II1I1IL->{$this->II1I1I1["prepare_categories"]}($aCatData, true); $this->_rapidImportCategoriesCB($aCatData, $aCatData["ID_EXTERNAL"]); }$this->llLlL1L["ITEM_ID_PARENT_EXTERNAL"] =I13985; $this->llLlL1L["CAT_ID_PARENT_EXTERNAL"] =I13985; if ($this->llLlL1L[I14042] == "yandex_import_item_yandex" ){$this->llLlL1L["ITEM_ID_PARENT_EXTERNAL"] =$aCatData["ID_EXTERNAL"]; $this->llLlL1L["YandexCategory"] =true; $this->llLlL1L[I14081] =true; }if ($this->llLlL1L[I14042] == "yandex_import_cat_yandex" ){$this->llLlL1L["CAT_ID_PARENT_EXTERNAL"] =$aCatData["ID_EXTERNAL"]; $this->llLlL1L[I14081] =true; }}function KeepItemCatId() {return $this->llLlL1L[I14081]; }function _EncodeMbCB($str) {return mb_convert_encoding($str, 'UTF-8', $this->llLl1IL); }}