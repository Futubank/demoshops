<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       19393 xkqwtgqyzwymmtkkzrmxnwzgmprmnpmkpwkrmzwpmrixglxpqrruuttuluuugtizqtpypnir
 */ ?><?php foreach(array(14119=>"\\'",14120=>'',14121=>"'",14122=>'?}',14123=>'{?VzjUqd?}',14124=>'!',14125=>'Zttr',14126=>'COQrQ',14127=>'PrHuG',14128=>'[~',14129=>'DQt',14130=>'MPnHrQ',14131=>'JHC|GrMHrMtB',14132=>'DQJQWt',14133=>'MnnQr',14134=>'?',14135=>'HrSQr',14136=>'LHMn',14137=>'}',14138=>'wHrQ',14139=>"tZYJQ",14140=>"tBGQ",14141=>"MnDQrt",14142=>"vZJ|DQt|DQJ",14143=>"!",14144=>"=",14145=>"DtZrt",14146=>"LHMn",14147=>"",14148=>"COQrQ",14149=>"~;*?\\t\\r\\n&-~D",14150=>'ZJMZD',14151=>'wid|wHrQ',14152=>'IHSMfMQS|SZtQ') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class SQLProcessor{ function TI1lTl1($sql){ $sql =str_replace('\\\\', '', $sql); $sql =str_replace(I14119, '', $sql); $asql =mb_split('\'', $sql); $sql =''; if(count($asql)%2==0) $asql[count($asql)-1] ="'".$asql[count($asql)-1]; foreach($asql as $n=>$part) {if($n%2 == 0) $sql .= $part; }return mb_strtolower($sql); }function _fldAndVal($data){ $fields =I14120; $values =I14120; foreach($data as $field => $value){ $fields .= '`' .$field .'`,'; $value =trim($value); $values .= (mb_strpos($value, '=|') !== 0 ?"'" .$value .I14121 :mb_substr($value, 2)) .','; }$fields =mb_substr($fields, 0, -1); $values =mb_substr($values, 0, -1); return array($fields, $values); }function genInsertSQL($tablename, $data, $lowPri =false){ list($fields, $values) =$this->_fldAndVal($data); $res ='INSERT ' .($lowPri ?'LOW_PRIORITY ' :I14120) .'INTO ' .$tablename .I14122 .$fields .') VALUES (' .$values .')'; return $res; }function TI1lT1T($tablename, $data, $lowPri =false){ list($fields, $values) =$this->_fldAndVal($data); $res ='REPLACE ' .($lowPri ?'LOW_PRIORITY ' :I14120) .$tablename .I14122 .$fields .I14123 .$values .')'; return $res; }function genUpdateSQL($tablename, $data, $where, $lowPri =false){ $fields =I14120; foreach($data as $field => $value){ $value =trim($value); $value =mb_strpos($value, '=|') !== 0 ?I14121 .$value .I14121 :mb_substr($value, 2); $fields .= '`' .$field .'`=' .$value .I14124; }$fields =mb_substr($fields, 0, -1) .' '; $res ='UPDATE ' .($lowPri ?'LOW_PRIORITY ' :I14120) .$tablename .' SET ' .$fields .$where; return $res; }}class CMSSQLProcessor extends SQLProcessor {public $llL1ll1; public $_data; function CMSSQLProcessor() {$this->llL1ll1 =array(); $this->_data =array(); }function init($sql) {$this->_data =array( I14125 => I14120, 'type' => I14120, 'table' => array(), 'alias' => array(), 'join' => array(), I14126 => array('start' => -1, 'end' => -1), 'parsed' => false, 'extra' => array() );$this->llL1ll1 =$this->TI1lITT($sql); $llL1lLI =&$this->llL1ll1; $res =&$this->_data; $llL1lLl =array(I14127, 'having', 'order', 'limit'); $pos =0; if(mb_substr($llL1lLI[$pos], 0, 2) == '/*') {$llL1lLL =sizeof($llL1lLI); $found =false; while (($pos <$llL1lLL) && (!$found)) {$res[I14125] .= $llL1lLI[$pos]; $llL1lLI[$pos] =I14120; if(mb_substr($res[I14125], -2) == I14128) {$found =true; }$pos ++; }}$res['type'] =$llL1lLI[$pos++]; switch($res['type']) {case 'insert': $found =$this->TI1lITI(Array('values', I14129, 'select'), $llL1lLI); if($found) {$res['extra']['val_set_sel'] =$found; while(in_array($llL1lLI[$pos], Array('low_priority', I14130, 'delayed', 'into'))) {$pos++; }$this->TI1lITl($res, $llL1lLI[$pos]); $res['parsed'] =true; }break; case 'update': if(($llL1lL1 =array_search(I14129, $llL1lLI)) !== false) {while(in_array($llL1lLI[$pos], Array(I14131, I14130))) {$pos++; }$this->TI1lITl($res, $llL1lLI[$pos], (($pos +1 == $llL1lL1)? I14120: $llL1lLI[$pos +1])); $res['parsed'] =true; }break; case 'delete': if(($llL1lL1 =array_search('from', $llL1lLI)) !== false) {$this->TI1lITl($res, $llL1lLI[$llL1lL1 +1]); $res['parsed'] =true; }break; case I14132: if(($pos =array_search('from', $llL1lLI)) !== false) {$res['extra']['from'] =$pos; $llL1l1I =Array('left', I14133, 'right'); $llL1lL1 =$this->TI1lITI(array_merge(Array('join', I14126), $llL1lLl), $llL1lLI); if($llL1lL1 === false) {$llL1lL1 =sizeof($llL1lLI); }elseif($llL1lLI[$llL1lL1] == 'join' && in_array($llL1lLI[$llL1lL1 -1], $llL1l1I)) {$llL1lL1--; }$llL1l1l =I14120; for($i =$pos +1; $i <$llL1lL1; $i++) {$llL1l1l .= $llL1lLI[$i].' '; }$aTables =explode(I14124, $llL1l1l); foreach($aTables as $table) {$aTab =explode(I14134, trim($table)); $this->TI1lITl($res, $aTab[0], (empty($aTab[1]) || $aTab[1] != 'as')? ((empty($aTab[1]))? $aTab[0]: $aTab[1]): $aTab[2]); }if(isset($llL1lLI[$llL1lL1]) && (in_array($llL1lLI[$llL1lL1], $llL1l1I) || $llL1lLI[$llL1lL1] == 'join')) {if($llL1lLI[$llL1lL1] != 'join') {$llL1lL1 =array_search('join', $llL1lLI); }$llL1lL1++; $endPos =$this->TI1lITI(Array(I14126, I14135), $llL1lLI); if($endPos === false) {$endPos =sizeof($llL1lLI); }$llL1l1L =array_slice($llL1lLI, $llL1lL1, $endPos -$llL1lL1); $llL1l11 =$llL1lL1; $llL1LII =10; do {$this->TI1lITl($res, $llL1l1L[0], ($llL1l1L[1] != 'as')? (($llL1l1L[1] == 'on')? $llL1l1L[0]: $llL1l1L[1]): $llL1l1L[2]); $llL1lL1 =array_search('join', $llL1l1L); $llL1LIl =$llL1l11 +array_search('on', $llL1l1L) +1; $llL1LIL =$llL1l11 +(($llL1lL1 === false)? count($llL1l1L) -1 :$llL1lL1 -1 -intval(in_array($llL1l1L[$llL1lL1 -1], $llL1l1I))); $res[I14136][count($res['table']) -1] =Array('start' => $llL1LIl, 'end' => $llL1LIL); $llL1l11 += $llL1lL1 +1; $llL1l1L =array_slice($llL1l1L, $llL1lL1 +1); }while($llL1lL1 !== false && $llL1LII-- >0); }$res['parsed'] =true; }break; }$llL1lL1 =array_search(I14126, $llL1lLI); if($llL1lL1 !== false) {$endPos =$this->TI1lITI($llL1lLl, $llL1lLI); if($endPos === false) {$endPos =sizeof($llL1lLI); }$llL1lL1++; $llL1lLI =array_merge(array_slice($llL1lLI, 0, $llL1lL1), Array(I14137), array_slice($llL1lLI, $llL1lL1, $endPos -$llL1lL1), Array(')'), array_slice($llL1lLI, $endPos)); $endPos++; $res[I14126]['start'] =$llL1lL1; $res[I14126]['end'] =$endPos; }}function data() {return $this->_data; }function TI1lT1I() {return implode(" ", $this->llL1ll1); }function TI1lT1l(){ $Core =&$GLOBALS[I14138]; if(!is_object($Core)){ return TRUE; }$llL1LI1 =defined('SYS_A_RIGHT') ?SYS_A_RIGHT :AMI_Core::SYS_RIGHTS_ALL; $vData =&$this->_data; $aLexems =&$this->llL1ll1; $allowed =true; switch($vData["type"]) {case "update": $llL1LlI =$Core->getRights($vData["table"][0], I14139); if(($llL1LlI &$llL1LI1) != $llL1LI1){ $this->TI1lIT1($this->_getRightsFilter($Core, $vData["type"], $vData[I14139][0], $vData["alias"][0]), $vData["where"]["start"]); $llL1Lll =$this->TI1lIIT($Core, $vData[I14140], $vData[I14139][0]); $llL1LlL =""; foreach($llL1Lll as $field => $val) {$llL1LlL .= $field."=".$val.","; }$this->TI1lIT1($llL1LlL, -1, "set", 1); }break; case I14141: $aFields =$Core->GetRightsFields($aLexems, $vData[I14139][0]); if(sizeof($aFields) >0) {if($aLexems[$vData["extra"]["val_set_sel"]] == "values") {$aLexems[$vData["extra"][I14142] -1] =mb_substr($aLexems[$vData["extra"][I14142] -1], 0, -1). ",".implode(",", array_keys($aFields)).")"; $lastItem =sizeof($aLexems) -1; $aLexems[$lastItem] =mb_substr($aLexems[$lastItem], 0, -1). I14143.implode(I14143, $aFields).")"; }if($aLexems[$vData["extra"][I14142]] == "set") {$llL1LlL =""; foreach($aFields as $field => $val) {$llL1LlL .= $field.I14144.$val.I14143; }$this->TI1lIT1($llL1LlL, -1, "set", 1); }}else {}break; case "delete": $llL1LlI =$Core->GetRights($vData[I14139][0], I14139); if(($llL1LlI &$llL1LI1) != $llL1LI1){ $this->TI1lIT1($this->_getRightsFilter($Core, $vData[I14140], $vData[I14139][0], $vData["alias"][0]), $vData["where"][I14145]); }break; case "select": $llL1Ll1 =false; $llL1LLI =""; $llL1LlI =$llL1LI1; $userId =$Core->GetUserId(); foreach($vData[I14139] as $index => $table) {$llL1LlI &= $Core->GetRights($table, I14139); if($Core->HasRecordRights($table)) {$filter =$this->_getRightsFilter($Core, $vData[I14140], $table, $vData["alias"][$index], true); if(!isset($vData["join"][$index]) || !is_array($vData[I14146][$index])) {$llL1LLI .= $filter; }else {if(($llL1LlI &$llL1LI1) != $llL1LI1){ $aLexems[$vData[I14146][$index][I14145]] =$filter."(".$aLexems[$vData[I14146][$index][I14145]]; $aLexems[$vData[I14146][$index]["end"]] .= ")"; }}$llL1Ll1 =true; }}if($llL1Ll1) {if(($llL1LlI &$llL1LI1) != $llL1LI1){ $this->TI1lIT1($llL1LLI, $vData["where"][I14145] -1, I14147, 1); }}break; default: break; }return $allowed; }function TI1lT11($sql) {if($this->_data[I14140] == I14141 || $this->_data[I14140] == "update") {$sql =$this->_data[I14140]." ".$this->_data[I14139][0]; if($this->_data["where"][I14145] >0) {$sql .= " where"; for($i =$this->_data[I14148][I14145]; $i <= $this->_data[I14148]["end"]; $i++) {$sql .= $this->llL1ll1[$i]; }}}return $sql; }function TI1lITT(&$llL1LLl){ $aSql =Array(); $sql =str_replace("\\\\", "__", $llL1LLl); $sql =str_replace(I14119, "__", $sql); $lllLlL1 =mb_strlen($sql); if(preg_match(I14149, $sql, $m)) {$pos =mb_strlen($m[0]); }else {$pos =0; }while($pos <$lllLlL1) {$s =mb_substr($sql, $pos); if(preg_match("/^([^' \\t\\n\\r]+)[ \\t\\n\\r]*/s", $s, $m)) {$aSql[] =mb_strtolower($m[1]); $pos += mb_strlen($m[0]); }elseif(preg_match("/^'[^']*'[ \\t\\n\\r]*/s", $s, $m)) {$aSql[] =mb_substr($llL1LLl, $pos, mb_strlen($m[0])); $pos += mb_strlen($m[0]); }else {trigger_error("DB::_getSQLLexems: Invalid construction:\n$sql\n\nString:\n$s", E_USER_ERROR); }}return $aSql; }function TI1lITI($IILLIl1, $IlI1Ll1){ $res =false; foreach($IILLIl1 as $val){ if(($res =array_search($val, $IlI1Ll1)) !== false){ break; }}return $res; }function TI1lITl(&$llL1LLL, $IIl11LI, $llL1LL1 =I14120) {$llL1LLL['table'][] =preg_replace('/[^\a-zA-Z_]+/', I14120, $IIl11LI); $llL1LLL[I14150][] =$llL1LL1; }function TI1lIT1($llL1LlL, $llL1L1I, $llL1L1l =I14147, $llL1L1L =0) {if($llL1LlL != I14147) {if($llL1L1I <= 0 && $llL1L1l != I14147) {$llL1lL1 =intval(array_search($llL1L1l, $this->llL1ll1)); }else {$llL1lL1 =$llL1L1I; }$llL1lL1 += $llL1L1L; if($llL1lL1 >0) {$this->llL1ll1 =array_merge(array_slice($this->llL1ll1, 0, $llL1lL1), Array($llL1LlL), array_slice($this->llL1ll1, $llL1lL1)); }else {trigger_error("DB::_addClause: Lexem ".$llL1L1l." missing. Type: ".$this->_data[I14140]."; Table:".$this->_data[I14139][0], E_USER_WARNING); }}}function _getRightsFilter(&$Core, $cType, $IIl11LI, $IILlLL1 =I14120) {$res =I14120; if($Core->HasRecordRights($IIl11LI)) {$prefix =empty($IILlLL1) ?I14120 :$IILlLL1 .'.'; $userId =(int)$Core->GetUserId(); $llL1L11 =I14132 != $cType || !AMI::editModeEnabled(); if(get_class($Core) === I14151){ $vMod =&$Core->TTllTIl($IIl11LI); $llL11II =is_object($vMod) && !$Core->IsModerator($vMod->GetName(), $userId) && ($llL1L11 || AMI_Skin::isModuleSpecialMode($vMod->GetName()) );}else{ $modId =$Core->getModIdByTable($IIl11LI); $llL11II =$modId && !$Core->doIgnoreOwner($modId, $userId) && ($llL1L11 || AMI_Skin::isModuleSpecialMode($modId) );}if($llL11II){ $res =I14122 .$prefix ."`id_owner` = " .$userId .") AND "; }}return $res; }function TI1lIIT(&$Core, $cType, $IIl11LI) {$res =Array(); if($Core->HasRecordRights($IIl11LI)){ $oModule =&$Core->TTllTIl($IIl11LI); if($oModule && AMI::isResource($oModule->Name .'/table/model')){ $res[AMI::getResourceModel($oModule->Name .'/table')->hasField(I14152) ?I14152 :'date_modified'] ='NOW()'; }else{ $res[I14152] ='NOW()'; }}return $res; }}