<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       19553 xkqwywynuszxgxqsinmyztyqryxunuuzsmxwnnpqqwskrykwmgmzlppypqkgqpmugwwkpnir
 */ ?><?php foreach(array(14153=>'wjzddqd|gzTo',14154=>'RhhT|gzTo',14155=>'uMS',14156=>'tZr|QxtrZWt',14157=>'SZtZ',14158=>'rQnZIQ',14159=>'tHtZJFMJQD',14160=>'DMtQZrWO|WrQZtQ',14161=>'tZYJQDsHnQ',14162=>'SY|SuIG|tMWK',14163=>'+',14164=>'untZr|QnS',14165=>'SHnQ',14166=>'DMtQZrWO|',14167=>'mmJmJJj',14168=>'tDtZIG',14169=>'fMJQD',14170=>'tZYJQD',14171=>'SuIG|fMJQ',14172=>'WrQZtQ',14173=>'SY|SuIG|DtZrt',14174=>'GQrWQnt',14175=>'nuI|QvQntD',14176=>'q|dz|cRmTq',14177=>'SY',14178=>'untZr|DtZrt',14179=>'%') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .'BaseObject.php'; require_once $GLOBALS[I14153] .'PHPTar.php'; require_once $GLOBALS[I14153] .'PHPMysqlDump.php'; require_once $GLOBALS[I14153] .'SysDaemon.php'; function TI1lIII() {if(mb_strpos(PHP_OS,'WIN')!==false) return 1; $llL11Il =$GLOBALS[I14154].'_ownertest'; @unlink($llL11Il); if(!($fd=@fopen($llL11Il,'w'))) return 0; @fclose($fd); $llL11IL =@stat($llL11Il); @unlink($llL11Il); if (file_exists($GLOBALS[I14154].'/masterhost')) {return 1; }else {$llL11I1 =@stat($GLOBALS[I14154]); if(!is_array($llL11IL) || !is_array($llL11I1) || !isset($llL11IL['uid']) || !isset($llL11I1[I14155])) return -1; return $llL11IL[I14155]===$llL11I1[I14155] ?1 :0; }}class BRUDaemon extends SysDaemon {function BRUDaemon($auth,$timeout=10) {$url =$GLOBALS['SHARED_OPT']['bru_daemon_url']; $this->SysDaemon($url,$auth,0,$timeout); $this->TI1l1Tl('bru_daemon'); }function ping() {return $this->TI1l1T1('ping'); }function TI1lIIl($fname,$dir=false) {if($this->TI1l1T1("untar $fname $dir")) return true; if(!$this->TTTITl1()) return false; $resp =$this->GetLastResponse(); if(!preg_match('/\d+\s+opstart:(\d)/',$resp,$m)) $this->III1Ill =true; else $this->III1Ill =intval($m[1])!=0; return false; }}class DaemonTar extends BaseObject {public $fname; public $daemon; function DaemonTar($auth,$fname,$to=20) {$this->BaseObject(); $this->TTTIT1I('tar_extract'); $this->fname =$fname; $this->daemon =new BRUDaemon($auth,$to); }function extract($dir) {$this->daemon->TTTIT11('bru_daemon',$this); if(!$this->daemon->TI1lIIl($this->fname,$dir)) {$this->TTTITll($this->daemon,true); return false; }$resp =$this->daemon->GetLastResponse(); if(!preg_match('/^200\s+OK\s+extracted:(\d+)/',$resp,$m)) {$this->III1Ill =true; return $this->TTTITTI("BRUDaemon returned unknown response: '$resp'"); }$d =array('extractedFiles'=>intval($m[1])); $this->TTTIITI(I14156,'done',$d); return true; }function TTTIITT($group,$event,&$data) {if($group!='bru_daemon' || $event!='tick') return; $t =explode(' ',$data[I14157]); if(!isset($t[1])) return; $t =explode(':',$t[1]); if(!isset($t[1])) return; $d =array('extractedFiles'=>intval($t[1])); $this->TTTIITI(I14156,'progress',$d); }}define('ARCH_TYPE_UNKNOWN', 0); define('ARCH_SYSTYPE_UNKNOWN', 0); class SiteArchive extends BaseObject {public $docroot; public $db; public $gz; public $lllLL1l; public $archive; public $llL11lI; public $llL11ll; public $llL11lL; public $llL11l1; public $llL11LI; public $specTables; public $llL11Ll; public $lllLLLL; public $llL11LL; public $operation; function SiteArchive(&$db) {$this->BaseObject(); $this->TTTIT1I('sitearch_create'); $this->TTTIT1I('sitearch_restore'); $this->docroot =$GLOBALS[I14154]; $this->gz =true; $this->db =&$db; $this->llL11lL =array(); $this->llL11l1 =array(); $this->llL11LI =false; $this->specTables =array(); $this->llL11Ll =array(); $llL11L1 =mb_substr($GLOBALS['IIlIlIL'],mb_strlen($this->docroot)); $this->llL11LL =array(); $this->llL11lI =$llL11L1.'dbdumps/'; $this->lllLL1l =false; $this->lllLLLL =false; }function TI1lII1(&$var,$list) {foreach($list as $k=>$v) $var[$v] =1; }function TI1lIlT($list) {SiteArchive::TI1lII1($this->llL11lL,$list); }function TI1lIlI($list) {SiteArchive::TI1lII1($this->llL11l1,$list); }function TI1lIll($list) {if(is_array($list)) {$this->llL11LI =array(); SiteArchive::TI1lII1($this->llL11LI,$list); }else {$this->llL11LI =$list; }}function TI1lIl1($list,$type=I14158) {if($type==I14158) SiteArchive::TI1lII1($this->specTables,$list); elseif($type=='nodata') SiteArchive::TI1lII1($this->llL11Ll,$list); }function TTTIITT($group,$event,&$data) {switch($group) {case 'tar_save': if($event!='progress' && $event!='done') break; $llL111I =$data[I14159]==0 ?100 :round($data['savedFiles']/$data[I14159]*100); $d =array('percent'=>$llL111I,'bytes'=>$data['writtenBytes']); $this->TTTIITI(I14160,'tar_tick',$d); break; case 'dbdump_write': if($event!='progress') break; $llL111I =$data['tablesTotal']==0 ?100 :round($data[I14161]/$data['tablesTotal']*100); $d =array('percent'=>$llL111I,'bytes'=>$data['bytes']); $this->TTTIITI(I14160,I14162,$d); break; case I14156: if($event!='progress' && $event!='done') break; $llL111l =isset($data['extractedBytes']) ?$data['extractedBytes'] :I14163; $d =array('filesDone'=>$data['extractedFiles'],'bytes'=>$llL111l); $llL111L =$event=='done' ?I14164 :'untar_tick'; $this->TTTIITI('sitearch_restore',$llL111L,$d); break; case 'dbdump_restore': if($event!='progress' && $event!=I14165) break; $d =array(I14161=>$data[I14161],'bytes'=>$data['bytes']); $llL111L =$event==I14165 ?'db_dump_end' :I14162; $this->TTTIITI('sitearch_restore',$llL111L,$d); break; default: break; }}function TI1lI1T($event,$data=array()) {$this->TTTIITI(I14166.$this->operation,$event,$data); }function prepare($data) {$this->lllLL1l =array( 'arch_type' => ARCH_TYPE_UNKNOWN, 'sys_type' => ARCH_SYSTYPE_UNKNOWN, 'tstamp' => time(), 'site_id' => $GLOBALS[I14167], 'cms_versions' => $GLOBALS['Core']->getVersion(), 'description' => '' );$keys =array(I14168,'description','arch_type','sys_type'); foreach($keys as $k) {if(isset($data[$k])) $this->lllLL1l[$k] =$data[$k]; }if($this->TTTIlT1($data)===false) return false; if($this->archive[0]!='/') $this->docroot.$this->archive; $this->lllLL1l[I14169]['include'] =array_keys($this->llL11lL); $this->lllLL1l[I14169]['exclude'] =array_keys($this->llL11l1); $this->lllLL1l['db'] =array(); if(is_array($this->llL11LI) || $this->llL11LI!==false) $this->lllLL1l['db'][I14170] =$this->llL11LI; else unset($this->lllLL1l['db']); if(isset($this->lllLL1l['db'])) {$llL1111 =$this->db->TT1lITI(); if($llL1111===false) {return $this->TTTITTI("Cannot make DB dump: mysql version unknown"); }$this->lllLL1l['db'][I14171] =$this->llL11ll; $this->lllLL1l['db']['mysqlver'] =$llL1111; }return true; }function TI1lI1I() {if(!$this->TTTIlII()) return false; return basename($this->archive); }function TI1lI1l() {if(!$this->TTTIlII()) return false; return dirname($this->archive).'/'; }function tstamp() {return $this->lllLL1l[I14168]; }function TI1lI11() {return $this->lllLL1l['site_id']; }function TI1TTT1($fname) {$this->lllLLLL =$fname; }function create() {$cleanup =true; $size =0; $this->operation =I14172; $this->TTTITTT(); $this->III1Ill =false; $this->TTTIT1l(I14160); $this->llL11LL =array(); $ll1IIII =array(); do {if($this->llL11LI!==false) {$dest =$this->docroot.$this->llL11lI.$this->llL11ll; $dump =new PHPMysqlDump($this->db,$dest); $this->llL11LL[] =$dest; if(is_array($this->llL11LI)) {$dump->TITl1lI(array(I14170=>array_keys($this->llL11LI))); }if(sizeof($this->specTables)) $dump->TITl1lI(array('specTables'=>array_keys($this->specTables))); if(sizeof($this->llL11Ll)) $dump->TITl1lI(array('nodata'=>array_keys($this->llL11Ll))); if(!$dump->TIl1l11()) {$this->TTTITll($dump); break; }$dump->TITl1lI(array('num_events'=>10)); $dump->TTTIT11('dbdump_write',$this); $this->TI1lI1T(I14173,array('numTables'=>$dump->numTables())); if(!$dump->write()) {$this->TTTITll($dump); if($dump->TTTITI1('E_DUMP_WRITE')) {$this->TTTITTI("Cannot create backup: dbdump returned E_DUMP_WRITE",'E_SA_WRITE',false); }break; }$this->TI1lI1T(I14162,array(I14174=>100)); $ll1IIII[] =$this->llL11LL[] =$this->llL11lI.$this->llL11ll; }$IIlILL1 =new PHPTar($this->archive,$this->gz); $IIlILL1->meta(serialize($this->lllLL1l)); $this->TI1lIlT($ll1IIII); $this->TI1lI1T('files_prepare_start'); $IIlILL1->options(array('basedir'=>$this->docroot)); foreach($this->llL11lL as $f=>$tmp) $IIlILL1->add($f); foreach($this->llL11l1 as $f=>$tmp) $IIlILL1->exclude($f); $ll1IIIl =$IIlILL1->TI1TTIT(); $this->TI1lI1T('files_prepare_end',array('numFiles'=>$ll1IIIl)); $IIlILL1->options(array(I14175=> $ll1IIIl>100 ?intval($ll1IIIl/100) :1)); $this->TI1lI1T('tar_start',$data=false); $IIlILL1->TTTIT11('tar_save',$this); if($this->lllLLLL!==false) $IIlILL1->TI1TTII($this->lllLLLL); if(!$IIlILL1->save()) {$this->TTTITll($IIlILL1); if($IIlILL1->TTTITI1('E_TAR_WRITE')) {$this->TTTITTI("Cannot create backup: tar returned E_TAR_WRITE",I14176,false); }break; }$this->TI1lI1T('tar_tick',array(I14174=>100)); $size =filesize($this->archive); @chmod($this->archive,0666); }while(false); if($cleanup) $this->TI1llTI(); if(sizeof($this->errors())) {$this->TI1llTT(); $this->TTTITTl(); return false; }$this->TI1lI1T(I14165); return $size; }function TI1llTT() {@unlink($this->archive); }function TTTIlII() {if($this->lllLL1l===false) {if(!file_exists($this->archive)) return $this->TTTITTI("Cannot load '$this->archive': file not found"); $this->gz =true; $IIlILL1 =new PHPTar($this->archive,$this->gz); $meta =$IIlILL1->meta(); if($meta===false) {$this->TTTITll($IIlILL1,false); return $this->TTTITTI("Cannot get metadata from '$this->archive'"); }$meta =unserialize($meta); if(!isset($meta) || !isset($meta['arch_type']) || !isset($meta['sys_type'])) return $this->TTTITTI("Invalid archive metadata"); $this->lllLL1l =$meta; }$this->llL11ll =$this->lllLL1l[I14177][I14171]; return true; }function restore($IIlIlLl=false) {if(!$this->TTTIlII()) return false; $cleanup =true; $this->llL11LL =array(); $this->operation ='restore'; $this->TTTITTT(); $this->III1Ill =false; $this->TTTIT1l('sitearch_restore'); do {if(!file_exists($this->archive)) {$this->TTTITTI("Cannot find archive $this->archive"); break; }$this->gz =preg_match('/\.gz$/',$this->archive); if($IIlIlLl===false) {$IIlILL1 =new PHPTar($this->archive,$this->gz); $IIlILL1->options(array('event_step'=>50)); }else {$IIlILL1 =new DaemonTar($IIlIlLl,mb_substr($this->archive,mb_strlen($this->docroot))); }$IIlILL1->TTTIT11(I14156,$this); $this->TI1lI1T(I14178); if(!$IIlILL1->extract($this->docroot)) {$this->TTTITll($IIlILL1); if($IIlILL1->TTTITI1('E_TAR_WRITE')) {$this->TTTITTI("Cannot unpack site archive: tar returned E_TAR_WRITE",I14176,false); }break; }$this->III1Ill =true; $this->TI1lI1T(I14164,$data=false); if(isset($this->llL11ll)) {$src =$this->docroot.$this->llL11lI.$this->llL11ll; if(file_exists($src)) {$this->llL11LL[] =$src; $dump =new PHPMysqlDump($this->db,$src); $dump->TTTIT11('dbdump_restore',$this); $this->TI1lI1T(I14173); if(!$dump->restore()) {$this->TTTITll($dump,false); break; }}}}while(false); if($cleanup) {$this->TI1llTI(); }if(sizeof($this->errors())!=0) {$this->TTTITTl(); return false; }$this->TI1lI1T(I14165); return true; }function delete() {if(file_exists($this->archive) && !@unlink($this->archive)) return $this->TTTITTI("Cannot delete archive '$this->archive'"); return true; }function TI1llTI() {foreach ($this->llL11LL as $i=>$f) {if($f[0]!=='/' && $f[1]!==I14179) $f =$this->docroot.$f; if(!@unlink($f)) $this->TTTITlT("Cannot unlink $f"); }return true; }}?>