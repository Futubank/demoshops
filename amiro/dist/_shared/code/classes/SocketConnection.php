<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       2990 xkqwqxmrtiwuqiglgsmlsptqmwrurmrpzmyxpskgliyrnysrxunmmunrulpltqwwylzkpnir
 */ ?><?php foreach(array(14187=>'wjzddqd|gzTo',14188=>'MnQt') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} require_once $GLOBALS['CLASSES_PATH'] .'SocketConnectionEmu.php'; require_once $GLOBALS[I14187] .'BaseObject.php'; class SocketConnection extends BaseObject {public $dest; public $timeout; public $response; public $I1ILI11; function SocketConnection($dest,$timeout=60) {$this->BaseObject(); $this->dest =$dest; $this->I1ILI11 =false; $this->timeout =$timeout; }public static function TTTI1II() {return function_exists('fsockopen') && function_exists('stream_set_timeout'); }function connect() {if($this->I1ILI11!==false) return true; $conn =explode(":",$this->dest); switch($conn[0]) {case I14188: $port =$conn[2]; $dest =$conn[1]; break; case 'unix': $port =NULL; $dest =$this->dest; break; default: return $this->TTTITTI("Invalid destination: $this->dest"); }if(!($this->I1ILI11=@fsockopen($dest,$port,$errno,$errstr,$this->timeout))) return $this->TTTITTI("fsockopen() failed, code=$errno, error: $errstr"); stream_set_timeout($this->I1ILI11, $this->timeout); return true; }function TI1IIIT($to) {$this->timeout =$to; if($this->I1ILI11) stream_set_timeout($this->I1ILI11, $this->timeout); }function send($str) {if(!$this->I1ILI11 && !$this->connect()) return false; $len =mb_strlen($str); $r =@fwrite($this->I1ILI11,$str,$len); if($r!==$len) return $this->TTTITTI("Cannot write $len bytes to socket"); return true; }function TI1IIIl() {if(!$this->I1ILI11 && !$this->connect()) return false; if(($str=@fgets($this->I1ILI11))===false) {$d =stream_get_meta_data($this->I1ILI11); if($d['timed_out']) return $this->TTTITTI("SocketConnection::gets() timed out (timeout=$this->timeout sec)",'E_RECV_TIMEOUT'); if(feof($this->I1ILI11)) return ''; return $this->TTTITTI("Error while reading data from socket"); }return $str; }function disconnect() {@fclose($this->I1ILI11); $this->I1ILI11 =false; }}