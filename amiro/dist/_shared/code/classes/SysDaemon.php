<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       8522 xkqwxyqllwwsqkgmslslgitpiuglpkgxpiwwzrxwtizzpxnuururymrlupwttrpmrkixpnir
 */ ?><?php foreach(array(14216=>'yZDQhYLQWt`GOG',14217=>'',14218=>'tMWK',14219=>'DBD|SZQIHn',14220=>"\r\n") as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} define('SYSD_F_CONFIRM',0x01); require_once $GLOBALS['CLASSES_PATH'] .I14216; require_once $GLOBALS['CLASSES_PATH'] .'SocketConnection.php'; if($GLOBALS["BUILDER_VERSION"] <2){ class SysDaemon extends BaseObject {public $auth; public $url; public $response; public $timeout; public $II1LLLL; public $ll1II1l; public $ll1II1L; function SysDaemon($dest,$auth='none',$flags=0,$timeout=40) {$this->BaseObject(); $this->auth ="auth $auth"; $this->url =$dest; $this->response =$this->II1LLLL =I14217; $this->timeout =$timeout; $this->ll1II1l =false; $this->ll1II1L =$flags; }function TI1l1Tl($group='sys_daemon') {$this->ll1II1l =$group; if($group!==false) $this->TTTIT1I($group); }function TI1l1T1($ll1II11,$params=false) {$this->III1Ill =false; $this->II1LLLL =I14217; $ret =false; $conn =new SocketConnection($this->url,$this->timeout); do {if(is_array($params)) $ll1II11 .= ' '.base64_encode(serialize($params)); if(!$conn->send($this->auth." $ll1II11\r\n")) {$this->II1LLLL =$conn->errorsAsString(); break; }$this->III1Ill =true; while(true) {if(!($resp =$conn->TI1IIIl())) {$this->II1LLLL =$conn->errorsAsString(); break 2; }$this->response =trim($resp); $a =explode(' ',$resp); $code =intval($a[0]); if($code==201) {if($this->ll1II1l!==false && $this->TTTIITl($this->ll1II1l)) {$d =array('data'=>$this->response); $this->TTTIITI($this->ll1II1l,I14218,$d); }continue; }if($code<200 || $code>299) {$this->TTTITTI($resp,$code,false); $this->II1LLLL =$resp; break 2; }break; }$ret =true; }while(false); if($this->ll1II1L &SYSD_F_CONFIRM) $conn->send("200 OK\r\n"); $conn->disconnect(); if(!$ret) $this->TTTITll($conn,false); return $ret; }function getUrl() {return $this->url; }function TI1IIIT($to) {$this->timeout =$to; }function GetLastError() {return $this->II1LLLL; }function GetLastResponse() {return $this->response; }}}else{ class SysDaemon1 extends BaseObject {public $auth; public $url; public $response; public $timeout; public $II1LLLL; public $ll1II1l; public $ll1II1L; public $ll1IlII; public $core; function SysDaemon($dest,$auth='none',$flags=0,$timeout=40) {$this->ll1IlII =0; $this->core =false; $this->BaseObject(); $this->auth ="auth $auth"; $this->url =$dest; $this->response =$this->II1LLLL =I14217; $this->timeout =$timeout; $this->ll1II1l =false; $this->ll1II1L =$flags; }function TI1l1IT(&$core) {if(is_object($core)) {$this->core =$core; $this->ll1IlII =intval($core->GetModOption("common_settings", "daemon_emulation")); }}function TI1l1Tl($group=I14219) {$this->ll1II1l =$group; if($group!==false) $this->TTTIT1I($group); }function TI1l1T1($params=false) {$this->III1Ill =false; $this->II1LLLL =I14217; $ret =false; if(!is_object($this->core)) {trigger_error('SysDaemon: Core is not set, can not get options', E_USER_ERROR); }if($this->ll1IlII == 1) {$conn =new SocketConnectionEmu($this->url,$this->timeout); }else {$conn =new SocketConnection($this->url,$this->timeout); }do {$params =array('credentials' => array('auth' => $this->auth), 'batch' => $params); if(!$conn->send(base64_encode(serialize($params)).I14220)) {$this->II1LLLL =$conn->errorsAsString(); break; }$this->III1Ill =true; while(true) {if(!($resp =$conn->TI1IIIl())) {$this->II1LLLL =$conn->errorsAsString(); break 2; }$this->response =trim($resp); break; }$ret =true; }while(false); if($this->ll1II1L &SYSD_F_CONFIRM) $conn->send("200 OK\r\n"); $conn->disconnect(); if(!$ret) $this->TTTITll($conn,false); return $ret; }function getUrl() {return $this->url; }function TI1IIIT($to) {$this->timeout =$to; }function GetLastError() {return $this->II1LLLL; }function GetLastResponse() {return $this->response; }}}?>