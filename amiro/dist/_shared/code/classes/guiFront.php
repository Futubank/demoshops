<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       7115 xkqwkiusxrxtzwwztztwsrszutysqirxqgxupyqgqgkymswwqiziiuwntnzttxysukgnpnir
 */ ?><?php foreach(array(15130=>'ZIM|WuDtHI`WDD',15131=>"",15132=>"Qn",15133=>'OttG+QEuMv',15134=>"MnSQx!fHJJHC",15135=>'WHIIHn|DQttMnPD',15136=>'RhhT|gzTo|ccc',15137=>'WDD|LD|vQrDMHn',15138=>'QxtSQY',15139=>'MnSQx',15140=>'MtQI',15141=>'nZIQ',15142=>'DQHsZtZ',15143=>'"?OrQf="',15144=>'MnnQr') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} class gui extends template {public $lang_data; public $UseFullPath; public $lLIlLLI; public $lLIlLLl; protected $aSystemCSS =array( 'base.css', 'common.css', I15130, 'home.css', 'skin.css', 'toolbar.css' );private $lLIlLLL =array( true, true );function gui($I1Il1I1 ="", $IIIl1Il =I15131) {$this->side ='front'; parent::template(); $this->setReadFromDB(true); $this->lLIlLLl =$IIIl1Il; $this->PrintVersion =false; $this->isPrintable =false; $this->ForceExport =false; $this->lang_data =$this->lang; $this->UseFullPath =true; $this->lLIlLLI =$I1Il1I1; $this->addMeta("name", "GENERATOR", "\n -= Amiro.CMS Suite (c) =- \n www.amirocms.com \n", I15132); $this->addMeta("name", "GENERATOR", "\n -= Amiro.CMS (c) =- \n www.amiro.ru \n", "ru"); $this->addMeta(I15133, 'content-type', 'text/html; charset=UTF-8'); $this->addMeta("name", "robots", I15134, I15131); $this->addMeta("name", "revisit-after", "5 days", I15131); }function _setLang($lang) {parent::setLang($lang); $this->lang_data =$this->lang; }function setLang($lang) {trigger_error("ILLEGAL USE language private function...", E_USER_ERROR); die; }function addStyle($path, $lLIlLL1 =array(), $isSysContext =TRUE) {global $CMS_VERSION; $lLIlLII =$path; if(!in_array($lLIlLII, $this->aSystemCSS)){ if($isSysContext){ if (AMI::issetOption(I15135, 'css_js_version')) {$versionCssJs =AMI::getOption(I15135, 'css_js_version'); $lLIlLL1["_sv"] =$versionCssJs; }$lLIlLL1[$this->urlVersionParam] =$CMS_VERSION; TlT1IT1($lLIlLII, $lLIlLL1); if ($this->UseFullPath) {$lLIlLII =$this->lLIlLLI .$this->CSSPath .$lLIlLII; }}elseif(!preg_match('~^\w+://~', $lLIlLII)){ $lLIlLII =$this->lLIlLLI .$this->CSSPath .$lLIlLII; }parent::addStyle($lLIlLII); }else {$this->cssJoiner =$GLOBALS[I15136] .toStr(array(97, 109, 105, 114, 111, 95, 115, 121, 115, 95, 99, 115, 115, 46, 112, 104, 112)); $lLIlLIL =str_replace('.css', '', $lLIlLII); if (!in_array($lLIlLIL, $this->systemStyles)) {$this->systemStyles[] =$lLIlLIL; }}}function addScript($path, $async =false) {global $CMS_VERSION, $sys; $lLIlLII =$path; if ((strpos($lLIlLII, 'http://') === false) && (strpos($lLIlLII, 'https://') === false)) {$aParams =array( $this->urlVersionParam => $CMS_VERSION );if (AMI::issetOption(I15135, I15137)) {$versionCssJs =AMI::getOption(I15135, I15137); $aParams["_sv"] =$versionCssJs; }if (!empty($sys['err']['no_cache_js']) && !empty($sys['err'][I15138])) {$aParams['_ts'] =time(); }TlT1IT1($lLIlLII, $aParams); if ($this->UseFullPath) {$lLIlLII =$this->lLIlLLI .$lLIlLII; }}parent::addScript($lLIlLII, $async); }function footer($file ='', $aData =I15131) {return $this->isValidFile($file) ?$this->parse($file, '') :'</html>'; }function addBlock($name, $filename, $override =TRUE) {parent::addBlock($name, $this->lLIlLLl .$filename, $override); }function MYnl2br($ILlLl1L) {$res =$ILlLl1L; return $res; }public function setRobotsMeta($index =true, $follow =true) {$aMeta =array((bool) $index, (bool) $follow); if ($this->lLIlLLL != $aMeta) {$this->lLIlLLL =$aMeta; $content =($aMeta[0] ?I15139 :'noindex') .',' .($aMeta[1] ?'follow' :'nofollow'); $aEvent =array( I15140 => 'name', 'name' => 'robots', 'content' => $content );AMI_Event::fire('on_html_meta_change', $aEvent, AMI_Event::MOD_ANY); if ($content != $aEvent['content']) {$content =$aEvent['content']; $this->lLIlLLL[0] =(bool) preg_match('/(^|\,)index(\,|$)/', $content); $this->lLIlLLL[1] =(bool) preg_match('/(^|\,)follow(\,|$)/', $content); }$this->delMeta(I15141, 'robots'); $this->addMeta(I15141, 'robots', $content, ''); $aPage =AMI_Registry::get('page'); $aPage[I15142] =array(I15139 => $this->lLIlLLL[0], 'follow' => $this->lLIlLLL[1]); AMI_Registry::set('page', $aPage); }}public function setLink($value, $type ='canonical') {$value ='rel="' .$type .I15143 .$value .'"'; foreach($this->headerTags as $idx => $tag) {if(mb_strpos($tag['inner'], 'rel="' .$type .'"') !== false) {$this->headerTags[$idx][I15144] =$value; return; }}$this->addHeaderTag('link', $value, '', true); }}