<?php /**
 * @copyright  2000-2016 Amiro.CMS. All rights reserved. 
 * @version    $Id$ 
 * @size       36649 xkqwiwppzwyitwwiwwxywpxlwkqwpkwnrmswzqzzmgxkilzzggnyzpmynnmwrkzsrxgmpnir
 */ ?><?php foreach(array(19841=>"HZutO|tHKQn=",19842=>'DOZ1',19843=>'1`0',19844=>'OttG',19845=>'dqRVqR|ghRT',19846=>'wHntQnt+TBGQ',19847=>'zutOHrMAZtMHn',19848=>'HZutO|tHKQn',19849=>'DWOQIQ',19850=>'80',19851=>'GZtO',19852=>'?',19853=>"HZutO|DMPnZturQ",19854=>"HZutO|vQrDMHn",19855=>"HZutO|WHnDuIQr|KQB",19856=>'HZutO|nHnWQ',19857=>'hzutOUtMJ',19858=>'',19859=>'rQZJI',19860=>"?",19861=>"oTTg|",19862=>'DtrWIG',19863=>'LDHn',19864=>'pqT',19865=>'WJMQnt|ZutO',19866=>'OttGD%~~',19867=>'sqjqTq') as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} class OAuthException extends Exception {}class OAuthConsumer {public $key; public $secret; function __construct($key, $secret, $callback_url=NULL) {$this->key =$key; $this->secret =$secret; $this->callback_url =$callback_url; }function __toString() {return "OAuthConsumer[key=$this->key,secret=$this->secret]"; }}class OAuthToken {public $key; public $secret; function __construct($key, $secret) {$this->key =$key; $this->secret =$secret; }function TlT1l1l() {return I19841 .OAuthUtil::urlencode_rfc3986($this->key) ."&oauth_token_secret=" .OAuthUtil::urlencode_rfc3986($this->secret); }function __toString() {return $this->TlT1l1l(); }}abstract class OAuthSignatureMethod {abstract public function TlT1l11(); abstract public function TlT11TT($request, $lL11LLI, $token); public function TlT11TI($request, $lL11LLI, $token, $signature) {$lL11LLl =$this->TlT11TT($request, $lL11LLI, $token); if (strlen($lL11LLl) == 0 || strlen($signature) == 0) {return false; }if (strlen($lL11LLl) != strlen($signature)) {return false; }$result =0; for ($i =0; $i <strlen($signature); $i++) {$result |= ord($lL11LLl{$i}) ^ord($signature{$i}); }return $result == 0; }}class OAuthSignatureMethod_HMAC_SHA1 extends OAuthSignatureMethod {function TlT1l11() {return "HMAC-SHA1"; }public function TlT11TT($request, $lL11LLI, $token) {$lL11LLL =$request->TlT11l1(); $request->lL11LLL =$lL11LLL; $lL11LL1 =array( $lL11LLI->secret, ($token) ?$token->secret :"" );$lL11LL1 =OAuthUtil::urlencode_rfc3986($lL11LL1); $key =implode('&', $lL11LL1); return base64_encode(hash_hmac(I19842, $lL11LLL, $key, true)); }}class OAuthSignatureMethod_PLAINTEXT extends OAuthSignatureMethod {public function TlT1l11() {return "PLAINTEXT"; }public function TlT11TT($request, $lL11LLI, $token) {$lL11LL1 =array( $lL11LLI->secret, ($token) ?$token->secret :"" );$lL11LL1 =OAuthUtil::urlencode_rfc3986($lL11LL1); $key =implode('&', $lL11LL1); $request->lL11LLL =$key; return $key; }}abstract class OAuthSignatureMethod_RSA_SHA1 extends OAuthSignatureMethod {public function TlT1l11() {return "RSA-SHA1"; }protected abstract function TlT11Tl(&$request); protected abstract function TlT11T1(&$request); public function TlT11TT($request, $lL11LLI, $token) {$lL11LLL =$request->TlT11l1(); $request->lL11LLL =$lL11LLL; $lL11L1I =$this->TlT11T1($request); $lL11L1l =openssl_get_privatekey($lL11L1I); $ok =openssl_sign($lL11LLL, $signature, $lL11L1l); openssl_free_key($lL11L1l); return base64_encode($signature); }public function TlT11TI($request, $lL11LLI, $token, $signature) {$lL11L1L =base64_decode($signature); $lL11LLL =$request->TlT11l1(); $lL11L1I =$this->TlT11Tl($request); $lL11L11 =openssl_get_publickey($lL11L1I); $ok =openssl_verify($lL11LLL, $lL11L1L, $lL11L11); openssl_free_key($lL11L11); return $ok == 1; }}class OAuthRequest {protected $parameters; protected $lL111II; protected $lL111Il; public $lL11LLL; public static $version =I19843; public static $lL111IL ='php://input'; function __construct($lL111II, $lL111Il, $parameters=NULL) {$parameters =($parameters) ?$parameters :array(); $parameters =array_merge( OAuthUtil::TlITIII(parse_url($lL111Il, PHP_URL_QUERY)), $parameters); $this->parameters =$parameters; $this->lL111II =$lL111II; $this->lL111Il =$lL111Il; }public static function TlT11IT($lL111II=NULL, $lL111Il=NULL, $parameters=NULL) {$scheme =(!isset($_SERVER['HTTPS']) || $_SERVER['HTTPS'] != "on") ?I19844 :'https'; $lL111Il =($lL111Il) ?$lL111Il :$scheme .'://' .$_SERVER['SERVER_NAME'] .':' .$_SERVER[I19845] .$_SERVER['REQUEST_URI']; $lL111II =($lL111II) ?$lL111II :$_SERVER['REQUEST_METHOD']; if (!$parameters) {$request_headers =OAuthUtil::get_headers(); $parameters =OAuthUtil::TlITIII($_SERVER['QUERY_STRING']); if ($lL111II == "POST" && isset($request_headers[I19846]) && strstr($request_headers[I19846], 'application/x-www-form-urlencoded') ){$post_data =OAuthUtil::TlITIII( file_get_contents(self::$lL111IL) );$parameters =array_merge($parameters, $post_data); }if (isset($request_headers['Authorization']) && substr($request_headers['Authorization'], 0, 6) == 'OAuth ') {$lL111I1 =OAuthUtil::TlITIIT( $request_headers[I19847] );$parameters =array_merge($parameters, $lL111I1); }}return new OAuthRequest($lL111II, $lL111Il, $parameters); }public static function TlT11II($lL11LLI, $token, $lL111II, $lL111Il, $parameters=NULL) {$parameters =($parameters) ?$parameters :array(); $defaults =array("oauth_version" => OAuthRequest::$version, "oauth_nonce" => OAuthRequest::TlITTT1(), "oauth_timestamp" => OAuthRequest::TlITTTl(), "oauth_consumer_key" => $lL11LLI->key); if ($token) $defaults[I19848] =$token->key; $parameters =array_merge($defaults, $parameters); return new OAuthRequest($lL111II, $lL111Il, $parameters); }public function TlT11Il($name, $value, $lL111lI =true) {if ($lL111lI && isset($this->parameters[$name])) {if (is_scalar($this->parameters[$name])) {$this->parameters[$name] =array($this->parameters[$name]); }$this->parameters[$name][] =$value; }else {$this->parameters[$name] =$value; }}public function TlT11I1($name) {return isset($this->parameters[$name]) ?$this->parameters[$name] :null; }public function TlT11lT() {return $this->parameters; }public function TlT11lI($name) {unset($this->parameters[$name]); }public function TlT11ll() {$params =$this->parameters; if (isset($params['oauth_signature'])) {unset($params['oauth_signature']); }return OAuthUtil::TlITIIl($params); }public function TlT11l1() {$parts =array( $this->TlT111T(), $this->TlT111I(), $this->TlT11ll() );$parts =OAuthUtil::urlencode_rfc3986($parts); return implode('&', $parts); }public function TlT111T() {return strtoupper($this->lL111II); }public function TlT111I() {$parts =parse_url($this->lL111Il); $scheme =(isset($parts['scheme'])) ?$parts[I19849] :I19844; $port =(isset($parts['port'])) ?$parts['port'] :(($scheme == 'https') ?'443' :I19850); $host =(isset($parts['host'])) ?strtolower($parts['host']) :''; $path =(isset($parts['path'])) ?$parts[I19851] :''; if (($scheme == 'https' && $port != '443') || ($scheme == I19844 && $port != I19850)) {$host ="$host:$port"; }return "$scheme://$host$path"; }public function TlT111l() {$post_data =$this->TlT1111(); $out =$this->TlT111I(); if ($post_data) {$out .= '?'.$post_data; }return $out; }public function TlT1111() {return OAuthUtil::TlITIIl($this->parameters); }public function TlITTTT($lL111ll=null) {$first =true; if($lL111ll) {$out ='Authorization: OAuth realm="' .OAuthUtil::urlencode_rfc3986($lL111ll) .'"'; $first =false; }else $out ='Authorization: OAuth'; $total =array(); foreach ($this->parameters as $k => $v) {if (substr($k, 0, 5) != "oauth") continue; if (is_array($v)) {throw new OAuthException('Arrays not supported in headers'); }$out .= ($first) ?I19852 :','; $out .= OAuthUtil::urlencode_rfc3986($k) .'="' .OAuthUtil::urlencode_rfc3986($v) .'"'; $first =false; }return $out; }public function __toString() {return $this->TlT111l(); }public function TlITTTI($lL111lL, $lL11LLI, $token) {$this->TlT11Il( "oauth_signature_method", $lL111lL->TlT1l11(), false );$signature =$this->TlT11TT($lL111lL, $lL11LLI, $token); $this->TlT11Il(I19853, $signature, false); }public function TlT11TT($lL111lL, $lL11LLI, $token) {$signature =$lL111lL->TlT11TT($this, $lL11LLI, $token); return $signature; }private static function TlITTTl() {return time(); }private static function TlITTT1() {$mt =microtime(); $rand =mt_rand(); return md5($mt .$rand); }}class OAuthServer {protected $lL111l1 =300; protected $version =I19843; protected $lL111LI =array(); protected $lL111Ll; function __construct($lL111Ll) {$this->lL111Ll =$lL111Ll; }public function TlITTIT($lL111lL) {$this->lL111LI[$lL111lL->TlT1l11()] =$lL111lL; }public function TlITTII(&$request) {$this->TlITTlT($request); $lL11LLI =$this->TlITTll($request); $token =NULL; $this->TlT11TI($request, $lL11LLI, $token); $callback =$request->TlT11I1('oauth_callback'); $lL111LL =$this->lL111Ll->TlITITI($lL11LLI, $callback); return $lL111LL; }public function TlITTIl(&$request) {$this->TlITTlT($request); $lL11LLI =$this->TlITTll($request); $token =$this->TlITTl1($request, $lL11LLI, "request"); $this->TlT11TI($request, $lL11LLI, $token); $lL111L1 =$request->TlT11I1('oauth_verifier'); $lL111LL =$this->lL111Ll->TlITITl($token, $lL11LLI, $lL111L1); return $lL111LL; }public function TlITTI1(&$request) {$this->TlITTlT($request); $lL11LLI =$this->TlITTll($request); $token =$this->TlITTl1($request, $lL11LLI, "access"); $this->TlT11TI($request, $lL11LLI, $token); return array($lL11LLI, $token); }private function TlITTlT(&$request) {$version =$request->TlT11I1(I19854); if (!$version) {$version =I19843; }if ($version !== $this->version) {throw new OAuthException("OAuth version '$version' not supported"); }return $version; }private function TlITTlI($request) {$lL111lL =$request instanceof OAuthRequest ?$request->TlT11I1("oauth_signature_method") :NULL; if (!$lL111lL) {throw new OAuthException('No signature method parameter. This parameter is required'); }if (!in_array($lL111lL, array_keys($this->lL111LI))) {throw new OAuthException( "Signature method '$lL111lL' not supported " ."try one of the following: " .implode(", ", array_keys($this->lL111LI)) );}return $this->lL111LI[$lL111lL]; }private function TlITTll($request) {$lL1111I =$request instanceof OAuthRequest ?$request->TlT11I1(I19855) :NULL; if (!$lL1111I) {throw new OAuthException("Invalid consumer key"); }$lL11LLI =$this->lL111Ll->TlITT1l($lL1111I); if (!$lL11LLI) {throw new OAuthException("Invalid consumer"); }return $lL11LLI; }private function TlITTl1($request, $lL11LLI, $lL1111l="access") {$lL1111L =$request instanceof OAuthRequest ?$request->TlT11I1(I19848) :NULL; $token =$this->lL111Ll->TlITT11( $lL11LLI, $lL1111l, $lL1111L );if (!$token) {throw new OAuthException("Invalid $lL1111l token: $lL1111L"); }return $token; }private function TlT11TI($request, $lL11LLI, $token) {$timestamp =$request instanceof OAuthRequest ?$request->TlT11I1('oauth_timestamp') :NULL; $lL11111 =$request instanceof OAuthRequest ?$request->TlT11I1(I19856) :NULL; $this->TlITT1T($timestamp); $this->TlITT1I($lL11LLI, $token, $lL11111, $timestamp); $lL111lL =$this->TlITTlI($request); $signature =$request->TlT11I1('oauth_signature'); $l1IIIII =$lL111lL->TlT11TI( $request, $lL11LLI, $token, $signature );if (!$l1IIIII) {throw new OAuthException("Invalid signature"); }}private function TlITT1T($timestamp) {if( !$timestamp )throw new OAuthException( 'Missing timestamp parameter. The parameter is required' );$now =time(); if (abs($now -$timestamp) >$this->lL111l1) {throw new OAuthException( "Expired timestamp, yours $timestamp, ours $now" );}}private function TlITT1I($lL11LLI, $token, $lL11111, $timestamp) {if( !$lL11111 )throw new OAuthException( 'Missing nonce parameter. The parameter is required' );$found =$this->lL111Ll->TlITITT( $lL11LLI, $token, $lL11111, $timestamp );if ($found) {throw new OAuthException("Nonce already used: $lL11111"); }}}class OAuthDataStore {function TlITT1l($lL1111I) {}function TlITT11($lL11LLI, $lL1111l, $token) {}function TlITITT($lL11LLI, $token, $lL11111, $timestamp) {}function TlITITI($lL11LLI, $callback =null) {}function TlITITl($token, $lL11LLI, $lL111L1 =null) {}}class OAuthUtil {public static function urlencode_rfc3986($input) {if (is_array($input)) {return array_map(array(I19857, 'urlencode_rfc3986'), $input); }else if (is_scalar($input)) {return str_replace( '+', I19852, str_replace('%7E', '~', rawurlencode($input)) );}else {return I19858; }}public static function TlITIT1($string) {return urldecode($string); }public static function TlITIIT($header, $l1IIIIl =true) {$params =array(); if (preg_match_all('/('.($l1IIIIl ?'oauth_' :I19858).'[a-z_-]*)=(:?"([^"]*)"|([^,]*))/', $header, $matches)) {foreach ($matches[1] as $i => $h) {$params[$h] =OAuthUtil::TlITIT1(empty($matches[3][$i]) ?$matches[4][$i] :$matches[3][$i]); }if (isset($params['realm'])) {unset($params[I19859]); }}return $params; }public static function get_headers() {if (function_exists('apache_request_headers')) {$headers =apache_request_headers(); $out =array(); foreach ($headers AS $key => $value) {$key =str_replace( " ", "-", ucwords(strtolower(str_replace("-", I19860, $key))) );$out[$key] =$value; }}else {$out =array(); if( isset($_SERVER['CONTENT_TYPE']) )$out[I19846] =$_SERVER['CONTENT_TYPE']; if( isset($_ENV['CONTENT_TYPE']) )$out[I19846] =$_ENV['CONTENT_TYPE']; foreach ($_SERVER as $key => $value) {if (substr($key, 0, 5) == I19861) {$key =str_replace( I19860, "-", ucwords(strtolower(str_replace("_", I19860, substr($key, 5)))) );$out[$key] =$value; }}}return $out; }public static function TlITIII( $input ){if (!isset($input) || !$input) return array(); $l1IIIIL =explode('&', $input); $l1IIII1 =array(); foreach ($l1IIIIL as $pair) {$split =explode('=', $pair, 2); $IlL1Ll1 =OAuthUtil::TlITIT1($split[0]); $value =isset($split[1]) ?OAuthUtil::TlITIT1($split[1]) :I19858; if (isset($l1IIII1[$IlL1Ll1])) {if (is_scalar($l1IIII1[$IlL1Ll1])) {$l1IIII1[$IlL1Ll1] =array($l1IIII1[$IlL1Ll1]); }$l1IIII1[$IlL1Ll1][] =$value; }else {$l1IIII1[$IlL1Ll1] =$value; }}return $l1IIII1; }public static function TlITIIl($params) {if (!$params) return I19858; $keys =OAuthUtil::urlencode_rfc3986(array_keys($params)); $values =OAuthUtil::urlencode_rfc3986(array_values($params)); $params =array_combine($keys, $values); uksort($params, I19862); $l1IIIIL =array(); foreach ($params as $IlL1Ll1 => $value) {if (is_array($value)) {sort($value, SORT_STRING); foreach ($value as $l1IIIlI) {$l1IIIIL[] =$IlL1Ll1 .'=' .$l1IIIlI; }}else {$l1IIIIL[] =$IlL1Ll1 .'=' .$value; }}return implode('&', $l1IIIIL); }}class TwitterOAuth {public $http_code; public $url; public $host ="https://api.twitter.com/1.1/"; public $timeout =30; public $l1IIIll =30; public $l1IIIlL =FALSE; public $format =I19863; public $l1IIIl1 =TRUE; public $l1IIILI; public $useragent ='TwitterOAuth v0.2.0-beta2'; function TlITII1() {return 'https://api.twitter.com/oauth/access_token'; }function TlITIlT() {return 'https://api.twitter.com/oauth/authenticate'; }function TlITIlI() {return 'https://api.twitter.com/oauth/authorize'; }function TlITIll() {return 'https://api.twitter.com/oauth/request_token'; }function TlITIl1() {return $this->http_status; }function TlITI1T() {return $this->last_api_call; }function __construct($lL1111I, $l1IIILl, $oauth_token =NULL, $l1IIILL =NULL) {$this->sha1_method =new OAuthSignatureMethod_HMAC_SHA1(); $this->lL11LLI =new OAuthConsumer($lL1111I, $l1IIILl); if (!empty($oauth_token) && !empty($l1IIILL)) {$this->token =new OAuthConsumer($oauth_token, $l1IIILL); }else {$this->token =NULL; }}function getRequestToken($oauth_callback =NULL) {$parameters =array(); if (!empty($oauth_callback)) {$parameters['oauth_callback'] =$oauth_callback; }$request =$this->oAuthRequest($this->TlITIll(), 'GET', $parameters); $token =OAuthUtil::TlITIII($request); $this->token =new OAuthConsumer($token[I19848], $token['oauth_token_secret']); return $token; }function getAuthorizeURL($token, $l1IIIL1 =TRUE) {if (is_array($token)) {$token =$token[I19848]; }if (empty($l1IIIL1)) {return $this->TlITIlI() ."?oauth_token={$token}"; }else {return $this->TlITIlT() ."?oauth_token={$token}"; }}function getAccessToken($oauth_verifier =FALSE) {$parameters =array(); if (!empty($oauth_verifier)) {$parameters['oauth_verifier'] =$oauth_verifier; }$request =$this->oAuthRequest($this->TlITII1(), I19864, $parameters); $token =OAuthUtil::TlITIII($request); $this->token =new OAuthConsumer($token[I19848], $token['oauth_token_secret']); return $token; }function TlITI1I($username, $password) {$parameters =array(); $parameters['x_auth_username'] =$username; $parameters['x_auth_password'] =$password; $parameters['x_auth_mode'] =I19865; $request =$this->oAuthRequest($this->TlITII1(), 'POST', $parameters); $token =OAuthUtil::TlITIII($request); $this->token =new OAuthConsumer($token[I19848], $token['oauth_token_secret']); return $token; }function get($url, $parameters =array()) {$response =$this->oAuthRequest($url, I19864, $parameters); if ($this->format === I19863 && $this->l1IIIl1) {return json_decode($response); }return $response; }function post($url, $parameters =array()) {$response =$this->oAuthRequest($url, 'POST', $parameters); if ($this->format === I19863 && $this->l1IIIl1) {return json_decode($response); }return $response; }function delete($url, $parameters =array()) {$response =$this->oAuthRequest($url, 'DELETE', $parameters); if ($this->format === I19863 && $this->l1IIIl1) {return json_decode($response); }return $response; }function oAuthRequest($url, $method, $parameters) {if (strrpos($url, I19866) !== 0 && strrpos($url, 'http://') !== 0) {$url ="{$this->host}{$url}.{$this->format}"; }$request =OAuthRequest::TlT11II($this->lL11LLI, $this->token, $method, $url, $parameters); $request->TlITTTI($this->sha1_method, $this->lL11LLI, $this->token); switch ($method) {case I19864: return $this->http($request->TlT111l(), I19864); default: return $this->http($request->TlT111I(), $method, $request->TlT1111()); }}function http($url, $method, $l1III1I =NULL) {$this->l1IIILI =array(); $ci =curl_init(); curl_setopt($ci, CURLOPT_USERAGENT, $this->useragent); curl_setopt($ci, CURLOPT_CONNECTTIMEOUT, $this->l1IIIll); curl_setopt($ci, CURLOPT_TIMEOUT, $this->timeout); curl_setopt($ci, CURLOPT_RETURNTRANSFER, TRUE); curl_setopt($ci, CURLOPT_HTTPHEADER, array('Expect:')); curl_setopt($ci, CURLOPT_SSL_VERIFYPEER, $this->l1IIIlL); curl_setopt($ci, CURLOPT_HEADERFUNCTION, array($this, 'getHeader')); curl_setopt($ci, CURLOPT_HEADER, FALSE); switch ($method) {case 'POST': curl_setopt($ci, CURLOPT_POST, TRUE); if (!empty($l1III1I)) {curl_setopt($ci, CURLOPT_POSTFIELDS, $l1III1I); }break; case I19867: curl_setopt($ci, CURLOPT_CUSTOMREQUEST, I19867); if (!empty($l1III1I)) {$url ="{$url}?{$l1III1I}"; }}curl_setopt($ci, CURLOPT_URL, $url); $response =curl_exec($ci); $this->http_code =curl_getinfo($ci, CURLINFO_HTTP_CODE); $this->l1IIILI =array_merge($this->l1IIILI, curl_getinfo($ci)); $this->url =$url; curl_close ($ci); return $response; }function getHeader($ch, $header) {$i =strpos($header, ':'); if (!empty($i)) {$key =str_replace('-', '_', strtolower(substr($header, 0, $i))); $value =trim(substr($header, $i +2)); $this->http_header[$key] =$value; }return strlen($header); }}