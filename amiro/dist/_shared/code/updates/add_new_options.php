<?php foreach(array(274=>"&```",275=>"\n",276=>"",277=>"\"",278=>"nH|PuM",279=>"HGtMHn|nZIQ",280=>"ZSS|nQC",281=>"DHurWQ",282=>"WJQZr|WZWOQ",283=>"WHrQ|IHSuJQ",284=>"IHSuJQ|nZIQ",285=>"MS",286=>"%",287=>"MnOQrMtZnWQ",288=>"WHrQ",289=>"fHrWQS|IHSuJQD",290=>"SQJQtQ|HGtMHnD",291=>"GrHGQrtB|",292=>"`GOG",293=>'DBD',294=>'zim|zjjhc|jhwzj|ihsUjqd',295=>'RqyUjs|ihsUjqd|jmdT',296=>"ZJJ",297=>"WHnfMP",298=>"Drv|HGtMHnD",299=>"WOZnPQ",300=>"+++?IHSuJQ%?",301=>"??FhRwqs?ihsUjq",302=>"#TR?YPWHJHr=\"",303=>"#Ts@",304=>"#~Ts@",305=>'MnOQrMtZnWQ',306=>"dqjqwT?MS!?IHSuJQ|nZIQ?FRhi?WID|HGtMHnD?coqRq?nZIQ?jmkq?'HGtMHnD|SuIG`YZWKuG:'",307=>"}",308=>"'{?coqRq?MS?mN}'",309=>"!?") as $i1=>$i2){$i3=strrev("rtrts");define("I".$i1,$i3($i2,'abcdeghijklmopqswyz ~`!@#%^&*()_-+|{}[];:<>,./?ABCDEGHIJKLMOPQSWYZ','ZYWSQPOMLKJIHGEDCBA?/.,><:;][}{|+-_)(*&^%#@!`~ zywsqpomlkjihgedcba'));} if(!defined('AMI_ENVIRONMENT')){header('HTTP/1.0 403 Forbidden');die('Forbidden, invalid URL! '.__FILE__.' at '.__LINE__);} function TTTTT1I($cVal, $iLevel =1, &$IIIILl1){ $res =""; if($iLevel>10){ trigger_error("Dangerous recursion level [".$iLevel.I274, E_USER_ERROR); }if(is_array($cVal)){ if(count($cVal)==0){ $res ="array(\n)"; }else{ $IIIILLI =""; for ($i =1; $i <= $iLevel; $i++){ $IIIILLI .= "   "; }$IIIILLl ="   "; $res =I275.$IIIILLI."array(\n"; $IIIILLL =true; reset($cVal); while (list($vKey, $vVal) =each($cVal)){ if($IIIILLL){ $IIIILLL =false; }else{ $res .= ",\n"; }$res .= $IIIILLI.$IIIILLl; $res .= (is_int($vKey)) ?"" :"\""; $res .= $vKey; $res .= (is_int($vKey)) ?I276 :"\""; $res .= " => "; $res .= TTTTT1I($vVal, ($iLevel +1), $IIIILl1); $IIIILl1++; }$res .= I275.$IIIILLI.")"; }}else{ $res ="\"".$cVal.I277; $IIIILl1++; }return $res; }unset($IIIILL1, $IIIIL1I, $IIIIL1l); error_reporting(E_ERROR |E_WARNING |E_PARSE); $IIIILlL ="------ ADD NEW OPTIONS ------\n"; if(isset($_params["no_gui"]) && $_params["no_gui"]) {$IIIIL1L =1; }$IIIIL11 =Array(); $IIII1II =$Core->GetOwnersList(); $IIIIL1L =0; if(isset($_params["no_gui"]) && $_params[I278]) {$IIIIL1L =1; }$IIII1Il =true; if(isset($_params["only_print"])) {$IIII1Il =intval($_params["only_print"]); }$IIII1IL =0; if(isset($_params["from_lic"]) && $_params["from_lic"]) {$IIII1IL =1; $IIIIL1L =1; $IIII1Il =false; }$optionName =I276; if(isset($_params[I279])) {$optionName =$_params[I279]; }$mode ="add_new"; if(isset($_params["mode"])) {$IIII1I1 =$_params["mode"]; if(in_array($IIII1I1, array("change", I280))) {$mode =$IIII1I1; }}$IIII1lI =false; if(isset($_params["only_diff"]) && $_params["only_diff"] == 1) {$IIII1lI =true; }$source ="const"; if(isset($_params["source"])) {$IIII1ll =$_params[I281]; if(in_array($IIII1ll, array("const", "config", "all"))) {$source =$IIII1ll; }}$IIII1lL =true; if(isset($_params["clear_cache"])) {$IIII1lL =intval($_params[I282]); }$IIII1l1 =0; if(0 && isset($_params["run_wasted_cleaner"]) && $_params["run_wasted_cleaner"]) {$IIII1l1 =1; }else {$IIII1l1 =(RUN_UPDATE && defined('UPDATE_CLEAN_WASTED') && UPDATE_CLEAN_WASTED); }if(RUN_UPDATE) {$IIIIL1l =unserialize(_INSTLALLED_MODULES); }else {$IIII1LI =$Core->GetModNames(); $IIIIL1l =Array(); foreach($IIII1LI as $IIII1Ll){ if($Core->isInstalled($IIII1Ll)){ $IIIIL1l[$IIII1Ll] =1; }}}if($IIII1l1) {$IIIIL1I =Array(); $IIII1LL =Array(); $IIIILL1 =Array(I283); if(sizeof($IIIIL1l) >10) {CMS_ModulesOptions::TTlTllT($db, $IIIIL1I, I276, "options_dump"); $IIII1L1 =sizeof($IIIIL1I); for($i=0; $i<$IIII1L1; $i++) {if(!isset($IIIIL1l[$IIIIL1I[$i][I284]]) && !in_array($IIIIL1I[$i][I284], $IIIILL1)) {$IIII1LL[$IIIIL1I[$i][I284]] =$IIIIL1I[$i][I285]; }}}else {$IIII1l1 =0; }}$dbFailModules =array(); $IIII11I =array(); $res =$Core->ReadCoreOptions($IIII11I, $_SIDE); $res =$Core->TTllT1l(); $IIII11l =Array(); $IIII11L =Array("inheritance" => $Core->GetModOption("srv_options", "inheritance")); function __getModOption($modName, $optName) {global $Core; if($modName == I283) {$res =$Core->GetOption($optName); }else {$res =$Core->GetModOption($modName, $optName); }return $res; }foreach($IIII11L["inheritance"] as $modName => $aData) {foreach($aData as $optName => $IIII111) {$tmp =explode(I286, $IIII111); $IIIlIII =true; if(isset($IIIIL1l[$modName]) && (isset($IIIIL1l[$tmp[0]]) || $tmp[0]==I283)) {$IIIlIIl =__getModOption($modName, $optName); $IIIlIIL =__getModOption($tmp[0], $tmp[1]); $IIIlIII =($IIIlIIl != $IIIlIIL); }if($IIIlIII) {if($IIIIL1L) {$IIIILlL .= "remove inheritance: ".$modName.I286.$optName.I275; }unset($IIII11L["inheritance"][$modName][$optName]); $Core->IlLIILl[$modName][$optName] =1; }}}$Core->SetModOption("srv_options", "inheritance", $IIII11L[I287]); $aModules =Array(); $IIIlII1 =$Core->GetAllModules(); if(isset($_params[I284])) {$modName =$_params[I284]; if(isset($IIIlII1[$modName])) {$aModules =Array($modName=>$IIIlII1[$modName]); }else {if($modName == "core") {$aModules =Array($modName=>$Core); }}}else {$aModules =&$IIIlII1; }if(((isset($_params["include_core"]) && $_params["include_core"]) || $mode == I280) && !isset($aModules["core"])) {$aModules[I288] =$Core; }$IIIlIlI =Array(); if(isset($_params[I289])) {if(is_array($_params[I289])) {$IIIlIlI =$_params[I289]; }else {$IIIlIlI =explode("|", $_params[I289]); }}if(isset($_params["forced_options"])) {$IIII11l += $_params["forced_options"]; }$IIIlIll =array(); if(isset($_params["delete_options"])) {$IIIlIll =$_params[I290]; }foreach($aModules as $modName=>$tmpMod) {$IIIlIlL =$tmpMod->GetOwnerName(); if($modName == I288 || (isset($IIII1II[$IIIlIlL]) && $tmpMod->IsInstalled())) {$modId =$modName != 'core' ?$modName :''; $IIIIL11[$modName] =$tmpMod->Options->TTlTII1($modId); if( AMI_ModDeclarator::getInstance()->isRegistered($modName) && AMI_ModDeclarator::getInstance()->getAttr($modName, 'has_options_lazy', FALSE) ){$tmpMod->Options->TTlTlTT($modId); $IIIlIl1 =$tmpMod->Options->TTlTI11($modId); if(is_array($IIIlIl1)){ $IIIIL11[$modName] += $IIIlIl1; }}}}$REBULD_MODULES_LIST =I276; $Core->IlLIIlL =$IIII11L[I287]; if(!$IIII1Il) {$fakeCMS =false; $oCoreRules =new CMS_CoreRules($fakeCMS); $oCoreRules->setCoreObject(clone($Core)); }$Core->IlLIIL1 =true; $oDeclarator =AMI_ModDeclarator::getInstance(); if($source == "all") {foreach($IIII1II as $ownerName=>$ownerData) {if(in_array($ownerName, $INSTALLED_PRODUCTS)) {require $CONST_PATH.I291.$ownerName.".php"; require $CONST_PATH."const_".$ownerName.".php"; }}foreach($IIII1II as $ownerName=>$ownerData) {if(in_array($ownerName, $INSTALLED_PRODUCTS) && file_exists($LOCAL_FILES_PATH."config_".$ownerName.I292)) {require $LOCAL_FILES_PATH."config_".$ownerName.I292; }}}else {if($source == "config") {$filePath =$LOCAL_FILES_PATH; }else {$filePath =$CONST_PATH; }foreach($IIII1II as $ownerName=>$ownerData) {if(in_array($ownerName, $INSTALLED_PRODUCTS)) {require $CONST_PATH.I291.$ownerName.I292; if(file_exists($filePath.$source."_".$ownerName.I292)) {require $filePath.$source."_".$ownerName.I292; }}}}if( (empty($GLOBALS[I293]['disable_user_scripts']) || defined(I294) )){$path =AMI_Registry::get('path/hyper_local') .'declaration/properties.php'; if(file_exists($path)){ $oDeclarator->setMode(TRUE); require $path; $oDeclarator->setMode(FALSE); }$path =AMI_Registry::get('path/hyper_local') .'declaration/options.php'; if(file_exists($path)){ $IIIlILI =$IIIlILl; $aRegistered =$oDeclarator->getRegistered(); if(!$IIIlILI){ if(!empty($REBULD_MODULES_LIST)){ $aRegistered =array_intersect($aRegistered, $REBULD_MODULES_LIST); }$IIIlILI =sizeof($aRegistered) >0; }if($IIIlILI){ $oDeclarator->setAllowedOptions($IIIlILl ?null :$aRegistered); require $path; }unset($aRegistered, $IIIlILI); }}unset($path, $oDeclarator); $path =AMI_Registry::get('path/hyper_shared') .'declaration/'; $Core->setupHyperMod($path, $INSTALLED_PRODUCTS, 'properties'); $Core->setupHyperMod( $path, $INSTALLED_PRODUCTS, 'consts', array( I295 => empty($REBULD_MODULES_LIST) ?array() :$REBULD_MODULES_LIST ));unset($path); if(isset($aModules[I288])) {$IIIlILL =true; if($source == I296) {require $CONST_PATH."declare_defaults.php"; require $LOCAL_FILES_PATH."config_advanced.php"; }elseif($source == "const") {require $CONST_PATH."declare_defaults.php"; }elseif($source == I297) {require $LOCAL_FILES_PATH."config_advanced.php"; }$IIIlILL =false; }$Core->TTlI11T(I276, true); $IIII11L["allowed_inheritance"] =$Core->GetModOption("srv_options", "allowed_inheritance"); $IIIlIL1 =$Core->GetModOption(I298, I287); $IIIlI1I =Array(); foreach($aModules as $modName=>$IIIlI1l) {if($modName == I288) {$tmpMod =&$Core; }else {$tmpMod =&$Core->GetModule($modName); }$IIIlIlL =$tmpMod->GetOwnerName(); if($modName == I288 || isset($IIII1II[$IIIlIlL]) && $tmpMod->IsInstalled()) {if($optionName == I276) {$modId =$modName != 'core' ?$modName :''; $dump =$tmpMod->Options->TTlTII1($modId); if( AMI_ModDeclarator::getInstance()->isRegistered($modId) && AMI_ModDeclarator::getInstance()->getAttr($modId, 'has_options_lazy', FALSE) ){$IIIlIl1 =$tmpMod->Options->TTlTI11($modId); if(is_array($IIIlIl1)){ $dump += $IIIlIl1; }}foreach($dump as $optName=>$optValue) {if(!isset($IIIIL11[$modName][$optName]) || $mode == "change" || in_array($modName, $IIIlIlI)) {$IIIlI1I[$modName][$optName] =$optValue; }}}else {if($tmpMod->issetOption($optionName)) {if(!isset($IIIIL11[$modName][$optionName]) || $mode == I299) {$IIIlI1I[$modName][$optionName] =$tmpMod->GetOptionLazy($optionName); }}}}}if(!$IIIIL1L) {?>
<html>
<head>
<style>
TABLE TH, TABLE {border: 1px solid #ADADAD;}
TABLE TD {border-left: 1px solid #ADADAD; border-bottom: 1px solid #ADADAD;}
</style>
</head>
<body bgcolor="FFBA4A">
<?php } if((sizeof($IIIlI1I) >0) || (sizeof($IIII11l) >0) || (sizeof($IIIlIll) >0 && !$IIII1Il && $IIIIL1L)) {if(!$IIIIL1L) {?>
<TABLE cellpadding="5" cellspacing="0">
<TR bgcolor="#1070FF" style="color: #FFFFFF;">
	<TH>Module</TH>
	<TH>Option</TH>
	<TH>Current Value</TH>
	<TH>Source Value</TH>
</TR>
<?php } $content =I276; foreach($IIII11l as $modName=>$IIIlI1L) {foreach($IIIlI1L as $optName=>$optValue) {$IIIlI1I[$modName][$optName] =$optValue; }}foreach($IIIlI1I as $modName=>$IIIlI1L) {if($IIIIL1L) {$IIIILlL .= I300.$modName.(in_array($modName, $IIIlIlI) ?I301 :I276)." ---\n"; }foreach($IIIlI1L as $optName=>$optValue) {if($optName == 'multi_page_allowed'){ continue; }if(isset($IIII11l[$modName][$optName])) {$optValue =$IIII11l[$modName][$optName]; }$tmp =I276; if(!$IIIIL1L) {$IIIlI11 =TTTTT1I($optValue, 1, $tmp); $IIIllII =TTTTT1I($IIIIL11[$modName][$optName], 1, $tmp); $tmp =I276; if($IIIlI11 == $IIIllII) {if($IIII1lI && $mode == I299) {continue; }$bgColor ="#FFFFFF"; }else {$bgColor ="#F8DDE4"; }echo I302.$bgColor."\">"; }if(!$IIII1Il) {$oCoreRules->AddModOptionCMD($modName, CMS_CoreRules::OPT_CMD_ADD, $optName, $optValue); if(isset($IIII11l[$modName][$optName])) {if(isset($IIII11L[I287][$modName][$optName])) {$IIII11L[I287][$modName][$optName] =$IIIlIL1[$modName][$optName]; }}else {if(isset($IIIlIL1[$modName][$optName])) {$IIII11L[I287][$modName][$optName] =$IIIlIL1[$modName][$optName]; }}}if($IIIIL1L) {$IIIILlL .= $optName; if(isset($IIII11l[$modName][$optName])) {$IIIILlL .= "  FORCED OPTION"; }$IIIILlL .= I275; }else {echo "<TD>".$modName."</TD>"; echo I303.$optName."</TD>"; echo "<TD>&nbsp;".$IIIllII."</TD>"; echo "<TD>&nbsp;".$IIIlI11.I304; echo "</TR>"; }}}if(!$IIII1Il && $IIIIL1L){ foreach($IIIlIll as $modName => $IIIlI1L){ $IIIILlL .= I300.$modName.(in_array($modName, $IIIlIlI) ?I301 :I276).", DELETE ---\n"; foreach($IIIlI1L as $optName){ $oCoreRules->AddModOptionCMD($modName, CMS_CoreRules::OPT_CMD_DEL, $optName); $IIIILlL .= $optName .I275; if( isset($IIII11L['inheritance'][$modName]) && isset($IIII11L['inheritance'][$modName][$optName]) ){unset($IIII11L[I305][$modName][$optName]); }$IIIllIl =$modName .':' .$optName; foreach(array_keys($IIII11L[I305]) as $IIIllIL){ while(in_array($IIIllIl, $IIII11L[I305][$IIIllIL])){ unset($IIII11L[I305][$IIIllIL][array_search($IIIllIl, $IIII11L[I305][$IIIllIL])]); }}}}}$content ="</TABLE>"; if(!$IIII1Il) {$oCoreRules->Core->IlLIIlL =$IIII11L[I287]; $oCoreRules->Core->IlLIIl1 =$IIII11L["allowed_inheritance"]; $oCoreRules->Core->SaveOptions('srv_options'); $oCoreRules->Core->IlLIIlL =NULL; $res =$oCoreRules->ApplyModOptionCMD(true); $content .= "<font color=\"green\"><b>Options modified.</b></font><br>"; if($IIII1lL) {$db =new DB_si; if($db->query("TRUNCATE cms_cache")) {$db->query("TRUNCATE cms_cache_content"); $content .= "<font color=\"green\"><b>Cache L1 was cleared.</b></font><br>"; }if($db->query("TRUNCATE cms_cache_blocks")) {$content .= "<font color=\"green\"><b>Cache L3 was cleared.</b></font><br>"; }}}}else {$content .= "<font color=\"green\"><b>No options.</b></font><br>"; }$content .= "</body></html>"; if($IIIIL1L) {$IIIILlL .= "------ END ADD NEW OPTIONS ------\n"; }else {echo $content; }if($IIII1l1) {$IIIllI1 ="------ WASTED OPTION'S DUMP CLEANER ------\n"; $sql =I306; $db->query($sql); $IIIlllI =Array(); $IIIllll =$db->numRows(); if($IIIllll >0) {while($db->nextRecord()) {$IIIlllI[$db->Record[I285]] =$db->Record[I284]; }$sql ="DELETE FROM cms_options WHERE id IN('".implode("','", array_keys($IIIlllI))."')"; $db->execute($sql); $IIIlllL =$db->affectedRows(); $IIIllI1 .= "DELETED DUMPS: ".$IIIlllL." of ".$IIIllll.I307.implode(", ", array_unique($IIIlllI)).")\n"; unset($IIIlll1); }$IIIllLI =sizeof($IIII1LL); if($IIIllLI >0) {$curTime =date("Y-m-d h:i:s"); $sql ="UPDATE cms_options SET name=CONCAT(name, '.backup.".$curTime.I308.implode("','", $IIII1LL)."')"; $db->execute($sql); $IIIllLl =$db->affectedRows(); $IIIllI1 .= "WASTED DUMPS: ".$IIIllLl." of ".$IIIllLI.I307.implode(I309, array_keys($IIII1LL)).")\n"; }$IIIllI1 .= "------ END WASTED OPTION'S DUMP CLEANER ------\n"; if($IIIIL1L) {if(empty($IIII1IL)) {$IIIILlL .= $IIIllI1; }}}if($IIIIL1L && !empty($IIII1IL)) {Header("Location: ".$ADMIN_PATH_WWW."start.php?action=refresh&step=3", true, 301); }